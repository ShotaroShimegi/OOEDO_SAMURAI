
OOEDO_SAMURAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008788  08008788  00018788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d0  080089d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d8  080089d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080089e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200001dc  08008bbc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08008bbc  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d6c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002924  00000000  00000000  00031f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  000359a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002030b  00000000  00000000  00036938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcc9  00000000  00000000  00056c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c438d  00000000  00000000  0006490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  00128d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800876c 	.word	0x0800876c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800876c 	.word	0x0800876c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <MX_CAN1_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e52:	f001 ff6f 	bl	8002d34 <HAL_CAN_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 fcd8 	bl	8001810 <Error_Handler>
  }

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000024c 	.word	0x2000024c
 8000e68:	40006400 	.word	0x40006400

08000e6c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_CAN2_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8-1;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e96:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ebe:	f001 ff39 	bl	8002d34 <HAL_CAN_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 fca2 	bl	8001810 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000224 	.word	0x20000224
 8000ed4:	40006800 	.word	0x40006800

08000ed8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a53      	ldr	r2, [pc, #332]	; (8001044 <HAL_CAN_MspInit+0x16c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d146      	bne.n	8000f88 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f04:	4b50      	ldr	r3, [pc, #320]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	4b4e      	ldr	r3, [pc, #312]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f56:	2309      	movs	r3, #9
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	483b      	ldr	r0, [pc, #236]	; (8001050 <HAL_CAN_MspInit+0x178>)
 8000f62:	f003 f95f 	bl	8004224 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f002 fe19 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f70:	2014      	movs	r0, #20
 8000f72:	f002 fe32 	bl	8003bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f002 fe11 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f80:	2015      	movs	r0, #21
 8000f82:	f002 fe2a 	bl	8003bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000f86:	e058      	b.n	800103a <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_CAN_MspInit+0x17c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d153      	bne.n	800103a <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800100a:	2309      	movs	r3, #9
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_CAN_MspInit+0x180>)
 8001016:	f003 f905 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	f002 fdbf 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f002 fdd8 	bl	8003bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	2041      	movs	r0, #65	; 0x41
 8001030:	f002 fdb7 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001034:	2041      	movs	r0, #65	; 0x41
 8001036:	f002 fdd0 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	; 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40006400 	.word	0x40006400
 8001048:	200001f8 	.word	0x200001f8
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40006800 	.word	0x40006800
 8001058:	40020400 	.word	0x40020400

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x4c>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f002 fd8d 	bl	8003ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f002 fda6 	bl	8003bda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200f      	movs	r0, #15
 8001094:	f002 fd85 	bl	8003ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001098:	200f      	movs	r0, #15
 800109a:	f002 fd9e 	bl	8003bda <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <MX_GPIO_Init+0x178>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <MX_GPIO_Init+0x178>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <MX_GPIO_Init+0x178>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b50      	ldr	r3, [pc, #320]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_GPIO_Init+0x178>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_GPIO_Init+0x178>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_GPIO_Init+0x178>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_GPIO_Init+0x178>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <MX_GPIO_Init+0x178>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a41      	ldr	r2, [pc, #260]	; (8001224 <MX_GPIO_Init+0x178>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_GPIO_Init+0x178>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x178>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <MX_GPIO_Init+0x178>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_GPIO_Init+0x178>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 800114e:	2200      	movs	r2, #0
 8001150:	f64e 4113 	movw	r1, #60435	; 0xec13
 8001154:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_GPIO_Init+0x17c>)
 8001156:	f003 f9ff 	bl	8004558 <HAL_GPIO_WritePin>
                          |LED2_Pin|GYRO_CS_Pin|LED8_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4832      	ldr	r0, [pc, #200]	; (800122c <MX_GPIO_Init+0x180>)
 8001162:	f003 f9f9 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x184>)
 800116e:	f003 f9f3 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 8001172:	f64e 4311 	movw	r3, #60433	; 0xec11
 8001176:	617b      	str	r3, [r7, #20]
                          |GYRO_CS_Pin|LED8_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4827      	ldr	r0, [pc, #156]	; (8001228 <MX_GPIO_Init+0x17c>)
 800118c:	f003 f84a 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <MX_GPIO_Init+0x17c>)
 80011a8:	f003 f83c 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SWL_Pin|TOUCH_Pin|SWR_Pin;
 80011ac:	f248 4310 	movw	r3, #33808	; 0x8410
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_GPIO_Init+0x180>)
 80011c2:	f003 f82f 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_GPIO_Init+0x180>)
 80011e0:	f003 f820 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWE_Pin;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWE_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0x184>)
 80011fa:	f003 f813 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x184>)
 8001218:	f003 f804 	bl	8004224 <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d105      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x20>
		time_count++;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001252:	701a      	strb	r2, [r3, #0]
	}
	if(time_count == 0)	{
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001262:	f003 f992 	bl	800458a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800126c:	f003 f98d 	bl	800458a <HAL_GPIO_TogglePin>
	}

}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200003d4 	.word	0x200003d4
 800127c:	20000212 	.word	0x20000212
 8001280:	40020800 	.word	0x40020800

08001284 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	all_uart_count++;
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <HAL_UART_RxCpltCallback+0x120>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_UART_RxCpltCallback+0x120>)
 8001296:	801a      	strh	r2, [r3, #0]

	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_UART_RxCpltCallback+0x124>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d10b      	bne.n	80012bc <HAL_UART_RxCpltCallback+0x38>
		uart1_count++;
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_UART_RxCpltCallback+0x128>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_UART_RxCpltCallback+0x128>)
 80012ae:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, rx_uart, 2);
 80012b0:	2202      	movs	r2, #2
 80012b2:	493f      	ldr	r1, [pc, #252]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 80012b4:	483c      	ldr	r0, [pc, #240]	; (80013a8 <HAL_UART_RxCpltCallback+0x124>)
 80012b6:	f004 feb9 	bl	800602c <HAL_UART_Receive_IT>
 80012ba:	e058      	b.n	800136e <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart2.Instance) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <HAL_UART_RxCpltCallback+0x130>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10b      	bne.n	80012e0 <HAL_UART_RxCpltCallback+0x5c>
		uart2_count++;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_UART_RxCpltCallback+0x134>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_UART_RxCpltCallback+0x134>)
 80012d2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_uart, 2);
 80012d4:	2202      	movs	r2, #2
 80012d6:	4936      	ldr	r1, [pc, #216]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 80012d8:	4836      	ldr	r0, [pc, #216]	; (80013b4 <HAL_UART_RxCpltCallback+0x130>)
 80012da:	f004 fea7 	bl	800602c <HAL_UART_Receive_IT>
 80012de:	e046      	b.n	800136e <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart3.Instance) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_UART_RxCpltCallback+0x138>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10b      	bne.n	8001304 <HAL_UART_RxCpltCallback+0x80>
		uart3_count++;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_UART_RxCpltCallback+0x13c>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_UART_RxCpltCallback+0x13c>)
 80012f6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, rx_uart, 2);
 80012f8:	2202      	movs	r2, #2
 80012fa:	492d      	ldr	r1, [pc, #180]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 80012fc:	482f      	ldr	r0, [pc, #188]	; (80013bc <HAL_UART_RxCpltCallback+0x138>)
 80012fe:	f004 fe95 	bl	800602c <HAL_UART_Receive_IT>
 8001302:	e034      	b.n	800136e <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart4.Instance) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_UART_RxCpltCallback+0x140>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d10b      	bne.n	8001328 <HAL_UART_RxCpltCallback+0xa4>
		uart4_count++;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_UART_RxCpltCallback+0x144>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_UART_RxCpltCallback+0x144>)
 800131a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, rx_uart, 2);
 800131c:	2202      	movs	r2, #2
 800131e:	4924      	ldr	r1, [pc, #144]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 8001320:	4828      	ldr	r0, [pc, #160]	; (80013c4 <HAL_UART_RxCpltCallback+0x140>)
 8001322:	f004 fe83 	bl	800602c <HAL_UART_Receive_IT>
 8001326:	e022      	b.n	800136e <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart5.Instance) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_UART_RxCpltCallback+0x148>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d10b      	bne.n	800134c <HAL_UART_RxCpltCallback+0xc8>
		uart5_count++;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_UART_RxCpltCallback+0x14c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_UART_RxCpltCallback+0x14c>)
 800133e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, rx_uart, 2);
 8001340:	2202      	movs	r2, #2
 8001342:	491b      	ldr	r1, [pc, #108]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <HAL_UART_RxCpltCallback+0x148>)
 8001346:	f004 fe71 	bl	800602c <HAL_UART_Receive_IT>
 800134a:	e010      	b.n	800136e <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart6.Instance) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_UART_RxCpltCallback+0x150>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d10a      	bne.n	800136e <HAL_UART_RxCpltCallback+0xea>
		uart6_count++;
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_UART_RxCpltCallback+0x154>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_UART_RxCpltCallback+0x154>)
 8001362:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, rx_uart, 2);
 8001364:	2202      	movs	r2, #2
 8001366:	4912      	ldr	r1, [pc, #72]	; (80013b0 <HAL_UART_RxCpltCallback+0x12c>)
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <HAL_UART_RxCpltCallback+0x150>)
 800136a:	f004 fe5f 	bl	800602c <HAL_UART_Receive_IT>
	}
	if(all_uart_count % 5 == 0){
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_UART_RxCpltCallback+0x120>)
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_UART_RxCpltCallback+0x158>)
 8001374:	fba3 1302 	umull	r1, r3, r3, r2
 8001378:	0899      	lsrs	r1, r3, #2
 800137a:	460b      	mov	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <HAL_UART_RxCpltCallback+0x116>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <HAL_UART_RxCpltCallback+0x15c>)
 800138e:	f003 f8fc 	bl	800458a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001392:	2102      	movs	r1, #2
 8001394:	4812      	ldr	r0, [pc, #72]	; (80013e0 <HAL_UART_RxCpltCallback+0x15c>)
 8001396:	f003 f8f8 	bl	800458a <HAL_GPIO_TogglePin>

	}
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000020e 	.word	0x2000020e
 80013a8:	200005f4 	.word	0x200005f4
 80013ac:	20000202 	.word	0x20000202
 80013b0:	20000298 	.word	0x20000298
 80013b4:	200006b4 	.word	0x200006b4
 80013b8:	20000204 	.word	0x20000204
 80013bc:	20000574 	.word	0x20000574
 80013c0:	20000206 	.word	0x20000206
 80013c4:	20000674 	.word	0x20000674
 80013c8:	20000208 	.word	0x20000208
 80013cc:	200005b4 	.word	0x200005b4
 80013d0:	2000020a 	.word	0x2000020a
 80013d4:	20000634 	.word	0x20000634
 80013d8:	2000020c 	.word	0x2000020c
 80013dc:	cccccccd 	.word	0xcccccccd
 80013e0:	40020800 	.word	0x40020800

080013e4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart3.Instance) {
		//Custom_data_Transmit
	}
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d117      	bne.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
	{// can2 bus receive interrupt
		can2_count++;
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001416:	801a      	strh	r2, [r3, #0]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, rx_data);
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 ff83 	bl	800332a <HAL_CAN_GetRxMessage>
		//check ESC identifier
		if(canRxHeader.StdId == 0x1ff){
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f240 12ff 	movw	r2, #511	; 0x1ff
 800142c:	4293      	cmp	r3, r2
 800142e:	d105      	bne.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			can2_clear++;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800143a:	801a      	strh	r2, [r3, #0]
		}
	}
	if (hcan->Instance == hcan1.Instance)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d105      	bne.n	8001454 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{// can1 bus receive interrupt
		can1_count++;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001452:	801a      	strh	r2, [r3, #0]
	}

	if(can2_clear % 5 == 0){
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800145a:	fba3 1302 	umull	r1, r3, r3, r2
 800145e:	0899      	lsrs	r1, r3, #2
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800146e:	2101      	movs	r1, #1
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001472:	f003 f88a 	bl	800458a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800147c:	f003 f885 	bl	800458a <HAL_GPIO_TogglePin>

	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000224 	.word	0x20000224
 800148c:	200001fe 	.word	0x200001fe
 8001490:	20000290 	.word	0x20000290
 8001494:	20000274 	.word	0x20000274
 8001498:	20000200 	.word	0x20000200
 800149c:	2000024c 	.word	0x2000024c
 80014a0:	200001fc 	.word	0x200001fc
 80014a4:	cccccccd 	.word	0xcccccccd
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020400 	.word	0x40020400

080014b0 <initCanFilter>:

void initCanFilter() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <initCanFilter+0x54>)
 80014e4:	f001 fd22 	bl	8002f2c <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <initCanFilter+0x58>)
 80014f6:	f001 fd19 	bl	8002f2c <HAL_CAN_ConfigFilter>
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000024c 	.word	0x2000024c
 8001508:	20000224 	.word	0x20000224

0800150c <transCAN>:
	WriteByte(ADDRESS_PWR_MGMT_1,VALUE_LOW_POWER);
	HAL_Delay(10);
}

void transCAN()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef header;
	uint32_t TxMailbox;
	uint8_t i;

	header.StdId = 0x1ff;
 8001512:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001516:	607b      	str	r3, [r7, #4]
	header.RTR = CAN_RTR_DATA;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
	header.IDE = CAN_ID_STD;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
	header.DLC = 8;
 8001520:	2308      	movs	r3, #8
 8001522:	617b      	str	r3, [r7, #20]
	for(i=0;i<8;i++){
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]
 8001528:	e008      	b.n	800153c <transCAN+0x30>
		tx_data[i] = 2*i;
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	7ffa      	ldrb	r2, [r7, #31]
 800152e:	0052      	lsls	r2, r2, #1
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <transCAN+0x4c>)
 8001534:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<8;i++){
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	3301      	adds	r3, #1
 800153a:	77fb      	strb	r3, [r7, #31]
 800153c:	7ffb      	ldrb	r3, [r7, #31]
 800153e:	2b07      	cmp	r3, #7
 8001540:	d9f3      	bls.n	800152a <transCAN+0x1e>
	}
	HAL_CAN_AddTxMessage(&hcan1, &header, tx_data, &TxMailbox);
 8001542:	463b      	mov	r3, r7
 8001544:	1d39      	adds	r1, r7, #4
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <transCAN+0x4c>)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <transCAN+0x50>)
 800154a:	f001 fe13 	bl	8003174 <HAL_CAN_AddTxMessage>
}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000029c 	.word	0x2000029c
 800155c:	2000024c 	.word	0x2000024c

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f001 fb52 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001568:	f000 f8e8 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156c:	f7ff fd9e 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001570:	f7ff fd74 	bl	800105c <MX_DMA_Init>
  MX_CAN1_Init();
 8001574:	f7ff fc44 	bl	8000e00 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001578:	f7ff fc78 	bl	8000e6c <MX_CAN2_Init>
  MX_TIM1_Init();
 800157c:	f000 fbde 	bl	8001d3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001580:	f000 fc7c 	bl	8001e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001584:	f000 fcc6 	bl	8001f14 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001588:	f000 fd46 	bl	8002018 <MX_TIM6_Init>
  MX_TIM8_Init();
 800158c:	f000 fdb0 	bl	80020f0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001590:	f000 fe30 	bl	80021f4 <MX_TIM12_Init>
  MX_UART4_Init();
 8001594:	f001 f80c 	bl	80025b0 <MX_UART4_Init>
  MX_UART5_Init();
 8001598:	f001 f834 	bl	8002604 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800159c:	f001 f85c 	bl	8002658 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015a0:	f001 f884 	bl	80026ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015a4:	f001 f8ac 	bl	8002700 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80015a8:	f001 f8d4 	bl	8002754 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 80015ac:	f000 f9f8 	bl	80019a0 <MX_SPI3_Init>
  MX_TIM7_Init();
 80015b0:	f000 fd68 	bl	8002084 <MX_TIM7_Init>
  MX_SPI1_Init();
 80015b4:	f000 f9be 	bl	8001934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015be:	4851      	ldr	r0, [pc, #324]	; (8001704 <main+0x1a4>)
 80015c0:	f002 ffca 	bl	8004558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ca:	484e      	ldr	r0, [pc, #312]	; (8001704 <main+0x1a4>)
 80015cc:	f002 ffc4 	bl	8004558 <HAL_GPIO_WritePin>

  initCanFilter();
 80015d0:	f7ff ff6e 	bl	80014b0 <initCanFilter>
//  initGyro();

  HAL_Delay(100);
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f001 fb8b 	bl	8002cf0 <HAL_Delay>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e0:	4848      	ldr	r0, [pc, #288]	; (8001704 <main+0x1a4>)
 80015e2:	f002 ffb9 	bl	8004558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ec:	4845      	ldr	r0, [pc, #276]	; (8001704 <main+0x1a4>)
 80015ee:	f002 ffb3 	bl	8004558 <HAL_GPIO_WritePin>

  HAL_CAN_Start(&hcan1);
 80015f2:	4845      	ldr	r0, [pc, #276]	; (8001708 <main+0x1a8>)
 80015f4:	f001 fd7a 	bl	80030ec <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80015f8:	4844      	ldr	r0, [pc, #272]	; (800170c <main+0x1ac>)
 80015fa:	f001 fd77 	bl	80030ec <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80015fe:	2102      	movs	r1, #2
 8001600:	4841      	ldr	r0, [pc, #260]	; (8001708 <main+0x1a8>)
 8001602:	f001 ffa4 	bl	800354e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001606:	2102      	movs	r1, #2
 8001608:	4840      	ldr	r0, [pc, #256]	; (800170c <main+0x1ac>)
 800160a:	f001 ffa0 	bl	800354e <HAL_CAN_ActivateNotification>

  HAL_Delay(100);
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f001 fb6e 	bl	8002cf0 <HAL_Delay>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	483d      	ldr	r0, [pc, #244]	; (8001710 <main+0x1b0>)
 800161c:	f002 ff9c 	bl	8004558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	2101      	movs	r1, #1
 8001624:	4837      	ldr	r0, [pc, #220]	; (8001704 <main+0x1a4>)
 8001626:	f002 ff97 	bl	8004558 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 800162a:	483a      	ldr	r0, [pc, #232]	; (8001714 <main+0x1b4>)
 800162c:	f003 fc93 	bl	8004f56 <HAL_TIM_Base_Start_IT>

  HAL_Delay(100);
 8001630:	2064      	movs	r0, #100	; 0x64
 8001632:	f001 fb5d 	bl	8002cf0 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	2102      	movs	r1, #2
 800163a:	4832      	ldr	r0, [pc, #200]	; (8001704 <main+0x1a4>)
 800163c:	f002 ff8c 	bl	8004558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001646:	482f      	ldr	r0, [pc, #188]	; (8001704 <main+0x1a4>)
 8001648:	f002 ff86 	bl	8004558 <HAL_GPIO_WritePin>

//	HAL_UART_Receive_DMA(&huart4, rx_uart, 2);
//printf("OOEDO_SAMURAI_BEGINNING\n");

  HAL_UART_Receive_IT(&huart1, rx_uart, 2);
 800164c:	2202      	movs	r2, #2
 800164e:	4932      	ldr	r1, [pc, #200]	; (8001718 <main+0x1b8>)
 8001650:	4832      	ldr	r0, [pc, #200]	; (800171c <main+0x1bc>)
 8001652:	f004 fceb 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_uart, 2);
 8001656:	2202      	movs	r2, #2
 8001658:	492f      	ldr	r1, [pc, #188]	; (8001718 <main+0x1b8>)
 800165a:	4831      	ldr	r0, [pc, #196]	; (8001720 <main+0x1c0>)
 800165c:	f004 fce6 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx_uart, 2);
 8001660:	2202      	movs	r2, #2
 8001662:	492d      	ldr	r1, [pc, #180]	; (8001718 <main+0x1b8>)
 8001664:	482f      	ldr	r0, [pc, #188]	; (8001724 <main+0x1c4>)
 8001666:	f004 fce1 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rx_uart, 2);
 800166a:	2202      	movs	r2, #2
 800166c:	492a      	ldr	r1, [pc, #168]	; (8001718 <main+0x1b8>)
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <main+0x1c8>)
 8001670:	f004 fcdc 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, rx_uart, 2);
 8001674:	2202      	movs	r2, #2
 8001676:	4928      	ldr	r1, [pc, #160]	; (8001718 <main+0x1b8>)
 8001678:	482c      	ldr	r0, [pc, #176]	; (800172c <main+0x1cc>)
 800167a:	f004 fcd7 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rx_uart, 2);
 800167e:	2202      	movs	r2, #2
 8001680:	4925      	ldr	r1, [pc, #148]	; (8001718 <main+0x1b8>)
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <main+0x1d0>)
 8001684:	f004 fcd2 	bl	800602c <HAL_UART_Receive_IT>

  MelodySummer();
 8001688:	f000 f8c9 	bl	800181e <MelodySummer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  main_loop++;
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <main+0x1d4>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <main+0x1d4>)
 8001696:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,tx_uart,2,1);
 8001698:	2301      	movs	r3, #1
 800169a:	2202      	movs	r2, #2
 800169c:	4926      	ldr	r1, [pc, #152]	; (8001738 <main+0x1d8>)
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <main+0x1bc>)
 80016a0:	f004 fc2b 	bl	8005efa <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,tx_uart,2,1);
 80016a4:	2301      	movs	r3, #1
 80016a6:	2202      	movs	r2, #2
 80016a8:	4923      	ldr	r1, [pc, #140]	; (8001738 <main+0x1d8>)
 80016aa:	481d      	ldr	r0, [pc, #116]	; (8001720 <main+0x1c0>)
 80016ac:	f004 fc25 	bl	8005efa <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,tx_uart,2,1);
 80016b0:	2301      	movs	r3, #1
 80016b2:	2202      	movs	r2, #2
 80016b4:	4920      	ldr	r1, [pc, #128]	; (8001738 <main+0x1d8>)
 80016b6:	481b      	ldr	r0, [pc, #108]	; (8001724 <main+0x1c4>)
 80016b8:	f004 fc1f 	bl	8005efa <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4,tx_uart,2,1);
 80016bc:	2301      	movs	r3, #1
 80016be:	2202      	movs	r2, #2
 80016c0:	491d      	ldr	r1, [pc, #116]	; (8001738 <main+0x1d8>)
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <main+0x1c8>)
 80016c4:	f004 fc19 	bl	8005efa <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart5,tx_uart,2,1);
 80016c8:	2301      	movs	r3, #1
 80016ca:	2202      	movs	r2, #2
 80016cc:	491a      	ldr	r1, [pc, #104]	; (8001738 <main+0x1d8>)
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <main+0x1cc>)
 80016d0:	f004 fc13 	bl	8005efa <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6,tx_uart,2,1);
 80016d4:	2301      	movs	r3, #1
 80016d6:	2202      	movs	r2, #2
 80016d8:	4917      	ldr	r1, [pc, #92]	; (8001738 <main+0x1d8>)
 80016da:	4815      	ldr	r0, [pc, #84]	; (8001730 <main+0x1d0>)
 80016dc:	f004 fc0d 	bl	8005efa <HAL_UART_Transmit>

		  transCAN();
 80016e0:	f7ff ff14 	bl	800150c <transCAN>
		  HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 80016e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <main+0x1a4>)
 80016ea:	f002 ff4e 	bl	800458a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 80016ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f2:	4804      	ldr	r0, [pc, #16]	; (8001704 <main+0x1a4>)
 80016f4:	f002 ff49 	bl	800458a <HAL_GPIO_TogglePin>

		  HAL_Delay(500);
 80016f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fc:	f001 faf8 	bl	8002cf0 <HAL_Delay>
		  main_loop++;
 8001700:	e7c4      	b.n	800168c <main+0x12c>
 8001702:	bf00      	nop
 8001704:	40020800 	.word	0x40020800
 8001708:	2000024c 	.word	0x2000024c
 800170c:	20000224 	.word	0x20000224
 8001710:	40020400 	.word	0x40020400
 8001714:	200003d4 	.word	0x200003d4
 8001718:	20000298 	.word	0x20000298
 800171c:	200005f4 	.word	0x200005f4
 8001720:	200006b4 	.word	0x200006b4
 8001724:	20000574 	.word	0x20000574
 8001728:	20000674 	.word	0x20000674
 800172c:	200005b4 	.word	0x200005b4
 8001730:	20000634 	.word	0x20000634
 8001734:	20000214 	.word	0x20000214
 8001738:	20000210 	.word	0x20000210

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fae0 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a0:	2310      	movs	r3, #16
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b0:	23a8      	movs	r3, #168	; 0xa8
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fefd 	bl	80045c0 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017cc:	f000 f820 	bl	8001810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2105      	movs	r1, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 f956 	bl	8004aa0 <HAL_RCC_ClockConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fa:	f000 f809 	bl	8001810 <Error_Handler>
  }
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	; 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <MelodySummer>:

#include"tim.h"
#include"music.h"

void MelodySummer(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
	Melody(g6,100);
 8001822:	2164      	movs	r1, #100	; 0x64
 8001824:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8001828:	f000 f826 	bl	8001878 <Melody>
	Melody(c7,100);
 800182c:	2164      	movs	r1, #100	; 0x64
 800182e:	f640 002d 	movw	r0, #2093	; 0x82d
 8001832:	f000 f821 	bl	8001878 <Melody>
	Melody(d7,100);
 8001836:	2164      	movs	r1, #100	; 0x64
 8001838:	f640 102d 	movw	r0, #2349	; 0x92d
 800183c:	f000 f81c 	bl	8001878 <Melody>
	Melody(e7,100);
 8001840:	2164      	movs	r1, #100	; 0x64
 8001842:	f640 204d 	movw	r0, #2637	; 0xa4d
 8001846:	f000 f817 	bl	8001878 <Melody>
	Melody(d7,100);
 800184a:	2164      	movs	r1, #100	; 0x64
 800184c:	f640 102d 	movw	r0, #2349	; 0x92d
 8001850:	f000 f812 	bl	8001878 <Melody>
	HAL_Delay(50);
 8001854:	2032      	movs	r0, #50	; 0x32
 8001856:	f001 fa4b 	bl	8002cf0 <HAL_Delay>
	Melody(c7,50);
 800185a:	2132      	movs	r1, #50	; 0x32
 800185c:	f640 002d 	movw	r0, #2093	; 0x82d
 8001860:	f000 f80a 	bl	8001878 <Melody>
	HAL_Delay(50);
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f001 fa43 	bl	8002cf0 <HAL_Delay>
	Melody(c7,200);
 800186a:	21c8      	movs	r1, #200	; 0xc8
 800186c:	f640 002d 	movw	r0, #2093	; 0x82d
 8001870:	f000 f802 	bl	8001878 <Melody>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <Melody>:
	Melody(e6,400);
	Melody(d6,400);
}

void Melody(uint32_t hz, uint32_t ms)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC;
//TIM8 Setting
	htim3.Instance = TIM3;
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <Melody+0xac>)
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <Melody+0xb0>)
 8001886:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 840-1;
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <Melody+0xac>)
 800188a:	f240 3247 	movw	r2, #839	; 0x347
 800188e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <Melody+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100000 / hz;
 8001896:	4a25      	ldr	r2, [pc, #148]	; (800192c <Melody+0xb4>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <Melody+0xac>)
 80018a0:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <Melody+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <Melody+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <Melody+0xac>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
//Config Setting
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse =  95000 / hz ;
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <Melody+0xb8>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
//TIM8 OUTPUT
	if(HAL_TIM_PWM_Init(&htim3) != HAL_OK){
 80018ca:	4816      	ldr	r0, [pc, #88]	; (8001924 <Melody+0xac>)
 80018cc:	f003 fb67 	bl	8004f9e <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <Melody+0x62>
		Error_Handler();
 80018d6:	f7ff ff9b 	bl	8001810 <Error_Handler>
	}
	if(HAL_TIM_PWM_ConfigChannel(&htim3,&sConfigOC,TIM_CHANNEL_3) != HAL_OK){
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2208      	movs	r2, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <Melody+0xac>)
 80018e4:	f003 fd24 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <Melody+0x7a>
		Error_Handler();
 80018ee:	f7ff ff8f 	bl	8001810 <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3) != HAL_OK){
 80018f2:	2108      	movs	r1, #8
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <Melody+0xac>)
 80018f6:	f003 fb7d 	bl	8004ff4 <HAL_TIM_PWM_Start>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <Melody+0x8c>
		Error_Handler();
 8001900:	f7ff ff86 	bl	8001810 <Error_Handler>
	}
	HAL_Delay(ms);
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f001 f9f3 	bl	8002cf0 <HAL_Delay>
	if(HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3) != HAL_OK){
 800190a:	2108      	movs	r1, #8
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <Melody+0xac>)
 800190e:	f003 fbaf 	bl	8005070 <HAL_TIM_PWM_Stop>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <Melody+0xa4>
		Error_Handler();
 8001918:	f7ff ff7a 	bl	8001810 <Error_Handler>
	}
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000394 	.word	0x20000394
 8001928:	40000400 	.word	0x40000400
 800192c:	000186a0 	.word	0x000186a0
 8001930:	00017318 	.word	0x00017318

08001934 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_SPI1_Init+0x64>)
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <MX_SPI1_Init+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_SPI1_Init+0x64>)
 8001940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_SPI1_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_SPI1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_SPI1_Init+0x64>)
 8001954:	2202      	movs	r2, #2
 8001956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_SPI1_Init+0x64>)
 800195a:	2201      	movs	r2, #1
 800195c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_SPI1_Init+0x64>)
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SPI1_Init+0x64>)
 8001968:	2220      	movs	r2, #32
 800196a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SPI1_Init+0x64>)
 8001980:	220a      	movs	r2, #10
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_SPI1_Init+0x64>)
 8001986:	f003 fa57 	bl	8004e38 <HAL_SPI_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001990:	f7ff ff3e 	bl	8001810 <Error_Handler>
  }

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200002fc 	.word	0x200002fc
 800199c:	40013000 	.word	0x40013000

080019a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI3_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019d4:	2218      	movs	r2, #24
 80019d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI3_Init+0x64>)
 80019f2:	f003 fa21 	bl	8004e38 <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80019fc:	f7ff ff08 	bl	8001810 <Error_Handler>
  }

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200002a4 	.word	0x200002a4
 8001a08:	40003c00 	.word	0x40003c00

08001a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a32      	ldr	r2, [pc, #200]	; (8001af4 <HAL_SPI_MspInit+0xe8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23e0      	movs	r3, #224	; 0xe0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481e      	ldr	r0, [pc, #120]	; (8001afc <HAL_SPI_MspInit+0xf0>)
 8001a82:	f002 fbcf 	bl	8004224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a86:	e030      	b.n	8001aea <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_SPI_MspInit+0xf4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_SPI_MspInit+0xec>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aca:	2338      	movs	r3, #56	; 0x38
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ada:	2306      	movs	r3, #6
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <HAL_SPI_MspInit+0xf8>)
 8001ae6:	f002 fb9d 	bl	8004224 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40013000 	.word	0x40013000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40003c00 	.word	0x40003c00
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f001 f880 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Stream2_IRQHandler+0x10>)
 8001bba:	f002 f8f9 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000514 	.word	0x20000514

08001bc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA1_Stream4_IRQHandler+0x10>)
 8001bce:	f002 f8ef 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200006f4 	.word	0x200006f4

08001bdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <CAN1_RX0_IRQHandler+0x10>)
 8001be2:	f001 fcda 	bl	800359a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000024c 	.word	0x2000024c

08001bf0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <CAN1_RX1_IRQHandler+0x10>)
 8001bf6:	f001 fcd0 	bl	800359a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000024c 	.word	0x2000024c

08001c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <USART1_IRQHandler+0x10>)
 8001c0a:	f004 fa65 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200005f4 	.word	0x200005f4

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART2_IRQHandler+0x10>)
 8001c1e:	f004 fa5b 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200006b4 	.word	0x200006b4

08001c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART3_IRQHandler+0x10>)
 8001c32:	f004 fa51 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000574 	.word	0x20000574

08001c40 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <UART5_IRQHandler+0x10>)
 8001c46:	f004 fa47 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200005b4 	.word	0x200005b4

08001c54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM6_DAC_IRQHandler+0x10>)
 8001c5a:	f003 fa61 	bl	8005120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200003d4 	.word	0x200003d4

08001c68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM7_IRQHandler+0x10>)
 8001c6e:	f003 fa57 	bl	8005120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200004d4 	.word	0x200004d4

08001c7c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <CAN2_RX0_IRQHandler+0x10>)
 8001c82:	f001 fc8a 	bl	800359a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000224 	.word	0x20000224

08001c90 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <CAN2_RX1_IRQHandler+0x10>)
 8001c96:	f001 fc80 	bl	800359a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000224 	.word	0x20000224

08001ca4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <USART6_IRQHandler+0x10>)
 8001caa:	f004 fa15 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000634 	.word	0x20000634

08001cb8 <_sbrk>:
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x50>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x16>
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <_sbrk+0x50>)
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <_sbrk+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <_sbrk+0x50>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <_sbrk+0x50>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	466a      	mov	r2, sp
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d907      	bls.n	8001cf2 <_sbrk+0x3a>
 8001ce2:	f004 ffeb 	bl	8006cbc <__errno>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	230c      	movs	r3, #12
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	e006      	b.n	8001d00 <_sbrk+0x48>
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <_sbrk+0x50>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <_sbrk+0x50>)
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000218 	.word	0x20000218
 8001d0c:	20000760 	.word	0x20000760

08001d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <SystemInit+0x28>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <SystemInit+0x28>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SystemInit+0x28>)
 8001d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b096      	sub	sp, #88	; 0x58
 8001d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2220      	movs	r2, #32
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 ffcb 	bl	8006d10 <memset>

  htim1.Instance = TIM1;
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <MX_TIM1_Init+0x13c>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d82:	22a7      	movs	r2, #167	; 0xa7
 8001d84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da6:	4833      	ldr	r0, [pc, #204]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001da8:	f003 f8aa 	bl	8004f00 <HAL_TIM_Base_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001db2:	f7ff fd2d 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	482c      	ldr	r0, [pc, #176]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001dc4:	f003 fb7a 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dce:	f7ff fd1f 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd2:	4828      	ldr	r0, [pc, #160]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001dd4:	f003 f8e3 	bl	8004f9e <HAL_TIM_PWM_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dde:	f7ff fd17 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dee:	4619      	mov	r1, r3
 8001df0:	4820      	ldr	r0, [pc, #128]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001df2:	f003 ff53 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001dfc:	f7ff fd08 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e00:	2360      	movs	r3, #96	; 0x60
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	4619      	mov	r1, r3
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001e26:	f003 fa83 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e30:	f7ff fcee 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001e58:	f003 ff9c 	bl	8005d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001e62:	f7ff fcd5 	bl	8001810 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM1_Init+0x138>)
 8001e68:	f000 faf0 	bl	800244c <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3758      	adds	r7, #88	; 0x58
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000414 	.word	0x20000414
 8001e78:	40010000 	.word	0x40010000

08001e7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ea2:	2253      	movs	r2, #83	; 0x53
 8001ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ec2:	f003 f81d 	bl	8004f00 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f7ff fca0 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001ede:	f003 faed 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f7ff fc92 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_TIM2_Init+0x94>)
 8001efa:	f003 fecf 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f7ff fc84 	bl	8001810 <Error_Handler>
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000454 	.word	0x20000454

08001f14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	615a      	str	r2, [r3, #20]
 8001f42:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f46:	4a33      	ldr	r2, [pc, #204]	; (8002014 <MX_TIM3_Init+0x100>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f4c:	2253      	movs	r2, #83	; 0x53
 8001f4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f6a:	4829      	ldr	r0, [pc, #164]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f6c:	f002 ffc8 	bl	8004f00 <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f76:	f7ff fc4b 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f84:	4619      	mov	r1, r3
 8001f86:	4822      	ldr	r0, [pc, #136]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f88:	f003 fa98 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f92:	f7ff fc3d 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f96:	481e      	ldr	r0, [pc, #120]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001f98:	f003 f801 	bl	8004f9e <HAL_TIM_PWM_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fa2:	f7ff fc35 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4816      	ldr	r0, [pc, #88]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001fb6:	f003 fe71 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fc0:	f7ff fc26 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc4:	2360      	movs	r3, #96	; 0x60
 8001fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001fdc:	f003 f9a8 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001fe6:	f7ff fc13 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	220c      	movs	r2, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM3_Init+0xfc>)
 8001ff2:	f003 f99d 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ffc:	f7ff fc08 	bl	8001810 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM3_Init+0xfc>)
 8002002:	f000 fa23 	bl	800244c <HAL_TIM_MspPostInit>

}
 8002006:	bf00      	nop
 8002008:	3738      	adds	r7, #56	; 0x38
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000394 	.word	0x20000394
 8002014:	40000400 	.word	0x40000400

08002018 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201e:	463b      	mov	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_TIM6_Init+0x64>)
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <MX_TIM6_Init+0x68>)
 800202a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840-1;
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <MX_TIM6_Init+0x64>)
 800202e:	f240 3247 	movw	r2, #839	; 0x347
 8002032:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_TIM6_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_TIM6_Init+0x64>)
 800203c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002040:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_TIM6_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_TIM6_Init+0x64>)
 800204a:	f002 ff59 	bl	8004f00 <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002054:	f7ff fbdc 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_TIM6_Init+0x64>)
 8002066:	f003 fe19 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002070:	f7ff fbce 	bl	8001810 <Error_Handler>
  }

}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200003d4 	.word	0x200003d4
 8002080:	40001000 	.word	0x40001000

08002084 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM7_Init+0x64>)
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <MX_TIM7_Init+0x68>)
 8002096:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_TIM7_Init+0x64>)
 800209a:	2253      	movs	r2, #83	; 0x53
 800209c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_TIM7_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_TIM7_Init+0x64>)
 80020a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_TIM7_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_TIM7_Init+0x64>)
 80020b4:	f002 ff24 	bl	8004f00 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80020be:	f7ff fba7 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <MX_TIM7_Init+0x64>)
 80020d0:	f003 fde4 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80020da:	f7ff fb99 	bl	8001810 <Error_Handler>
  }

}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200004d4 	.word	0x200004d4
 80020ec:	40001400 	.word	0x40001400

080020f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b092      	sub	sp, #72	; 0x48
 80020f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	615a      	str	r2, [r3, #20]
 8002112:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2220      	movs	r2, #32
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f004 fdf8 	bl	8006d10 <memset>

  htim8.Instance = TIM8;
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <MX_TIM8_Init+0xfc>)
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <MX_TIM8_Init+0x100>)
 8002124:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <MX_TIM8_Init+0xfc>)
 8002128:	22a7      	movs	r2, #167	; 0xa7
 800212a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <MX_TIM8_Init+0xfc>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <MX_TIM8_Init+0xfc>)
 8002134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002138:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <MX_TIM8_Init+0xfc>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <MX_TIM8_Init+0xfc>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <MX_TIM8_Init+0xfc>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800214c:	4827      	ldr	r0, [pc, #156]	; (80021ec <MX_TIM8_Init+0xfc>)
 800214e:	f002 ff26 	bl	8004f9e <HAL_TIM_PWM_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002158:	f7ff fb5a 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002168:	4619      	mov	r1, r3
 800216a:	4820      	ldr	r0, [pc, #128]	; (80021ec <MX_TIM8_Init+0xfc>)
 800216c:	f003 fd96 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002176:	f7ff fb4b 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217a:	2360      	movs	r3, #96	; 0x60
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	220c      	movs	r2, #12
 8002198:	4619      	mov	r1, r3
 800219a:	4814      	ldr	r0, [pc, #80]	; (80021ec <MX_TIM8_Init+0xfc>)
 800219c:	f003 f8c8 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 80021a6:	f7ff fb33 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4807      	ldr	r0, [pc, #28]	; (80021ec <MX_TIM8_Init+0xfc>)
 80021ce:	f003 fde1 	bl	8005d94 <HAL_TIMEx_ConfigBreakDeadTime>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80021d8:	f7ff fb1a 	bl	8001810 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <MX_TIM8_Init+0xfc>)
 80021de:	f000 f935 	bl	800244c <HAL_TIM_MspPostInit>

}
 80021e2:	bf00      	nop
 80021e4:	3748      	adds	r7, #72	; 0x48
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000354 	.word	0x20000354
 80021f0:	40010400 	.word	0x40010400

080021f4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <MX_TIM12_Init+0xd4>)
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <MX_TIM12_Init+0xd8>)
 800221e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <MX_TIM12_Init+0xd4>)
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <MX_TIM12_Init+0xd4>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <MX_TIM12_Init+0xd4>)
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <MX_TIM12_Init+0xd4>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <MX_TIM12_Init+0xd4>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002240:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_TIM12_Init+0xd4>)
 8002242:	f002 fe5d 	bl	8004f00 <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800224c:	f7ff fae0 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	4619      	mov	r1, r3
 800225c:	481a      	ldr	r0, [pc, #104]	; (80022c8 <MX_TIM12_Init+0xd4>)
 800225e:	f003 f92d 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002268:	f7ff fad2 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800226c:	4816      	ldr	r0, [pc, #88]	; (80022c8 <MX_TIM12_Init+0xd4>)
 800226e:	f002 fe96 	bl	8004f9e <HAL_TIM_PWM_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002278:	f7ff faca 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_TIM12_Init+0xd4>)
 8002294:	f003 f84c 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800229e:	f7ff fab7 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2204      	movs	r2, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MX_TIM12_Init+0xd4>)
 80022aa:	f003 f841 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80022b4:	f7ff faac 	bl	8001810 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <MX_TIM12_Init+0xd4>)
 80022ba:	f000 f8c7 	bl	800244c <HAL_TIM_MspPostInit>

}
 80022be:	bf00      	nop
 80022c0:	3730      	adds	r7, #48	; 0x30
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000494 	.word	0x20000494
 80022cc:	40001800 	.word	0x40001800

080022d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_TIM_Base_MspInit+0x120>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80022fe:	e072      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
}
 8002326:	e05e      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_TIM_Base_MspInit+0x128>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
}
 800234e:	e04a      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM6)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_Base_MspInit+0x12c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d116      	bne.n	8002388 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2101      	movs	r1, #1
 800237a:	2036      	movs	r0, #54	; 0x36
 800237c:	f001 fc11 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002380:	2036      	movs	r0, #54	; 0x36
 8002382:	f001 fc2a 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002386:	e02e      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_TIM_Base_MspInit+0x130>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d116      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2037      	movs	r0, #55	; 0x37
 80023b4:	f001 fbf5 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023b8:	2037      	movs	r0, #55	; 0x37
 80023ba:	f001 fc0e 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 80023be:	e012      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM12)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_TIM_Base_MspInit+0x134>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10d      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80023d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_TIM_Base_MspInit+0x124>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
}
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40001000 	.word	0x40001000
 8002400:	40001400 	.word	0x40001400
 8002404:	40001800 	.word	0x40001800

08002408 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_TIM_PWM_MspInit+0x3c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10d      	bne.n	8002436 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010400 	.word	0x40010400
 8002448:	40023800 	.word	0x40023800

0800244c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a49      	ldr	r2, [pc, #292]	; (8002590 <HAL_TIM_MspPostInit+0x144>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11f      	bne.n	80024ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO5_Pin;
 800248a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800249c:	2301      	movs	r3, #1
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO5_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	483c      	ldr	r0, [pc, #240]	; (8002598 <HAL_TIM_MspPostInit+0x14c>)
 80024a8:	f001 febc 	bl	8004224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80024ac:	e06c      	b.n	8002588 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_TIM_MspPostInit+0x150>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d11e      	bne.n	80024f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin|SERVO1_Pin;
 80024d4:	2303      	movs	r3, #3
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024e4:	2302      	movs	r3, #2
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	482c      	ldr	r0, [pc, #176]	; (80025a0 <HAL_TIM_MspPostInit+0x154>)
 80024f0:	f001 fe98 	bl	8004224 <HAL_GPIO_Init>
}
 80024f4:	e048      	b.n	8002588 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_TIM_MspPostInit+0x158>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d11f      	bne.n	8002540 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6313      	str	r3, [r2, #48]	; 0x30
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO4_Pin;
 800251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800252e:	2303      	movs	r3, #3
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	481b      	ldr	r0, [pc, #108]	; (80025a8 <HAL_TIM_MspPostInit+0x15c>)
 800253a:	f001 fe73 	bl	8004224 <HAL_GPIO_Init>
}
 800253e:	e023      	b.n	8002588 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_TIM_MspPostInit+0x160>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11e      	bne.n	8002588 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_TIM_MspPostInit+0x148>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_Pin|SERVO3_Pin;
 8002566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002578:	2309      	movs	r3, #9
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <HAL_TIM_MspPostInit+0x154>)
 8002584:	f001 fe4e 	bl	8004224 <HAL_GPIO_Init>
}
 8002588:	bf00      	nop
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40010000 	.word	0x40010000
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40001800 	.word	0x40001800

080025b0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_UART4_Init+0x4c>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_UART4_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_UART4_Init+0x4c>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_UART4_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_UART4_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_UART4_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_UART4_Init+0x4c>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_UART4_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_UART4_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_UART4_Init+0x4c>)
 80025e8:	f003 fc3a 	bl	8005e60 <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80025f2:	f7ff f90d 	bl	8001810 <Error_Handler>
  }

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000674 	.word	0x20000674
 8002600:	40004c00 	.word	0x40004c00

08002604 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_UART5_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_UART5_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_UART5_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_UART5_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_UART5_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_UART5_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_UART5_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_UART5_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_UART5_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_UART5_Init+0x4c>)
 800263c:	f003 fc10 	bl	8005e60 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002646:	f7ff f8e3 	bl	8001810 <Error_Handler>
  }

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200005b4 	.word	0x200005b4
 8002654:	40005000 	.word	0x40005000

08002658 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <MX_USART1_UART_Init+0x50>)
 8002660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_USART1_UART_Init+0x4c>)
 8002690:	f003 fbe6 	bl	8005e60 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800269a:	f7ff f8b9 	bl	8001810 <Error_Handler>
  }

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200005f4 	.word	0x200005f4
 80026a8:	40011000 	.word	0x40011000

080026ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_USART2_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026e4:	f003 fbbc 	bl	8005e60 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ee:	f7ff f88f 	bl	8001810 <Error_Handler>
  }

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200006b4 	.word	0x200006b4
 80026fc:	40004400 	.word	0x40004400

08002700 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_USART3_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002738:	f003 fb92 	bl	8005e60 <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f7ff f865 	bl	8001810 <Error_Handler>
  }

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000574 	.word	0x20000574
 8002750:	40004800 	.word	0x40004800

08002754 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <MX_USART6_UART_Init+0x50>)
 800275c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 8002760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002764:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_USART6_UART_Init+0x4c>)
 800278c:	f003 fb68 	bl	8005e60 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002796:	f7ff f83b 	bl	8001810 <Error_Handler>
  }

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000634 	.word	0x20000634
 80027a4:	40011400 	.word	0x40011400

080027a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b094      	sub	sp, #80	; 0x50
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a90      	ldr	r2, [pc, #576]	; (8002a08 <HAL_UART_MspInit+0x260>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f040 808b 	bne.w	80028e2 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	4b8e      	ldr	r3, [pc, #568]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a8d      	ldr	r2, [pc, #564]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
 80027dc:	4b8b      	ldr	r3, [pc, #556]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
 80027ec:	4b87      	ldr	r3, [pc, #540]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4a86      	ldr	r2, [pc, #536]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30
 80027f8:	4b84      	ldr	r3, [pc, #528]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002804:	2303      	movs	r3, #3
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280c:	2301      	movs	r3, #1
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002814:	2308      	movs	r3, #8
 8002816:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800281c:	4619      	mov	r1, r3
 800281e:	487c      	ldr	r0, [pc, #496]	; (8002a10 <HAL_UART_MspInit+0x268>)
 8002820:	f001 fd00 	bl	8004224 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002824:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002826:	4a7c      	ldr	r2, [pc, #496]	; (8002a18 <HAL_UART_MspInit+0x270>)
 8002828:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800282a:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800282c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002830:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002832:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b75      	ldr	r3, [pc, #468]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002844:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284c:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002858:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800285a:	4b6e      	ldr	r3, [pc, #440]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800285c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002860:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002868:	486a      	ldr	r0, [pc, #424]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800286a:	f001 f9d1 	bl	8003c10 <HAL_DMA_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002874:	f7fe ffcc 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a66      	ldr	r2, [pc, #408]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
 800287e:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_UART_MspInit+0x26c>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002884:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_UART_MspInit+0x274>)
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_UART_MspInit+0x278>)
 8002888:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_UART_MspInit+0x274>)
 800288c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002890:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_UART_MspInit+0x274>)
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <HAL_UART_MspInit+0x274>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80028b2:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80028c4:	4855      	ldr	r0, [pc, #340]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028c6:	f001 f9a3 	bl	8003c10 <HAL_DMA_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80028d0:	f7fe ff9e 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a51      	ldr	r2, [pc, #324]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
 80028da:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_UART_MspInit+0x274>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80028e0:	e158      	b.n	8002b94 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==UART5)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4f      	ldr	r2, [pc, #316]	; (8002a24 <HAL_UART_MspInit+0x27c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d153      	bne.n	8002994 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART5_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
 80028f0:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a45      	ldr	r2, [pc, #276]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80028f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290c:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_UART_MspInit+0x264>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a3e      	ldr	r2, [pc, #248]	; (8002a0c <HAL_UART_MspInit+0x264>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_UART_MspInit+0x264>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_UART_MspInit+0x264>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a37      	ldr	r2, [pc, #220]	; (8002a0c <HAL_UART_MspInit+0x264>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_UART_MspInit+0x264>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294a:	2301      	movs	r3, #1
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002952:	2308      	movs	r3, #8
 8002954:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295a:	4619      	mov	r1, r3
 800295c:	4832      	ldr	r0, [pc, #200]	; (8002a28 <HAL_UART_MspInit+0x280>)
 800295e:	f001 fc61 	bl	8004224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002962:	2304      	movs	r3, #4
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002972:	2308      	movs	r3, #8
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800297a:	4619      	mov	r1, r3
 800297c:	482b      	ldr	r0, [pc, #172]	; (8002a2c <HAL_UART_MspInit+0x284>)
 800297e:	f001 fc51 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2035      	movs	r0, #53	; 0x35
 8002988:	f001 f90b 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800298c:	2035      	movs	r0, #53	; 0x35
 800298e:	f001 f924 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002992:	e0ff      	b.n	8002b94 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <HAL_UART_MspInit+0x288>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d14c      	bne.n	8002a38 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029a8:	f043 0310 	orr.w	r3, r3, #16
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_UART_MspInit+0x264>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029d6:	23c0      	movs	r3, #192	; 0xc0
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029e6:	2307      	movs	r3, #7
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4810      	ldr	r0, [pc, #64]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 80029f2:	f001 fc17 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2025      	movs	r0, #37	; 0x25
 80029fc:	f001 f8d1 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a00:	2025      	movs	r0, #37	; 0x25
 8002a02:	f001 f8ea 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002a06:	e0c5      	b.n	8002b94 <HAL_UART_MspInit+0x3ec>
 8002a08:	40004c00 	.word	0x40004c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	20000514 	.word	0x20000514
 8002a18:	40026040 	.word	0x40026040
 8002a1c:	200006f4 	.word	0x200006f4
 8002a20:	40026070 	.word	0x40026070
 8002a24:	40005000 	.word	0x40005000
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020c00 	.word	0x40020c00
 8002a30:	40011000 	.word	0x40011000
 8002a34:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_UART_MspInit+0x3f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d134      	bne.n	8002aac <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a92:	4619      	mov	r1, r3
 8002a94:	4843      	ldr	r0, [pc, #268]	; (8002ba4 <HAL_UART_MspInit+0x3fc>)
 8002a96:	f001 fbc5 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2026      	movs	r0, #38	; 0x26
 8002aa0:	f001 f87f 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aa4:	2026      	movs	r0, #38	; 0x26
 8002aa6:	f001 f898 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002aaa:	e073      	b.n	8002b94 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_UART_MspInit+0x400>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d135      	bne.n	8002b22 <HAL_UART_MspInit+0x37a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a38      	ldr	r2, [pc, #224]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b00:	2307      	movs	r3, #7
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <HAL_UART_MspInit+0x404>)
 8002b0c:	f001 fb8a 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	2027      	movs	r0, #39	; 0x27
 8002b16:	f001 f844 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b1a:	2027      	movs	r0, #39	; 0x27
 8002b1c:	f001 f85d 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002b20:	e038      	b.n	8002b94 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART6)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_UART_MspInit+0x408>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d133      	bne.n	8002b94 <HAL_UART_MspInit+0x3ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b36:	f043 0320 	orr.w	r3, r3, #32
 8002b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_UART_MspInit+0x3f8>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b64:	23c0      	movs	r3, #192	; 0xc0
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b74:	2308      	movs	r3, #8
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <HAL_UART_MspInit+0x40c>)
 8002b80:	f001 fb50 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2047      	movs	r0, #71	; 0x47
 8002b8a:	f001 f80a 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b8e:	2047      	movs	r0, #71	; 0x47
 8002b90:	f001 f823 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002b94:	bf00      	nop
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	40020800 	.word	0x40020800

08002bb8 <Reset_Handler>:
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopFillZerobss+0x14>
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	e003      	b.n	8002bc8 <LoopCopyDataInit>

08002bc0 <CopyDataInit>:
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <LoopFillZerobss+0x18>)
 8002bc2:	585b      	ldr	r3, [r3, r1]
 8002bc4:	5043      	str	r3, [r0, r1]
 8002bc6:	3104      	adds	r1, #4

08002bc8 <LoopCopyDataInit>:
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <LoopFillZerobss+0x1c>)
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <LoopFillZerobss+0x20>)
 8002bcc:	1842      	adds	r2, r0, r1
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d3f6      	bcc.n	8002bc0 <CopyDataInit>
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopFillZerobss+0x24>)
 8002bd4:	e002      	b.n	8002bdc <LoopFillZerobss>

08002bd6 <FillZerobss>:
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f842 3b04 	str.w	r3, [r2], #4

08002bdc <LoopFillZerobss>:
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <LoopFillZerobss+0x28>)
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3f9      	bcc.n	8002bd6 <FillZerobss>
 8002be2:	f7ff f895 	bl	8001d10 <SystemInit>
 8002be6:	f004 f86f 	bl	8006cc8 <__libc_init_array>
 8002bea:	f7fe fcb9 	bl	8001560 <main>
 8002bee:	4770      	bx	lr
 8002bf0:	20020000 	.word	0x20020000
 8002bf4:	080089e0 	.word	0x080089e0
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	200001dc 	.word	0x200001dc
 8002c00:	200001dc 	.word	0x200001dc
 8002c04:	2000075c 	.word	0x2000075c

08002c08 <ADC_IRQHandler>:
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 ffa9 	bl	8003b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7fe ff62 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 ffc1 	bl	8003bf6 <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 ff89 	bl	8003ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	20000754 	.word	0x20000754

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000754 	.word	0x20000754

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_Delay+0x40>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000008 	.word	0x20000008

08002d34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0ed      	b.n	8002f22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe f8c0 	bl	8000ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0202 	bic.w	r2, r2, #2
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d68:	f7ff ffb6 	bl	8002cd8 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6e:	e012      	b.n	8002d96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d70:	f7ff ffb2 	bl	8002cd8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d90b      	bls.n	8002d96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0c5      	b.n	8002f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db4:	f7ff ff90 	bl	8002cd8 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dba:	e012      	b.n	8002de2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dbc:	f7ff ff8c 	bl	8002cd8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b0a      	cmp	r3, #10
 8002dc8:	d90b      	bls.n	8002de2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2205      	movs	r2, #5
 8002dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09f      	b.n	8002f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0e5      	beq.n	8002dbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7e1b      	ldrb	r3, [r3, #24]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d108      	bne.n	8002e0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e007      	b.n	8002e1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7e5b      	ldrb	r3, [r3, #25]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e007      	b.n	8002e44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e9b      	ldrb	r3, [r3, #26]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0220 	bic.w	r2, r2, #32
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7edb      	ldrb	r3, [r3, #27]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d108      	bne.n	8002e88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0210 	bic.w	r2, r2, #16
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e007      	b.n	8002e98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0210 	orr.w	r2, r2, #16
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7f1b      	ldrb	r3, [r3, #28]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d108      	bne.n	8002eb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0208 	orr.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e007      	b.n	8002ec2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0208 	bic.w	r2, r2, #8
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7f5b      	ldrb	r3, [r3, #29]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0204 	orr.w	r2, r2, #4
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e007      	b.n	8002eec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	ea42 0103 	orr.w	r1, r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d003      	beq.n	8002f52 <HAL_CAN_ConfigFilter+0x26>
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	f040 80be 	bne.w	80030ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002f54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	431a      	orrs	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2201      	movs	r2, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d123      	bne.n	8002ffc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3248      	adds	r2, #72	; 0x48
 8002fdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ff0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	3348      	adds	r3, #72	; 0x48
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d122      	bne.n	800304a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	431a      	orrs	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003024:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3248      	adds	r2, #72	; 0x48
 800302a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800303e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	3348      	adds	r3, #72	; 0x48
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	401a      	ands	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003064:	e007      	b.n	8003076 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	431a      	orrs	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003090:	e007      	b.n	80030a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	431a      	orrs	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d107      	bne.n	80030ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030c0:	f023 0201 	bic.w	r2, r3, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e006      	b.n	80030dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
  }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40006400 	.word	0x40006400

080030ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d12e      	bne.n	800315e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003118:	f7ff fdde 	bl	8002cd8 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800311e:	e012      	b.n	8003146 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003120:	f7ff fdda 	bl	8002cd8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b0a      	cmp	r3, #10
 800312c:	d90b      	bls.n	8003146 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2205      	movs	r2, #5
 800313e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e012      	b.n	800316c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e006      	b.n	800316c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003188:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_AddTxMessage+0x2c>
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	2b02      	cmp	r3, #2
 800319c:	f040 80b8 	bne.w	8003310 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a0 	beq.w	8003300 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	0e1b      	lsrs	r3, r3, #24
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d907      	bls.n	80031e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e09e      	b.n	800331e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80031e0:	2201      	movs	r2, #1
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	409a      	lsls	r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	431a      	orrs	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3318      	adds	r3, #24
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	440b      	add	r3, r1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e00f      	b.n	800322e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003218:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003222:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3318      	adds	r3, #24
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3318      	adds	r3, #24
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	440b      	add	r3, r1
 800323e:	3304      	adds	r3, #4
 8003240:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	7d1b      	ldrb	r3, [r3, #20]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d111      	bne.n	800326e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3318      	adds	r3, #24
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6811      	ldr	r1, [r2, #0]
 800325e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3318      	adds	r3, #24
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	440b      	add	r3, r1
 800326a:	3304      	adds	r3, #4
 800326c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3307      	adds	r3, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	061a      	lsls	r2, r3, #24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3306      	adds	r3, #6
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3305      	adds	r3, #5
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	4313      	orrs	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	3204      	adds	r2, #4
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	4610      	mov	r0, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	ea43 0200 	orr.w	r2, r3, r0
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	440b      	add	r3, r1
 80032a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80032a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3303      	adds	r3, #3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	061a      	lsls	r2, r3, #24
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3302      	adds	r3, #2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3301      	adds	r3, #1
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	4313      	orrs	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	4610      	mov	r0, r2
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	ea43 0200 	orr.w	r2, r3, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80032da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3318      	adds	r3, #24
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	4413      	add	r3, r2
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	6811      	ldr	r1, [r2, #0]
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3318      	adds	r3, #24
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	440b      	add	r3, r1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e00e      	b.n	800331e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e006      	b.n	800331e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d003      	beq.n	800334e <HAL_CAN_GetRxMessage+0x24>
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	2b02      	cmp	r3, #2
 800334a:	f040 80f3 	bne.w	8003534 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10e      	bne.n	8003372 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0e7      	b.n	8003542 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d8      	b.n	8003542 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	331b      	adds	r3, #27
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0204 	and.w	r2, r3, #4
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	331b      	adds	r3, #27
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	4413      	add	r3, r2
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	331b      	adds	r3, #27
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	331b      	adds	r3, #27
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	4413      	add	r3, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0202 	and.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	331b      	adds	r3, #27
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	331b      	adds	r3, #27
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	b2da      	uxtb	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	331b      	adds	r3, #27
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0a1a      	lsrs	r2, r3, #8
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4413      	add	r3, r2
 8003478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	0c1a      	lsrs	r2, r3, #16
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	3302      	adds	r3, #2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e1a      	lsrs	r2, r3, #24
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3303      	adds	r3, #3
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	0a1a      	lsrs	r2, r3, #8
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3305      	adds	r3, #5
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0c1a      	lsrs	r2, r3, #16
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3306      	adds	r3, #6
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0e1a      	lsrs	r2, r3, #24
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3307      	adds	r3, #7
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0220 	orr.w	r2, r2, #32
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e007      	b.n	8003530 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e006      	b.n	8003542 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800355e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d002      	beq.n	800356c <HAL_CAN_ActivateNotification+0x1e>
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d109      	bne.n	8003580 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6959      	ldr	r1, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e006      	b.n	800358e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08a      	sub	sp, #40	; 0x28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d07c      	beq.n	80036da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d023      	beq.n	8003632 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f97d 	bl	80038fc <HAL_CAN_TxMailbox0CompleteCallback>
 8003602:	e016      	b.n	8003632 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e00c      	b.n	8003632 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e002      	b.n	8003632 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f983 	bl	8003938 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d024      	beq.n	8003686 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f95d 	bl	8003910 <HAL_CAN_TxMailbox1CompleteCallback>
 8003656:	e016      	b.n	8003686 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	e00c      	b.n	8003686 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	e002      	b.n	8003686 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f963 	bl	800394c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d024      	beq.n	80036da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003698:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f93d 	bl	8003924 <HAL_CAN_TxMailbox2CompleteCallback>
 80036aa:	e016      	b.n	80036da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e00c      	b.n	80036da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e002      	b.n	80036da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f943 	bl	8003960 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2210      	movs	r2, #16
 80036fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2208      	movs	r2, #8
 8003718:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f92a 	bl	8003974 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fe5d 	bl	80013f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2208      	movs	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f90c 	bl	800399c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8f3 	bl	8003988 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8f6 	bl	80039b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2208      	movs	r2, #8
 80037de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8ef 	bl	80039c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d075      	beq.n	80038dc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d06c      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03d      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800385e:	2b00      	cmp	r3, #0
 8003860:	d038      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d017      	beq.n	800389c <HAL_CAN_IRQHandler+0x302>
 800386c:	2b30      	cmp	r3, #48	; 0x30
 800386e:	d804      	bhi.n	800387a <HAL_CAN_IRQHandler+0x2e0>
 8003870:	2b10      	cmp	r3, #16
 8003872:	d009      	beq.n	8003888 <HAL_CAN_IRQHandler+0x2ee>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d00c      	beq.n	8003892 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003878:	e024      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800387a:	2b50      	cmp	r3, #80	; 0x50
 800387c:	d018      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x316>
 800387e:	2b60      	cmp	r3, #96	; 0x60
 8003880:	d01b      	beq.n	80038ba <HAL_CAN_IRQHandler+0x320>
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d00f      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003886:	e01d      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003890:	e018      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800389a:	e013      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038a4:	e00e      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ae:	e009      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038b8:	e004      	b.n	80038c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2204      	movs	r2, #4
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f872 	bl	80039d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038f4:	bf00      	nop
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60d3      	str	r3, [r2, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <__NVIC_GetPriorityGrouping+0x18>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 0307 	and.w	r3, r3, #7
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db0b      	blt.n	8003a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <__NVIC_EnableIRQ+0x38>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2001      	movs	r0, #1
 8003a72:	fa00 f202 	lsl.w	r2, r0, r2
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000e100 	.word	0xe000e100

08003a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	db0a      	blt.n	8003ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	490c      	ldr	r1, [pc, #48]	; (8003ad8 <__NVIC_SetPriority+0x4c>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	440b      	add	r3, r1
 8003ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab4:	e00a      	b.n	8003acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4908      	ldr	r1, [pc, #32]	; (8003adc <__NVIC_SetPriority+0x50>)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	3b04      	subs	r3, #4
 8003ac4:	0112      	lsls	r2, r2, #4
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	440b      	add	r3, r1
 8003aca:	761a      	strb	r2, [r3, #24]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000e100 	.word	0xe000e100
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b089      	sub	sp, #36	; 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f1c3 0307 	rsb	r3, r3, #7
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	bf28      	it	cs
 8003afe:	2304      	movcs	r3, #4
 8003b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d902      	bls.n	8003b10 <NVIC_EncodePriority+0x30>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3b03      	subs	r3, #3
 8003b0e:	e000      	b.n	8003b12 <NVIC_EncodePriority+0x32>
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	401a      	ands	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b28:	f04f 31ff 	mov.w	r1, #4294967295
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	43d9      	mvns	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	4313      	orrs	r3, r2
         );
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	; 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b58:	d301      	bcc.n	8003b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00f      	b.n	8003b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <SysTick_Config+0x40>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b66:	210f      	movs	r1, #15
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	f7ff ff8e 	bl	8003a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <SysTick_Config+0x40>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b76:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <SysTick_Config+0x40>)
 8003b78:	2207      	movs	r2, #7
 8003b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	e000e010 	.word	0xe000e010

08003b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff29 	bl	80039ec <__NVIC_SetPriorityGrouping>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb4:	f7ff ff3e 	bl	8003a34 <__NVIC_GetPriorityGrouping>
 8003bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f7ff ff8e 	bl	8003ae0 <NVIC_EncodePriority>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff5d 	bl	8003a8c <__NVIC_SetPriority>
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff31 	bl	8003a50 <__NVIC_EnableIRQ>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ffa2 	bl	8003b48 <SysTick_Config>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c1c:	f7ff f85c 	bl	8002cd8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e099      	b.n	8003d60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4c:	e00f      	b.n	8003c6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c4e:	f7ff f843 	bl	8002cd8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d908      	bls.n	8003c6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2203      	movs	r2, #3
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e078      	b.n	8003d60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e8      	bne.n	8003c4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_DMA_Init+0x158>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d107      	bne.n	8003cd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d117      	bne.n	8003d32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa0b 	bl	8004130 <DMA_CheckFifoParam>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2240      	movs	r2, #64	; 0x40
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e016      	b.n	8003d60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9c2 	bl	80040c4 <DMA_CalcBaseAndBitshift>
 8003d40:	4603      	mov	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	223f      	movs	r2, #63	; 0x3f
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	f010803f 	.word	0xf010803f

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00c      	b.n	8003da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dbc:	4b92      	ldr	r3, [pc, #584]	; (8004008 <HAL_DMA_IRQHandler+0x258>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a92      	ldr	r2, [pc, #584]	; (800400c <HAL_DMA_IRQHandler+0x25c>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01a      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	2208      	movs	r2, #8
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2204      	movs	r2, #4
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2204      	movs	r2, #4
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d043      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03c      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2210      	movs	r2, #16
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d024      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e01f      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e016      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0208 	bic.w	r2, r2, #8
 8003f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	2220      	movs	r2, #32
 8003f26:	409a      	lsls	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808e 	beq.w	800404e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8086 	beq.w	800404e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	2220      	movs	r2, #32
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d136      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0216 	bic.w	r2, r2, #22
 8003f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x1da>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0208 	bic.w	r2, r2, #8
 8003f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	223f      	movs	r2, #63	; 0x3f
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d07d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
        }
        return;
 8003fc6:	e078      	b.n	80040ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01c      	beq.n	8004010 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d030      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e02b      	b.n	800404e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d027      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	e022      	b.n	800404e <HAL_DMA_IRQHandler+0x29e>
 8004008:	20000000 	.word	0x20000000
 800400c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0210 	bic.w	r2, r2, #16
 800402c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	2b00      	cmp	r3, #0
 8004054:	d032      	beq.n	80040bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d022      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2205      	movs	r2, #5
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	429a      	cmp	r2, r3
 8004084:	d307      	bcc.n	8004096 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_DMA_IRQHandler+0x2ca>
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004096:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
 80040b8:	e000      	b.n	80040bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80040ba:	bf00      	nop
    }
  }
}
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	3b10      	subs	r3, #16
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <DMA_CalcBaseAndBitshift+0x64>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <DMA_CalcBaseAndBitshift+0x68>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d909      	bls.n	8004106 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	659a      	str	r2, [r3, #88]	; 0x58
 8004104:	e007      	b.n	8004116 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	aaaaaaab 	.word	0xaaaaaaab
 800412c:	080087a0 	.word	0x080087a0

08004130 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11f      	bne.n	800418a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d855      	bhi.n	80041fc <DMA_CheckFifoParam+0xcc>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <DMA_CheckFifoParam+0x28>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	08004169 	.word	0x08004169
 800415c:	0800417b 	.word	0x0800417b
 8004160:	08004169 	.word	0x08004169
 8004164:	080041fd 	.word	0x080041fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d045      	beq.n	8004200 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e042      	b.n	8004200 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004182:	d13f      	bne.n	8004204 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004188:	e03c      	b.n	8004204 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004192:	d121      	bne.n	80041d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d836      	bhi.n	8004208 <DMA_CheckFifoParam+0xd8>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <DMA_CheckFifoParam+0x70>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041b7 	.word	0x080041b7
 80041a8:	080041b1 	.word	0x080041b1
 80041ac:	080041c9 	.word	0x080041c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e02f      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d024      	beq.n	800420c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c6:	e021      	b.n	800420c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041d0:	d11e      	bne.n	8004210 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041d6:	e01b      	b.n	8004210 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <DMA_CheckFifoParam+0xb4>
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d003      	beq.n	80041ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041e2:	e018      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e015      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      break;
 80041fa:	e00b      	b.n	8004214 <DMA_CheckFifoParam+0xe4>
      break;
 80041fc:	bf00      	nop
 80041fe:	e00a      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;
 8004200:	bf00      	nop
 8004202:	e008      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;
 8004204:	bf00      	nop
 8004206:	e006      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;
 8004208:	bf00      	nop
 800420a:	e004      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;   
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
      break;
 8004214:	bf00      	nop
    }
  } 
  
  return status; 
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004236:	2300      	movs	r3, #0
 8004238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	e16b      	b.n	8004518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004240:	2201      	movs	r2, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	429a      	cmp	r2, r3
 800425a:	f040 815a 	bne.w	8004512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d00b      	beq.n	800427e <HAL_GPIO_Init+0x5a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004272:	2b11      	cmp	r3, #17
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b12      	cmp	r3, #18
 800427c:	d130      	bne.n	80042e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b4:	2201      	movs	r2, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0201 	and.w	r2, r3, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0xfc>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b12      	cmp	r3, #18
 800431e:	d123      	bne.n	8004368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	08da      	lsrs	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3208      	adds	r2, #8
 8004328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	220f      	movs	r2, #15
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	08da      	lsrs	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3208      	adds	r2, #8
 8004362:	69b9      	ldr	r1, [r7, #24]
 8004364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	2203      	movs	r2, #3
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0203 	and.w	r2, r3, #3
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80b4 	beq.w	8004512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_GPIO_Init+0x308>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	4a5e      	ldr	r2, [pc, #376]	; (800452c <HAL_GPIO_Init+0x308>)
 80043b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_GPIO_Init+0x308>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c6:	4a5a      	ldr	r2, [pc, #360]	; (8004530 <HAL_GPIO_Init+0x30c>)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	3302      	adds	r3, #2
 80043ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	220f      	movs	r2, #15
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_GPIO_Init+0x310>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02b      	beq.n	800444a <HAL_GPIO_Init+0x226>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_GPIO_Init+0x314>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d025      	beq.n	8004446 <HAL_GPIO_Init+0x222>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4f      	ldr	r2, [pc, #316]	; (800453c <HAL_GPIO_Init+0x318>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01f      	beq.n	8004442 <HAL_GPIO_Init+0x21e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <HAL_GPIO_Init+0x31c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d019      	beq.n	800443e <HAL_GPIO_Init+0x21a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4d      	ldr	r2, [pc, #308]	; (8004544 <HAL_GPIO_Init+0x320>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_GPIO_Init+0x216>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4c      	ldr	r2, [pc, #304]	; (8004548 <HAL_GPIO_Init+0x324>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00d      	beq.n	8004436 <HAL_GPIO_Init+0x212>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_GPIO_Init+0x328>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x20e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <HAL_GPIO_Init+0x32c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_GPIO_Init+0x20a>
 800442a:	2307      	movs	r3, #7
 800442c:	e00e      	b.n	800444c <HAL_GPIO_Init+0x228>
 800442e:	2308      	movs	r3, #8
 8004430:	e00c      	b.n	800444c <HAL_GPIO_Init+0x228>
 8004432:	2306      	movs	r3, #6
 8004434:	e00a      	b.n	800444c <HAL_GPIO_Init+0x228>
 8004436:	2305      	movs	r3, #5
 8004438:	e008      	b.n	800444c <HAL_GPIO_Init+0x228>
 800443a:	2304      	movs	r3, #4
 800443c:	e006      	b.n	800444c <HAL_GPIO_Init+0x228>
 800443e:	2303      	movs	r3, #3
 8004440:	e004      	b.n	800444c <HAL_GPIO_Init+0x228>
 8004442:	2302      	movs	r3, #2
 8004444:	e002      	b.n	800444c <HAL_GPIO_Init+0x228>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_GPIO_Init+0x228>
 800444a:	2300      	movs	r3, #0
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	f002 0203 	and.w	r2, r2, #3
 8004452:	0092      	lsls	r2, r2, #2
 8004454:	4093      	lsls	r3, r2
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800445c:	4934      	ldr	r1, [pc, #208]	; (8004530 <HAL_GPIO_Init+0x30c>)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	3302      	adds	r3, #2
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_GPIO_Init+0x330>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800448e:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_GPIO_Init+0x330>)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004494:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <HAL_GPIO_Init+0x330>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_GPIO_Init+0x330>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_GPIO_Init+0x330>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_GPIO_Init+0x330>)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_GPIO_Init+0x330>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_GPIO_Init+0x330>)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3301      	adds	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b0f      	cmp	r3, #15
 800451c:	f67f ae90 	bls.w	8004240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004520:	bf00      	nop
 8004522:	3724      	adds	r7, #36	; 0x24
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004568:	787b      	ldrb	r3, [r7, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004574:	e003      	b.n	800457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	401a      	ands	r2, r3
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d104      	bne.n	80045ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	041a      	lsls	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80045ac:	e002      	b.n	80045b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	619a      	str	r2, [r3, #24]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e25b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d075      	beq.n	80046ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045de:	4ba3      	ldr	r3, [pc, #652]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d00c      	beq.n	8004604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4ba0      	ldr	r3, [pc, #640]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d112      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045f6:	4b9d      	ldr	r3, [pc, #628]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004602:	d10b      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	4b99      	ldr	r3, [pc, #612]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05b      	beq.n	80046c8 <HAL_RCC_OscConfig+0x108>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d157      	bne.n	80046c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e236      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x74>
 8004626:	4b91      	ldr	r3, [pc, #580]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a90      	ldr	r2, [pc, #576]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e01d      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x98>
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a8a      	ldr	r2, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a87      	ldr	r2, [pc, #540]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004658:	4b84      	ldr	r3, [pc, #528]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a83      	ldr	r2, [pc, #524]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b81      	ldr	r3, [pc, #516]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a80      	ldr	r2, [pc, #512]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fe fb2e 	bl	8002cd8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fb2a 	bl	8002cd8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1fb      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b76      	ldr	r3, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0xc0>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe fb1a 	bl	8002cd8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe fb16 	bl	8002cd8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1e7      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0xe8>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d063      	beq.n	800479e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046d6:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	4b5f      	ldr	r3, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4b5c      	ldr	r3, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1bb      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4952      	ldr	r1, [pc, #328]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	e03a      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d020      	beq.n	8004772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004730:	4b4f      	ldr	r3, [pc, #316]	; (8004870 <HAL_RCC_OscConfig+0x2b0>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fe facf 	bl	8002cd8 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473e:	f7fe facb 	bl	8002cd8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e19c      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4940      	ldr	r1, [pc, #256]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_OscConfig+0x2b0>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe faae 	bl	8002cd8 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004780:	f7fe faaa 	bl	8002cd8 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e17b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d030      	beq.n	800480c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <HAL_RCC_OscConfig+0x2b4>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fe fa8e 	bl	8002cd8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fe fa8a 	bl	8002cd8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e15b      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x200>
 80047de:	e015      	b.n	800480c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e0:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCC_OscConfig+0x2b4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fa77 	bl	8002cd8 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ee:	f7fe fa73 	bl	8002cd8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e144      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a0 	beq.w	800495a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d121      	bne.n	800489a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_RCC_OscConfig+0x2b8>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7fe fa39 	bl	8002cd8 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e011      	b.n	800488e <HAL_RCC_OscConfig+0x2ce>
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	42470000 	.word	0x42470000
 8004874:	42470e80 	.word	0x42470e80
 8004878:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fe fa2c 	bl	8002cd8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0fd      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x4d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2f0>
 80048a2:	4b7d      	ldr	r3, [pc, #500]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4a7c      	ldr	r2, [pc, #496]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6713      	str	r3, [r2, #112]	; 0x70
 80048ae:	e01c      	b.n	80048ea <HAL_RCC_OscConfig+0x32a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x312>
 80048b8:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a76      	ldr	r2, [pc, #472]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
 80048c4:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0x32a>
 80048d2:	4b71      	ldr	r3, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a70      	ldr	r2, [pc, #448]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	4b6e      	ldr	r3, [pc, #440]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a6d      	ldr	r2, [pc, #436]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d015      	beq.n	800491e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fe f9f1 	bl	8002cd8 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fe f9ed 	bl	8002cd8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0bc      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ee      	beq.n	80048fa <HAL_RCC_OscConfig+0x33a>
 800491c:	e014      	b.n	8004948 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fe f9db 	bl	8002cd8 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fe f9d7 	bl	8002cd8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0a6      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ee      	bne.n	8004926 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b52      	ldr	r3, [pc, #328]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a51      	ldr	r2, [pc, #324]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8092 	beq.w	8004a88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004964:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d05c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d141      	bne.n	80049fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fe f9ab 	bl	8002cd8 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7fe f9a7 	bl	8002cd8 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e078      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	019b      	lsls	r3, r3, #6
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	061b      	lsls	r3, r3, #24
 80049c8:	4933      	ldr	r1, [pc, #204]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe f980 	bl	8002cd8 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fe f97c 	bl	8002cd8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04d      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x41c>
 80049fa:	e045      	b.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fe f969 	bl	8002cd8 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fe f965 	bl	8002cd8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e036      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x44a>
 8004a28:	e02e      	b.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e029      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a36:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_RCC_OscConfig+0x4d8>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d115      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40007000 	.word	0x40007000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	42470060 	.word	0x42470060

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fe f8a2 	bl	8002cd8 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fe f89e 	bl	8002cd8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5cd3      	ldrb	r3, [r2, r3]
 8004c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe f802 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08008788 	.word	0x08008788
 8004c64:	20000000 	.word	0x20000000
 8004c68:	20000004 	.word	0x20000004

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c82:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d007      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0x32>
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x38>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 808d 	bne.w	8004db2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c9a:	60bb      	str	r3, [r7, #8]
       break;
 8004c9c:	e08c      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9e:	4b4b      	ldr	r3, [pc, #300]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ca0:	60bb      	str	r3, [r7, #8]
      break;
 8004ca2:	e089      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca4:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cae:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d023      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cba:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	ea03 0501 	and.w	r5, r3, r1
 8004cd0:	ea04 0602 	and.w	r6, r4, r2
 8004cd4:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004cd6:	fb02 f106 	mul.w	r1, r2, r6
 8004cda:	2200      	movs	r2, #0
 8004cdc:	fb02 f205 	mul.w	r2, r2, r5
 8004ce0:	440a      	add	r2, r1
 8004ce2:	493a      	ldr	r1, [pc, #232]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ce4:	fba5 0101 	umull	r0, r1, r5, r1
 8004ce8:	1853      	adds	r3, r2, r1
 8004cea:	4619      	mov	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f04f 0400 	mov.w	r4, #0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	f7fb ff03 	bl	8000b00 <__aeabi_uldivmod>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e049      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	f04f 0400 	mov.w	r4, #0
 8004d0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	ea03 0501 	and.w	r5, r3, r1
 8004d18:	ea04 0602 	and.w	r6, r4, r2
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4632      	mov	r2, r6
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	f04f 0400 	mov.w	r4, #0
 8004d28:	0154      	lsls	r4, r2, #5
 8004d2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d2e:	014b      	lsls	r3, r1, #5
 8004d30:	4619      	mov	r1, r3
 8004d32:	4622      	mov	r2, r4
 8004d34:	1b49      	subs	r1, r1, r5
 8004d36:	eb62 0206 	sbc.w	r2, r2, r6
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f04f 0400 	mov.w	r4, #0
 8004d42:	0194      	lsls	r4, r2, #6
 8004d44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d48:	018b      	lsls	r3, r1, #6
 8004d4a:	1a5b      	subs	r3, r3, r1
 8004d4c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	00e2      	lsls	r2, r4, #3
 8004d5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d5e:	00d9      	lsls	r1, r3, #3
 8004d60:	460b      	mov	r3, r1
 8004d62:	4614      	mov	r4, r2
 8004d64:	195b      	adds	r3, r3, r5
 8004d66:	eb44 0406 	adc.w	r4, r4, r6
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	02a2      	lsls	r2, r4, #10
 8004d74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d78:	0299      	lsls	r1, r3, #10
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	4621      	mov	r1, r4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	f7fb feb8 	bl	8000b00 <__aeabi_uldivmod>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	3301      	adds	r3, #1
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	60bb      	str	r3, [r7, #8]
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004db4:	60bb      	str	r3, [r7, #8]
      break;
 8004db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db8:	68bb      	ldr	r3, [r7, #8]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	00b71b00 	.word	0x00b71b00

08004dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000000 	.word	0x20000000

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dec:	f7ff fff0 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004df0:	4601      	mov	r1, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0a9b      	lsrs	r3, r3, #10
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4a03      	ldr	r2, [pc, #12]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfe:	5cd3      	ldrb	r3, [r2, r3]
 8004e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	08008798 	.word	0x08008798

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e14:	f7ff ffdc 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0b5b      	lsrs	r3, r3, #13
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e26:	5cd3      	ldrb	r3, [r2, r3]
 8004e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	08008798 	.word	0x08008798

08004e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e056      	b.n	8004ef8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fc fdd1 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	ea42 0103 	orr.w	r1, r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 0104 	and.w	r1, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e01d      	b.n	8004f4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd f9d2 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f000 fb9c 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e01d      	b.n	8004fec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fd fa1f 	bl	8002408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 fb4d 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fe22 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIM_PWM_Start+0x74>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_PWM_Start+0x2c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a14      	ldr	r2, [pc, #80]	; (800506c <HAL_TIM_PWM_Start+0x78>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_TIM_PWM_Start+0x30>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_TIM_PWM_Start+0x32>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d007      	beq.n	800505c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fde4 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <HAL_TIM_PWM_Stop+0xa8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_PWM_Stop+0x2c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <HAL_TIM_PWM_Stop+0xac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_TIM_PWM_Stop+0x30>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_TIM_PWM_Stop+0x32>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	f240 4344 	movw	r3, #1092	; 0x444
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_PWM_Stop+0x66>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_TIM_PWM_Stop+0x96>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	f240 4344 	movw	r3, #1092	; 0x444
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_PWM_Stop+0x96>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400

08005120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0202 	mvn.w	r2, #2
 800514c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa6b 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fa5d 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fa6e 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b04      	cmp	r3, #4
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0204 	mvn.w	r2, #4
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa41 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa33 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa44 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0208 	mvn.w	r2, #8
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2204      	movs	r2, #4
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa17 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa09 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa1a 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d122      	bne.n	8005278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b10      	cmp	r3, #16
 800523e:	d11b      	bne.n	8005278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0210 	mvn.w	r2, #16
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2208      	movs	r2, #8
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9ed 	bl	800563e <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9df 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9f0 	bl	8005652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10e      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0201 	mvn.w	r2, #1
 800529c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fb ffc8 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b80      	cmp	r3, #128	; 0x80
 80052b0:	d10e      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d107      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fdbe 	bl	8005e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9b5 	bl	8005666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0220 	mvn.w	r2, #32
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fd88 	bl	8005e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005346:	2302      	movs	r3, #2
 8005348:	e0b4      	b.n	80054b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	f200 809f 	bhi.w	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080054a1 	.word	0x080054a1
 8005370:	080054a1 	.word	0x080054a1
 8005374:	080054a1 	.word	0x080054a1
 8005378:	080053dd 	.word	0x080053dd
 800537c:	080054a1 	.word	0x080054a1
 8005380:	080054a1 	.word	0x080054a1
 8005384:	080054a1 	.word	0x080054a1
 8005388:	0800541f 	.word	0x0800541f
 800538c:	080054a1 	.word	0x080054a1
 8005390:	080054a1 	.word	0x080054a1
 8005394:	080054a1 	.word	0x080054a1
 8005398:	0800545f 	.word	0x0800545f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa0a 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	619a      	str	r2, [r3, #24]
      break;
 80053da:	e062      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa5a 	bl	800589c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	619a      	str	r2, [r3, #24]
      break;
 800541c:	e041      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 faaf 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0208 	orr.w	r2, r2, #8
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0204 	bic.w	r2, r2, #4
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      break;
 800545c:	e021      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb03 	bl	8005a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80054a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_ConfigClockSource+0x18>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0a6      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d067      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0x120>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d80b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x6c>
 8005510:	2b10      	cmp	r3, #16
 8005512:	d073      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d802      	bhi.n	800551e <HAL_TIM_ConfigClockSource+0x62>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d06f      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800551c:	e078      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800551e:	2b20      	cmp	r3, #32
 8005520:	d06c      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
 8005522:	2b30      	cmp	r3, #48	; 0x30
 8005524:	d06a      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005526:	e073      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005528:	2b70      	cmp	r3, #112	; 0x70
 800552a:	d00d      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x8c>
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d804      	bhi.n	800553a <HAL_TIM_ConfigClockSource+0x7e>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d033      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xe0>
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d041      	beq.n	80055bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005538:	e06a      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d066      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x152>
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d017      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005546:	e063      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f000 fb5a 	bl	8005c10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800556a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
      break;
 8005574:	e04c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6899      	ldr	r1, [r3, #8]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f000 fb43 	bl	8005c10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005598:	609a      	str	r2, [r3, #8]
      break;
 800559a:	e039      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	461a      	mov	r2, r3
 80055aa:	f000 fab7 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2150      	movs	r1, #80	; 0x50
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fb10 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055ba:	e029      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	461a      	mov	r2, r3
 80055ca:	f000 fad6 	bl	8005b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2160      	movs	r1, #96	; 0x60
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb00 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055da:	e019      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6859      	ldr	r1, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f000 fa97 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2140      	movs	r1, #64	; 0x40
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 faf0 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80055fa:	e009      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fae7 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 800560c:	e000      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800560e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_Base_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d027      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d023      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40001800 	.word	0x40001800
 80057b4:	40001c00 	.word	0x40001c00
 80057b8:	40002000 	.word	0x40002000

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0302 	bic.w	r3, r3, #2
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC1_SetConfig+0x64>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10c      	bne.n	800583a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0308 	bic.w	r3, r3, #8
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC1_SetConfig+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0210 	bic.w	r2, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0320 	bic.w	r3, r3, #32
 80058e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a22      	ldr	r2, [pc, #136]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC2_SetConfig+0x68>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10d      	bne.n	8005920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_OC2_SetConfig+0x94>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d113      	bne.n	8005958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10d      	bne.n	8005a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_OC3_SetConfig+0x92>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <TIM_OC4_SetConfig+0xa4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <TIM_OC4_SetConfig+0xa8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d109      	bne.n	8005aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	019b      	lsls	r3, r3, #6
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 0307 	orr.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2201      	movs	r2, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e05a      	b.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d01d      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10c      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40001800 	.word	0x40001800

08005d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e03d      	b.n	8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e03f      	b.n	8005ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fc fc8e 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	; 0x24
 8005e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb8d 	bl	80065c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b088      	sub	sp, #32
 8005efe:	af02      	add	r7, sp, #8
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	f040 8083 	bne.w	8006022 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Transmit+0x2e>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e07b      	b.n	8006024 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Transmit+0x40>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e074      	b.n	8006024 <HAL_UART_Transmit+0x12a>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2221      	movs	r2, #33	; 0x21
 8005f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f50:	f7fc fec2 	bl	8002cd8 <HAL_GetTick>
 8005f54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f6a:	e042      	b.n	8005ff2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d122      	bne.n	8005fca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f9ac 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e042      	b.n	8006024 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	e017      	b.n	8005ff2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	e013      	b.n	8005ff2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f989 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e01f      	b.n	8006024 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	60ba      	str	r2, [r7, #8]
 8005fea:	781a      	ldrb	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1b7      	bne.n	8005f6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f970 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e006      	b.n	8006024 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006022:	2302      	movs	r3, #2
  }
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d140      	bne.n	80060c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_UART_Receive_IT+0x26>
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e039      	b.n	80060ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UART_Receive_IT+0x38>
 8006060:	2302      	movs	r3, #2
 8006062:	e032      	b.n	80060ca <HAL_UART_Receive_IT+0x9e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2222      	movs	r2, #34	; 0x22
 8006088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0220 	orr.w	r2, r2, #32
 80060c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_UART_IRQHandler+0x52>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9cc 	bl	80064c0 <UART_Receive_IT>
      return;
 8006128:	e0d1      	b.n	80062ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80b0 	beq.w	8006292 <HAL_UART_IRQHandler+0x1ba>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_UART_IRQHandler+0x70>
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80a5 	beq.w	8006292 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_UART_IRQHandler+0x90>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	f043 0201 	orr.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_UART_IRQHandler+0xb0>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f043 0202 	orr.w	r2, r3, #2
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_UART_IRQHandler+0xd0>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	f043 0204 	orr.w	r2, r3, #4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00f      	beq.n	80061d2 <HAL_UART_IRQHandler+0xfa>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_UART_IRQHandler+0xee>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	f043 0208 	orr.w	r2, r3, #8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d078      	beq.n	80062cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <HAL_UART_IRQHandler+0x11c>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f966 	bl	80064c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <HAL_UART_IRQHandler+0x144>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d031      	beq.n	8006280 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f8af 	bl	8006380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d123      	bne.n	8006278 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_UART_IRQHandler+0x1fc>)
 800624e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fd89 	bl	8003d6c <HAL_DMA_Abort_IT>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d016      	beq.n	800628e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800626a:	4610      	mov	r0, r2
 800626c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626e:	e00e      	b.n	800628e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f831 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006276:	e00a      	b.n	800628e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f82d 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627e:	e006      	b.n	800628e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f829 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800628c:	e01e      	b.n	80062cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628e:	bf00      	nop
    return;
 8006290:	e01c      	b.n	80062cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_UART_IRQHandler+0x1d6>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f89c 	bl	80063e4 <UART_Transmit_IT>
    return;
 80062ac:	e00f      	b.n	80062ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_UART_IRQHandler+0x1f6>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8e4 	bl	8006490 <UART_EndTransmit_IT>
    return;
 80062c8:	bf00      	nop
 80062ca:	e000      	b.n	80062ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80062cc:	bf00      	nop
  }
}
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	080063bd 	.word	0x080063bd

080062d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	e02c      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d028      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <UART_WaitOnFlagUntilTimeout+0x30>
 800630c:	f7fc fce4 	bl	8002cd8 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	429a      	cmp	r2, r3
 800631a:	d21d      	bcs.n	8006358 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800632a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e00f      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	d0c3      	beq.n	80062fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006396:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f7ff ff7e 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b21      	cmp	r3, #33	; 0x21
 80063f6:	d144      	bne.n	8006482 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d11a      	bne.n	8006438 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006416:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	1c9a      	adds	r2, r3, #2
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]
 800642a:	e00e      	b.n	800644a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]
 8006436:	e008      	b.n	800644a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6211      	str	r1, [r2, #32]
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4619      	mov	r1, r3
 8006458:	84d1      	strh	r1, [r2, #38]	; 0x26
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800646c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	e000      	b.n	8006484 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006482:	2302      	movs	r3, #2
  }
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fa ff97 	bl	80013e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b22      	cmp	r3, #34	; 0x22
 80064d2:	d171      	bne.n	80065b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	d123      	bne.n	8006526 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10e      	bne.n	800650a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
 8006508:	e029      	b.n	800655e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	b29b      	uxth	r3, r3
 8006512:	b2db      	uxtb	r3, r3
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
 8006524:	e01b      	b.n	800655e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6858      	ldr	r0, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6291      	str	r1, [r2, #40]	; 0x28
 800653e:	b2c2      	uxtb	r2, r0
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e00c      	b.n	800655e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	1c58      	adds	r0, r3, #1
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	6288      	str	r0, [r1, #40]	; 0x28
 8006556:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29b      	uxth	r3, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4619      	mov	r1, r3
 800656c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800656e:	2b00      	cmp	r3, #0
 8006570:	d120      	bne.n	80065b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0220 	bic.w	r2, r2, #32
 8006580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fa fe6a 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e002      	b.n	80065ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e000      	b.n	80065ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006606:	f023 030c 	bic.w	r3, r3, #12
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	430b      	orrs	r3, r1
 8006612:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	f040 818b 	bne.w	800694c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4ac1      	ldr	r2, [pc, #772]	; (8006940 <UART_SetConfig+0x37c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d005      	beq.n	800664c <UART_SetConfig+0x88>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4abf      	ldr	r2, [pc, #764]	; (8006944 <UART_SetConfig+0x380>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f040 80bd 	bne.w	80067c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7fe fbe0 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 8006650:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	461d      	mov	r5, r3
 8006656:	f04f 0600 	mov.w	r6, #0
 800665a:	46a8      	mov	r8, r5
 800665c:	46b1      	mov	r9, r6
 800665e:	eb18 0308 	adds.w	r3, r8, r8
 8006662:	eb49 0409 	adc.w	r4, r9, r9
 8006666:	4698      	mov	r8, r3
 8006668:	46a1      	mov	r9, r4
 800666a:	eb18 0805 	adds.w	r8, r8, r5
 800666e:	eb49 0906 	adc.w	r9, r9, r6
 8006672:	f04f 0100 	mov.w	r1, #0
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800667e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006682:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006686:	4688      	mov	r8, r1
 8006688:	4691      	mov	r9, r2
 800668a:	eb18 0005 	adds.w	r0, r8, r5
 800668e:	eb49 0106 	adc.w	r1, r9, r6
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	461d      	mov	r5, r3
 8006698:	f04f 0600 	mov.w	r6, #0
 800669c:	196b      	adds	r3, r5, r5
 800669e:	eb46 0406 	adc.w	r4, r6, r6
 80066a2:	461a      	mov	r2, r3
 80066a4:	4623      	mov	r3, r4
 80066a6:	f7fa fa2b 	bl	8000b00 <__aeabi_uldivmod>
 80066aa:	4603      	mov	r3, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	461a      	mov	r2, r3
 80066b0:	4ba5      	ldr	r3, [pc, #660]	; (8006948 <UART_SetConfig+0x384>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	461d      	mov	r5, r3
 80066c0:	f04f 0600 	mov.w	r6, #0
 80066c4:	46a9      	mov	r9, r5
 80066c6:	46b2      	mov	sl, r6
 80066c8:	eb19 0309 	adds.w	r3, r9, r9
 80066cc:	eb4a 040a 	adc.w	r4, sl, sl
 80066d0:	4699      	mov	r9, r3
 80066d2:	46a2      	mov	sl, r4
 80066d4:	eb19 0905 	adds.w	r9, r9, r5
 80066d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80066dc:	f04f 0100 	mov.w	r1, #0
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066f0:	4689      	mov	r9, r1
 80066f2:	4692      	mov	sl, r2
 80066f4:	eb19 0005 	adds.w	r0, r9, r5
 80066f8:	eb4a 0106 	adc.w	r1, sl, r6
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	461d      	mov	r5, r3
 8006702:	f04f 0600 	mov.w	r6, #0
 8006706:	196b      	adds	r3, r5, r5
 8006708:	eb46 0406 	adc.w	r4, r6, r6
 800670c:	461a      	mov	r2, r3
 800670e:	4623      	mov	r3, r4
 8006710:	f7fa f9f6 	bl	8000b00 <__aeabi_uldivmod>
 8006714:	4603      	mov	r3, r0
 8006716:	460c      	mov	r4, r1
 8006718:	461a      	mov	r2, r3
 800671a:	4b8b      	ldr	r3, [pc, #556]	; (8006948 <UART_SetConfig+0x384>)
 800671c:	fba3 1302 	umull	r1, r3, r3, r2
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	2164      	movs	r1, #100	; 0x64
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	3332      	adds	r3, #50	; 0x32
 800672e:	4a86      	ldr	r2, [pc, #536]	; (8006948 <UART_SetConfig+0x384>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800673c:	4498      	add	r8, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	461d      	mov	r5, r3
 8006742:	f04f 0600 	mov.w	r6, #0
 8006746:	46a9      	mov	r9, r5
 8006748:	46b2      	mov	sl, r6
 800674a:	eb19 0309 	adds.w	r3, r9, r9
 800674e:	eb4a 040a 	adc.w	r4, sl, sl
 8006752:	4699      	mov	r9, r3
 8006754:	46a2      	mov	sl, r4
 8006756:	eb19 0905 	adds.w	r9, r9, r5
 800675a:	eb4a 0a06 	adc.w	sl, sl, r6
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800676e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006772:	4689      	mov	r9, r1
 8006774:	4692      	mov	sl, r2
 8006776:	eb19 0005 	adds.w	r0, r9, r5
 800677a:	eb4a 0106 	adc.w	r1, sl, r6
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	461d      	mov	r5, r3
 8006784:	f04f 0600 	mov.w	r6, #0
 8006788:	196b      	adds	r3, r5, r5
 800678a:	eb46 0406 	adc.w	r4, r6, r6
 800678e:	461a      	mov	r2, r3
 8006790:	4623      	mov	r3, r4
 8006792:	f7fa f9b5 	bl	8000b00 <__aeabi_uldivmod>
 8006796:	4603      	mov	r3, r0
 8006798:	460c      	mov	r4, r1
 800679a:	461a      	mov	r2, r3
 800679c:	4b6a      	ldr	r3, [pc, #424]	; (8006948 <UART_SetConfig+0x384>)
 800679e:	fba3 1302 	umull	r1, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	2164      	movs	r1, #100	; 0x64
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	3332      	adds	r3, #50	; 0x32
 80067b0:	4a65      	ldr	r2, [pc, #404]	; (8006948 <UART_SetConfig+0x384>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	f003 0207 	and.w	r2, r3, #7
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4442      	add	r2, r8
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	e26f      	b.n	8006ca6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067c6:	f7fe fb0f 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80067ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	461d      	mov	r5, r3
 80067d0:	f04f 0600 	mov.w	r6, #0
 80067d4:	46a8      	mov	r8, r5
 80067d6:	46b1      	mov	r9, r6
 80067d8:	eb18 0308 	adds.w	r3, r8, r8
 80067dc:	eb49 0409 	adc.w	r4, r9, r9
 80067e0:	4698      	mov	r8, r3
 80067e2:	46a1      	mov	r9, r4
 80067e4:	eb18 0805 	adds.w	r8, r8, r5
 80067e8:	eb49 0906 	adc.w	r9, r9, r6
 80067ec:	f04f 0100 	mov.w	r1, #0
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006800:	4688      	mov	r8, r1
 8006802:	4691      	mov	r9, r2
 8006804:	eb18 0005 	adds.w	r0, r8, r5
 8006808:	eb49 0106 	adc.w	r1, r9, r6
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	461d      	mov	r5, r3
 8006812:	f04f 0600 	mov.w	r6, #0
 8006816:	196b      	adds	r3, r5, r5
 8006818:	eb46 0406 	adc.w	r4, r6, r6
 800681c:	461a      	mov	r2, r3
 800681e:	4623      	mov	r3, r4
 8006820:	f7fa f96e 	bl	8000b00 <__aeabi_uldivmod>
 8006824:	4603      	mov	r3, r0
 8006826:	460c      	mov	r4, r1
 8006828:	461a      	mov	r2, r3
 800682a:	4b47      	ldr	r3, [pc, #284]	; (8006948 <UART_SetConfig+0x384>)
 800682c:	fba3 2302 	umull	r2, r3, r3, r2
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	461d      	mov	r5, r3
 800683a:	f04f 0600 	mov.w	r6, #0
 800683e:	46a9      	mov	r9, r5
 8006840:	46b2      	mov	sl, r6
 8006842:	eb19 0309 	adds.w	r3, r9, r9
 8006846:	eb4a 040a 	adc.w	r4, sl, sl
 800684a:	4699      	mov	r9, r3
 800684c:	46a2      	mov	sl, r4
 800684e:	eb19 0905 	adds.w	r9, r9, r5
 8006852:	eb4a 0a06 	adc.w	sl, sl, r6
 8006856:	f04f 0100 	mov.w	r1, #0
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800686a:	4689      	mov	r9, r1
 800686c:	4692      	mov	sl, r2
 800686e:	eb19 0005 	adds.w	r0, r9, r5
 8006872:	eb4a 0106 	adc.w	r1, sl, r6
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	461d      	mov	r5, r3
 800687c:	f04f 0600 	mov.w	r6, #0
 8006880:	196b      	adds	r3, r5, r5
 8006882:	eb46 0406 	adc.w	r4, r6, r6
 8006886:	461a      	mov	r2, r3
 8006888:	4623      	mov	r3, r4
 800688a:	f7fa f939 	bl	8000b00 <__aeabi_uldivmod>
 800688e:	4603      	mov	r3, r0
 8006890:	460c      	mov	r4, r1
 8006892:	461a      	mov	r2, r3
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <UART_SetConfig+0x384>)
 8006896:	fba3 1302 	umull	r1, r3, r3, r2
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	2164      	movs	r1, #100	; 0x64
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	3332      	adds	r3, #50	; 0x32
 80068a8:	4a27      	ldr	r2, [pc, #156]	; (8006948 <UART_SetConfig+0x384>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068b6:	4498      	add	r8, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	461d      	mov	r5, r3
 80068bc:	f04f 0600 	mov.w	r6, #0
 80068c0:	46a9      	mov	r9, r5
 80068c2:	46b2      	mov	sl, r6
 80068c4:	eb19 0309 	adds.w	r3, r9, r9
 80068c8:	eb4a 040a 	adc.w	r4, sl, sl
 80068cc:	4699      	mov	r9, r3
 80068ce:	46a2      	mov	sl, r4
 80068d0:	eb19 0905 	adds.w	r9, r9, r5
 80068d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ec:	4689      	mov	r9, r1
 80068ee:	4692      	mov	sl, r2
 80068f0:	eb19 0005 	adds.w	r0, r9, r5
 80068f4:	eb4a 0106 	adc.w	r1, sl, r6
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	461d      	mov	r5, r3
 80068fe:	f04f 0600 	mov.w	r6, #0
 8006902:	196b      	adds	r3, r5, r5
 8006904:	eb46 0406 	adc.w	r4, r6, r6
 8006908:	461a      	mov	r2, r3
 800690a:	4623      	mov	r3, r4
 800690c:	f7fa f8f8 	bl	8000b00 <__aeabi_uldivmod>
 8006910:	4603      	mov	r3, r0
 8006912:	460c      	mov	r4, r1
 8006914:	461a      	mov	r2, r3
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <UART_SetConfig+0x384>)
 8006918:	fba3 1302 	umull	r1, r3, r3, r2
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	2164      	movs	r1, #100	; 0x64
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	3332      	adds	r3, #50	; 0x32
 800692a:	4a07      	ldr	r2, [pc, #28]	; (8006948 <UART_SetConfig+0x384>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	f003 0207 	and.w	r2, r3, #7
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4442      	add	r2, r8
 800693c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800693e:	e1b2      	b.n	8006ca6 <UART_SetConfig+0x6e2>
 8006940:	40011000 	.word	0x40011000
 8006944:	40011400 	.word	0x40011400
 8006948:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4ad7      	ldr	r2, [pc, #860]	; (8006cb0 <UART_SetConfig+0x6ec>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d005      	beq.n	8006962 <UART_SetConfig+0x39e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4ad6      	ldr	r2, [pc, #856]	; (8006cb4 <UART_SetConfig+0x6f0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	f040 80d1 	bne.w	8006b04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006962:	f7fe fa55 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 8006966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	469a      	mov	sl, r3
 800696c:	f04f 0b00 	mov.w	fp, #0
 8006970:	46d0      	mov	r8, sl
 8006972:	46d9      	mov	r9, fp
 8006974:	eb18 0308 	adds.w	r3, r8, r8
 8006978:	eb49 0409 	adc.w	r4, r9, r9
 800697c:	4698      	mov	r8, r3
 800697e:	46a1      	mov	r9, r4
 8006980:	eb18 080a 	adds.w	r8, r8, sl
 8006984:	eb49 090b 	adc.w	r9, r9, fp
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800699c:	4688      	mov	r8, r1
 800699e:	4691      	mov	r9, r2
 80069a0:	eb1a 0508 	adds.w	r5, sl, r8
 80069a4:	eb4b 0609 	adc.w	r6, fp, r9
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4619      	mov	r1, r3
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	f04f 0400 	mov.w	r4, #0
 80069ba:	0094      	lsls	r4, r2, #2
 80069bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069c0:	008b      	lsls	r3, r1, #2
 80069c2:	461a      	mov	r2, r3
 80069c4:	4623      	mov	r3, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	4631      	mov	r1, r6
 80069ca:	f7fa f899 	bl	8000b00 <__aeabi_uldivmod>
 80069ce:	4603      	mov	r3, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	461a      	mov	r2, r3
 80069d4:	4bb8      	ldr	r3, [pc, #736]	; (8006cb8 <UART_SetConfig+0x6f4>)
 80069d6:	fba3 2302 	umull	r2, r3, r3, r2
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	469b      	mov	fp, r3
 80069e4:	f04f 0c00 	mov.w	ip, #0
 80069e8:	46d9      	mov	r9, fp
 80069ea:	46e2      	mov	sl, ip
 80069ec:	eb19 0309 	adds.w	r3, r9, r9
 80069f0:	eb4a 040a 	adc.w	r4, sl, sl
 80069f4:	4699      	mov	r9, r3
 80069f6:	46a2      	mov	sl, r4
 80069f8:	eb19 090b 	adds.w	r9, r9, fp
 80069fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a14:	4689      	mov	r9, r1
 8006a16:	4692      	mov	sl, r2
 8006a18:	eb1b 0509 	adds.w	r5, fp, r9
 8006a1c:	eb4c 060a 	adc.w	r6, ip, sl
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	f04f 0400 	mov.w	r4, #0
 8006a32:	0094      	lsls	r4, r2, #2
 8006a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a38:	008b      	lsls	r3, r1, #2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4631      	mov	r1, r6
 8006a42:	f7fa f85d 	bl	8000b00 <__aeabi_uldivmod>
 8006a46:	4603      	mov	r3, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b9a      	ldr	r3, [pc, #616]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2164      	movs	r1, #100	; 0x64
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	3332      	adds	r3, #50	; 0x32
 8006a60:	4a95      	ldr	r2, [pc, #596]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a6c:	4498      	add	r8, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	469b      	mov	fp, r3
 8006a72:	f04f 0c00 	mov.w	ip, #0
 8006a76:	46d9      	mov	r9, fp
 8006a78:	46e2      	mov	sl, ip
 8006a7a:	eb19 0309 	adds.w	r3, r9, r9
 8006a7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a82:	4699      	mov	r9, r3
 8006a84:	46a2      	mov	sl, r4
 8006a86:	eb19 090b 	adds.w	r9, r9, fp
 8006a8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	4692      	mov	sl, r2
 8006aa6:	eb1b 0509 	adds.w	r5, fp, r9
 8006aaa:	eb4c 060a 	adc.w	r6, ip, sl
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	f04f 0400 	mov.w	r4, #0
 8006ac0:	0094      	lsls	r4, r2, #2
 8006ac2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ac6:	008b      	lsls	r3, r1, #2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4623      	mov	r3, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	4631      	mov	r1, r6
 8006ad0:	f7fa f816 	bl	8000b00 <__aeabi_uldivmod>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b77      	ldr	r3, [pc, #476]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006adc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	2164      	movs	r1, #100	; 0x64
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	3332      	adds	r3, #50	; 0x32
 8006aee:	4a72      	ldr	r2, [pc, #456]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4442      	add	r2, r8
 8006b00:	609a      	str	r2, [r3, #8]
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe f970 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8006b08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	f04f 0b00 	mov.w	fp, #0
 8006b12:	46d0      	mov	r8, sl
 8006b14:	46d9      	mov	r9, fp
 8006b16:	eb18 0308 	adds.w	r3, r8, r8
 8006b1a:	eb49 0409 	adc.w	r4, r9, r9
 8006b1e:	4698      	mov	r8, r3
 8006b20:	46a1      	mov	r9, r4
 8006b22:	eb18 080a 	adds.w	r8, r8, sl
 8006b26:	eb49 090b 	adc.w	r9, r9, fp
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b3e:	4688      	mov	r8, r1
 8006b40:	4691      	mov	r9, r2
 8006b42:	eb1a 0508 	adds.w	r5, sl, r8
 8006b46:	eb4b 0609 	adc.w	r6, fp, r9
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	f04f 0400 	mov.w	r4, #0
 8006b5c:	0094      	lsls	r4, r2, #2
 8006b5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b62:	008b      	lsls	r3, r1, #2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4623      	mov	r3, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	f7f9 ffc8 	bl	8000b00 <__aeabi_uldivmod>
 8006b70:	4603      	mov	r3, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	461a      	mov	r2, r3
 8006b76:	4b50      	ldr	r3, [pc, #320]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006b78:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	469b      	mov	fp, r3
 8006b86:	f04f 0c00 	mov.w	ip, #0
 8006b8a:	46d9      	mov	r9, fp
 8006b8c:	46e2      	mov	sl, ip
 8006b8e:	eb19 0309 	adds.w	r3, r9, r9
 8006b92:	eb4a 040a 	adc.w	r4, sl, sl
 8006b96:	4699      	mov	r9, r3
 8006b98:	46a2      	mov	sl, r4
 8006b9a:	eb19 090b 	adds.w	r9, r9, fp
 8006b9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	4692      	mov	sl, r2
 8006bba:	eb1b 0509 	adds.w	r5, fp, r9
 8006bbe:	eb4c 060a 	adc.w	r6, ip, sl
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	0094      	lsls	r4, r2, #2
 8006bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bda:	008b      	lsls	r3, r1, #2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	4631      	mov	r1, r6
 8006be4:	f7f9 ff8c 	bl	8000b00 <__aeabi_uldivmod>
 8006be8:	4603      	mov	r3, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b32      	ldr	r3, [pc, #200]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	2164      	movs	r1, #100	; 0x64
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	3332      	adds	r3, #50	; 0x32
 8006c02:	4a2d      	ldr	r2, [pc, #180]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c0e:	4498      	add	r8, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	469b      	mov	fp, r3
 8006c14:	f04f 0c00 	mov.w	ip, #0
 8006c18:	46d9      	mov	r9, fp
 8006c1a:	46e2      	mov	sl, ip
 8006c1c:	eb19 0309 	adds.w	r3, r9, r9
 8006c20:	eb4a 040a 	adc.w	r4, sl, sl
 8006c24:	4699      	mov	r9, r3
 8006c26:	46a2      	mov	sl, r4
 8006c28:	eb19 090b 	adds.w	r9, r9, fp
 8006c2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c30:	f04f 0100 	mov.w	r1, #0
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c44:	4689      	mov	r9, r1
 8006c46:	4692      	mov	sl, r2
 8006c48:	eb1b 0509 	adds.w	r5, fp, r9
 8006c4c:	eb4c 060a 	adc.w	r6, ip, sl
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4619      	mov	r1, r3
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	f04f 0400 	mov.w	r4, #0
 8006c62:	0094      	lsls	r4, r2, #2
 8006c64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c68:	008b      	lsls	r3, r1, #2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	4631      	mov	r1, r6
 8006c72:	f7f9 ff45 	bl	8000b00 <__aeabi_uldivmod>
 8006c76:	4603      	mov	r3, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	2164      	movs	r1, #100	; 0x64
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	3332      	adds	r3, #50	; 0x32
 8006c90:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <UART_SetConfig+0x6f4>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4442      	add	r2, r8
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	e7ff      	b.n	8006ca6 <UART_SetConfig+0x6e2>
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	40011000 	.word	0x40011000
 8006cb4:	40011400 	.word	0x40011400
 8006cb8:	51eb851f 	.word	0x51eb851f

08006cbc <__errno>:
 8006cbc:	4b01      	ldr	r3, [pc, #4]	; (8006cc4 <__errno+0x8>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	2000000c 	.word	0x2000000c

08006cc8 <__libc_init_array>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4e0d      	ldr	r6, [pc, #52]	; (8006d00 <__libc_init_array+0x38>)
 8006ccc:	4c0d      	ldr	r4, [pc, #52]	; (8006d04 <__libc_init_array+0x3c>)
 8006cce:	1ba4      	subs	r4, r4, r6
 8006cd0:	10a4      	asrs	r4, r4, #2
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	42a5      	cmp	r5, r4
 8006cd6:	d109      	bne.n	8006cec <__libc_init_array+0x24>
 8006cd8:	4e0b      	ldr	r6, [pc, #44]	; (8006d08 <__libc_init_array+0x40>)
 8006cda:	4c0c      	ldr	r4, [pc, #48]	; (8006d0c <__libc_init_array+0x44>)
 8006cdc:	f001 fd46 	bl	800876c <_init>
 8006ce0:	1ba4      	subs	r4, r4, r6
 8006ce2:	10a4      	asrs	r4, r4, #2
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	42a5      	cmp	r5, r4
 8006ce8:	d105      	bne.n	8006cf6 <__libc_init_array+0x2e>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cf0:	4798      	blx	r3
 8006cf2:	3501      	adds	r5, #1
 8006cf4:	e7ee      	b.n	8006cd4 <__libc_init_array+0xc>
 8006cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cfa:	4798      	blx	r3
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	e7f2      	b.n	8006ce6 <__libc_init_array+0x1e>
 8006d00:	080089d8 	.word	0x080089d8
 8006d04:	080089d8 	.word	0x080089d8
 8006d08:	080089d8 	.word	0x080089d8
 8006d0c:	080089dc 	.word	0x080089dc

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <__cvt>:
 8006d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	ec55 4b10 	vmov	r4, r5, d0
 8006d28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d2a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	460e      	mov	r6, r1
 8006d32:	4691      	mov	r9, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	bfb8      	it	lt
 8006d38:	4622      	movlt	r2, r4
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	f027 0720 	bic.w	r7, r7, #32
 8006d40:	bfbb      	ittet	lt
 8006d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d46:	461d      	movlt	r5, r3
 8006d48:	2300      	movge	r3, #0
 8006d4a:	232d      	movlt	r3, #45	; 0x2d
 8006d4c:	bfb8      	it	lt
 8006d4e:	4614      	movlt	r4, r2
 8006d50:	2f46      	cmp	r7, #70	; 0x46
 8006d52:	700b      	strb	r3, [r1, #0]
 8006d54:	d004      	beq.n	8006d60 <__cvt+0x40>
 8006d56:	2f45      	cmp	r7, #69	; 0x45
 8006d58:	d100      	bne.n	8006d5c <__cvt+0x3c>
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	e000      	b.n	8006d62 <__cvt+0x42>
 8006d60:	2103      	movs	r1, #3
 8006d62:	ab03      	add	r3, sp, #12
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	ab02      	add	r3, sp, #8
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4632      	mov	r2, r6
 8006d6c:	4653      	mov	r3, sl
 8006d6e:	ec45 4b10 	vmov	d0, r4, r5
 8006d72:	f000 fbad 	bl	80074d0 <_dtoa_r>
 8006d76:	2f47      	cmp	r7, #71	; 0x47
 8006d78:	4680      	mov	r8, r0
 8006d7a:	d102      	bne.n	8006d82 <__cvt+0x62>
 8006d7c:	f019 0f01 	tst.w	r9, #1
 8006d80:	d026      	beq.n	8006dd0 <__cvt+0xb0>
 8006d82:	2f46      	cmp	r7, #70	; 0x46
 8006d84:	eb08 0906 	add.w	r9, r8, r6
 8006d88:	d111      	bne.n	8006dae <__cvt+0x8e>
 8006d8a:	f898 3000 	ldrb.w	r3, [r8]
 8006d8e:	2b30      	cmp	r3, #48	; 0x30
 8006d90:	d10a      	bne.n	8006da8 <__cvt+0x88>
 8006d92:	2200      	movs	r2, #0
 8006d94:	2300      	movs	r3, #0
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fe41 	bl	8000a20 <__aeabi_dcmpeq>
 8006d9e:	b918      	cbnz	r0, 8006da8 <__cvt+0x88>
 8006da0:	f1c6 0601 	rsb	r6, r6, #1
 8006da4:	f8ca 6000 	str.w	r6, [sl]
 8006da8:	f8da 3000 	ldr.w	r3, [sl]
 8006dac:	4499      	add	r9, r3
 8006dae:	2200      	movs	r2, #0
 8006db0:	2300      	movs	r3, #0
 8006db2:	4620      	mov	r0, r4
 8006db4:	4629      	mov	r1, r5
 8006db6:	f7f9 fe33 	bl	8000a20 <__aeabi_dcmpeq>
 8006dba:	b938      	cbnz	r0, 8006dcc <__cvt+0xac>
 8006dbc:	2230      	movs	r2, #48	; 0x30
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	454b      	cmp	r3, r9
 8006dc2:	d205      	bcs.n	8006dd0 <__cvt+0xb0>
 8006dc4:	1c59      	adds	r1, r3, #1
 8006dc6:	9103      	str	r1, [sp, #12]
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e7f8      	b.n	8006dbe <__cvt+0x9e>
 8006dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dd4:	eba3 0308 	sub.w	r3, r3, r8
 8006dd8:	4640      	mov	r0, r8
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	b004      	add	sp, #16
 8006dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006de2 <__exponent>:
 8006de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006de4:	2900      	cmp	r1, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	bfba      	itte	lt
 8006dea:	4249      	neglt	r1, r1
 8006dec:	232d      	movlt	r3, #45	; 0x2d
 8006dee:	232b      	movge	r3, #43	; 0x2b
 8006df0:	2909      	cmp	r1, #9
 8006df2:	f804 2b02 	strb.w	r2, [r4], #2
 8006df6:	7043      	strb	r3, [r0, #1]
 8006df8:	dd20      	ble.n	8006e3c <__exponent+0x5a>
 8006dfa:	f10d 0307 	add.w	r3, sp, #7
 8006dfe:	461f      	mov	r7, r3
 8006e00:	260a      	movs	r6, #10
 8006e02:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e06:	fb06 1115 	mls	r1, r6, r5, r1
 8006e0a:	3130      	adds	r1, #48	; 0x30
 8006e0c:	2d09      	cmp	r5, #9
 8006e0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e12:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e16:	4629      	mov	r1, r5
 8006e18:	dc09      	bgt.n	8006e2e <__exponent+0x4c>
 8006e1a:	3130      	adds	r1, #48	; 0x30
 8006e1c:	3b02      	subs	r3, #2
 8006e1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	4622      	mov	r2, r4
 8006e26:	d304      	bcc.n	8006e32 <__exponent+0x50>
 8006e28:	1a10      	subs	r0, r2, r0
 8006e2a:	b003      	add	sp, #12
 8006e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2e:	4613      	mov	r3, r2
 8006e30:	e7e7      	b.n	8006e02 <__exponent+0x20>
 8006e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e36:	f804 2b01 	strb.w	r2, [r4], #1
 8006e3a:	e7f2      	b.n	8006e22 <__exponent+0x40>
 8006e3c:	2330      	movs	r3, #48	; 0x30
 8006e3e:	4419      	add	r1, r3
 8006e40:	7083      	strb	r3, [r0, #2]
 8006e42:	1d02      	adds	r2, r0, #4
 8006e44:	70c1      	strb	r1, [r0, #3]
 8006e46:	e7ef      	b.n	8006e28 <__exponent+0x46>

08006e48 <_printf_float>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	b08d      	sub	sp, #52	; 0x34
 8006e4e:	460c      	mov	r4, r1
 8006e50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006e54:	4616      	mov	r6, r2
 8006e56:	461f      	mov	r7, r3
 8006e58:	4605      	mov	r5, r0
 8006e5a:	f001 f8f1 	bl	8008040 <_localeconv_r>
 8006e5e:	6803      	ldr	r3, [r0, #0]
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7f9 f9b0 	bl	80001c8 <strlen>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	9005      	str	r0, [sp, #20]
 8006e72:	3307      	adds	r3, #7
 8006e74:	f023 0307 	bic.w	r3, r3, #7
 8006e78:	f103 0208 	add.w	r2, r3, #8
 8006e7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e80:	f8d4 b000 	ldr.w	fp, [r4]
 8006e84:	f8c8 2000 	str.w	r2, [r8]
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e98:	9307      	str	r3, [sp, #28]
 8006e9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	4ba7      	ldr	r3, [pc, #668]	; (8007140 <_printf_float+0x2f8>)
 8006ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea8:	f7f9 fdec 	bl	8000a84 <__aeabi_dcmpun>
 8006eac:	bb70      	cbnz	r0, 8006f0c <_printf_float+0xc4>
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	4ba3      	ldr	r3, [pc, #652]	; (8007140 <_printf_float+0x2f8>)
 8006eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb8:	f7f9 fdc6 	bl	8000a48 <__aeabi_dcmple>
 8006ebc:	bb30      	cbnz	r0, 8006f0c <_printf_float+0xc4>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 fdb5 	bl	8000a34 <__aeabi_dcmplt>
 8006eca:	b110      	cbz	r0, 8006ed2 <_printf_float+0x8a>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed2:	4a9c      	ldr	r2, [pc, #624]	; (8007144 <_printf_float+0x2fc>)
 8006ed4:	4b9c      	ldr	r3, [pc, #624]	; (8007148 <_printf_float+0x300>)
 8006ed6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006eda:	bf8c      	ite	hi
 8006edc:	4690      	movhi	r8, r2
 8006ede:	4698      	movls	r8, r3
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	f02b 0204 	bic.w	r2, fp, #4
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	6022      	str	r2, [r4, #0]
 8006eea:	f04f 0900 	mov.w	r9, #0
 8006eee:	9700      	str	r7, [sp, #0]
 8006ef0:	4633      	mov	r3, r6
 8006ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f9e6 	bl	80072c8 <_printf_common>
 8006efc:	3001      	adds	r0, #1
 8006efe:	f040 808d 	bne.w	800701c <_printf_float+0x1d4>
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	b00d      	add	sp, #52	; 0x34
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 fdb6 	bl	8000a84 <__aeabi_dcmpun>
 8006f18:	b110      	cbz	r0, 8006f20 <_printf_float+0xd8>
 8006f1a:	4a8c      	ldr	r2, [pc, #560]	; (800714c <_printf_float+0x304>)
 8006f1c:	4b8c      	ldr	r3, [pc, #560]	; (8007150 <_printf_float+0x308>)
 8006f1e:	e7da      	b.n	8006ed6 <_printf_float+0x8e>
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	1c4b      	adds	r3, r1, #1
 8006f24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f28:	a80a      	add	r0, sp, #40	; 0x28
 8006f2a:	d13e      	bne.n	8006faa <_printf_float+0x162>
 8006f2c:	2306      	movs	r3, #6
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	2300      	movs	r3, #0
 8006f32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f36:	ab09      	add	r3, sp, #36	; 0x24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	ec49 8b10 	vmov	d0, r8, r9
 8006f3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	f8cd a004 	str.w	sl, [sp, #4]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7ff fee8 	bl	8006d20 <__cvt>
 8006f50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006f54:	2b47      	cmp	r3, #71	; 0x47
 8006f56:	4680      	mov	r8, r0
 8006f58:	d109      	bne.n	8006f6e <_printf_float+0x126>
 8006f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5c:	1cd8      	adds	r0, r3, #3
 8006f5e:	db02      	blt.n	8006f66 <_printf_float+0x11e>
 8006f60:	6862      	ldr	r2, [r4, #4]
 8006f62:	4293      	cmp	r3, r2
 8006f64:	dd47      	ble.n	8006ff6 <_printf_float+0x1ae>
 8006f66:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f6a:	fa5f fa8a 	uxtb.w	sl, sl
 8006f6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f74:	d824      	bhi.n	8006fc0 <_printf_float+0x178>
 8006f76:	3901      	subs	r1, #1
 8006f78:	4652      	mov	r2, sl
 8006f7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8006f80:	f7ff ff2f 	bl	8006de2 <__exponent>
 8006f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f86:	1813      	adds	r3, r2, r0
 8006f88:	2a01      	cmp	r2, #1
 8006f8a:	4681      	mov	r9, r0
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	dc02      	bgt.n	8006f96 <_printf_float+0x14e>
 8006f90:	6822      	ldr	r2, [r4, #0]
 8006f92:	07d1      	lsls	r1, r2, #31
 8006f94:	d501      	bpl.n	8006f9a <_printf_float+0x152>
 8006f96:	3301      	adds	r3, #1
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0a5      	beq.n	8006eee <_printf_float+0xa6>
 8006fa2:	232d      	movs	r3, #45	; 0x2d
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	e7a1      	b.n	8006eee <_printf_float+0xa6>
 8006faa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006fae:	f000 8177 	beq.w	80072a0 <_printf_float+0x458>
 8006fb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006fb6:	d1bb      	bne.n	8006f30 <_printf_float+0xe8>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d1b9      	bne.n	8006f30 <_printf_float+0xe8>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e7b6      	b.n	8006f2e <_printf_float+0xe6>
 8006fc0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006fc4:	d119      	bne.n	8006ffa <_printf_float+0x1b2>
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	dd0c      	ble.n	8006fe6 <_printf_float+0x19e>
 8006fcc:	6121      	str	r1, [r4, #16]
 8006fce:	b913      	cbnz	r3, 8006fd6 <_printf_float+0x18e>
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	07d2      	lsls	r2, r2, #31
 8006fd4:	d502      	bpl.n	8006fdc <_printf_float+0x194>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	440b      	add	r3, r1
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fe0:	f04f 0900 	mov.w	r9, #0
 8006fe4:	e7d9      	b.n	8006f9a <_printf_float+0x152>
 8006fe6:	b913      	cbnz	r3, 8006fee <_printf_float+0x1a6>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	07d0      	lsls	r0, r2, #31
 8006fec:	d501      	bpl.n	8006ff2 <_printf_float+0x1aa>
 8006fee:	3302      	adds	r3, #2
 8006ff0:	e7f3      	b.n	8006fda <_printf_float+0x192>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7f1      	b.n	8006fda <_printf_float+0x192>
 8006ff6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006ffa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ffe:	4293      	cmp	r3, r2
 8007000:	db05      	blt.n	800700e <_printf_float+0x1c6>
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	07d1      	lsls	r1, r2, #31
 8007008:	d5e8      	bpl.n	8006fdc <_printf_float+0x194>
 800700a:	3301      	adds	r3, #1
 800700c:	e7e5      	b.n	8006fda <_printf_float+0x192>
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfd4      	ite	le
 8007012:	f1c3 0302 	rsble	r3, r3, #2
 8007016:	2301      	movgt	r3, #1
 8007018:	4413      	add	r3, r2
 800701a:	e7de      	b.n	8006fda <_printf_float+0x192>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	055a      	lsls	r2, r3, #21
 8007020:	d407      	bmi.n	8007032 <_printf_float+0x1ea>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	4642      	mov	r2, r8
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	d12b      	bne.n	8007088 <_printf_float+0x240>
 8007030:	e767      	b.n	8006f02 <_printf_float+0xba>
 8007032:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007036:	f240 80dc 	bls.w	80071f2 <_printf_float+0x3aa>
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007042:	f7f9 fced 	bl	8000a20 <__aeabi_dcmpeq>
 8007046:	2800      	cmp	r0, #0
 8007048:	d033      	beq.n	80070b2 <_printf_float+0x26a>
 800704a:	2301      	movs	r3, #1
 800704c:	4a41      	ldr	r2, [pc, #260]	; (8007154 <_printf_float+0x30c>)
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f af54 	beq.w	8006f02 <_printf_float+0xba>
 800705a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800705e:	429a      	cmp	r2, r3
 8007060:	db02      	blt.n	8007068 <_printf_float+0x220>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	07d8      	lsls	r0, r3, #31
 8007066:	d50f      	bpl.n	8007088 <_printf_float+0x240>
 8007068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af45 	beq.w	8006f02 <_printf_float+0xba>
 8007078:	f04f 0800 	mov.w	r8, #0
 800707c:	f104 091a 	add.w	r9, r4, #26
 8007080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007082:	3b01      	subs	r3, #1
 8007084:	4543      	cmp	r3, r8
 8007086:	dc09      	bgt.n	800709c <_printf_float+0x254>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	079b      	lsls	r3, r3, #30
 800708c:	f100 8103 	bmi.w	8007296 <_printf_float+0x44e>
 8007090:	68e0      	ldr	r0, [r4, #12]
 8007092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007094:	4298      	cmp	r0, r3
 8007096:	bfb8      	it	lt
 8007098:	4618      	movlt	r0, r3
 800709a:	e734      	b.n	8006f06 <_printf_float+0xbe>
 800709c:	2301      	movs	r3, #1
 800709e:	464a      	mov	r2, r9
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f af2b 	beq.w	8006f02 <_printf_float+0xba>
 80070ac:	f108 0801 	add.w	r8, r8, #1
 80070b0:	e7e6      	b.n	8007080 <_printf_float+0x238>
 80070b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc2b      	bgt.n	8007110 <_printf_float+0x2c8>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4a26      	ldr	r2, [pc, #152]	; (8007154 <_printf_float+0x30c>)
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f af1d 	beq.w	8006f02 <_printf_float+0xba>
 80070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ca:	b923      	cbnz	r3, 80070d6 <_printf_float+0x28e>
 80070cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ce:	b913      	cbnz	r3, 80070d6 <_printf_float+0x28e>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d5d8      	bpl.n	8007088 <_printf_float+0x240>
 80070d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	f43f af0e 	beq.w	8006f02 <_printf_float+0xba>
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	f104 0a1a 	add.w	sl, r4, #26
 80070ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f0:	425b      	negs	r3, r3
 80070f2:	454b      	cmp	r3, r9
 80070f4:	dc01      	bgt.n	80070fa <_printf_float+0x2b2>
 80070f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f8:	e794      	b.n	8007024 <_printf_float+0x1dc>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	f43f aefc 	beq.w	8006f02 <_printf_float+0xba>
 800710a:	f109 0901 	add.w	r9, r9, #1
 800710e:	e7ee      	b.n	80070ee <_printf_float+0x2a6>
 8007110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007114:	429a      	cmp	r2, r3
 8007116:	bfa8      	it	ge
 8007118:	461a      	movge	r2, r3
 800711a:	2a00      	cmp	r2, #0
 800711c:	4691      	mov	r9, r2
 800711e:	dd07      	ble.n	8007130 <_printf_float+0x2e8>
 8007120:	4613      	mov	r3, r2
 8007122:	4631      	mov	r1, r6
 8007124:	4642      	mov	r2, r8
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f aee9 	beq.w	8006f02 <_printf_float+0xba>
 8007130:	f104 031a 	add.w	r3, r4, #26
 8007134:	f04f 0b00 	mov.w	fp, #0
 8007138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800713c:	9306      	str	r3, [sp, #24]
 800713e:	e015      	b.n	800716c <_printf_float+0x324>
 8007140:	7fefffff 	.word	0x7fefffff
 8007144:	080087ac 	.word	0x080087ac
 8007148:	080087a8 	.word	0x080087a8
 800714c:	080087b4 	.word	0x080087b4
 8007150:	080087b0 	.word	0x080087b0
 8007154:	080087b8 	.word	0x080087b8
 8007158:	2301      	movs	r3, #1
 800715a:	9a06      	ldr	r2, [sp, #24]
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f aecd 	beq.w	8006f02 <_printf_float+0xba>
 8007168:	f10b 0b01 	add.w	fp, fp, #1
 800716c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007170:	ebaa 0309 	sub.w	r3, sl, r9
 8007174:	455b      	cmp	r3, fp
 8007176:	dcef      	bgt.n	8007158 <_printf_float+0x310>
 8007178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800717c:	429a      	cmp	r2, r3
 800717e:	44d0      	add	r8, sl
 8007180:	db15      	blt.n	80071ae <_printf_float+0x366>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	07da      	lsls	r2, r3, #31
 8007186:	d412      	bmi.n	80071ae <_printf_float+0x366>
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800718c:	eba3 020a 	sub.w	r2, r3, sl
 8007190:	eba3 0a01 	sub.w	sl, r3, r1
 8007194:	4592      	cmp	sl, r2
 8007196:	bfa8      	it	ge
 8007198:	4692      	movge	sl, r2
 800719a:	f1ba 0f00 	cmp.w	sl, #0
 800719e:	dc0e      	bgt.n	80071be <_printf_float+0x376>
 80071a0:	f04f 0800 	mov.w	r8, #0
 80071a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071a8:	f104 091a 	add.w	r9, r4, #26
 80071ac:	e019      	b.n	80071e2 <_printf_float+0x39a>
 80071ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	d1e5      	bne.n	8007188 <_printf_float+0x340>
 80071bc:	e6a1      	b.n	8006f02 <_printf_float+0xba>
 80071be:	4653      	mov	r3, sl
 80071c0:	4642      	mov	r2, r8
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	d1e9      	bne.n	80071a0 <_printf_float+0x358>
 80071cc:	e699      	b.n	8006f02 <_printf_float+0xba>
 80071ce:	2301      	movs	r3, #1
 80071d0:	464a      	mov	r2, r9
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	f43f ae92 	beq.w	8006f02 <_printf_float+0xba>
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	eba3 030a 	sub.w	r3, r3, sl
 80071ec:	4543      	cmp	r3, r8
 80071ee:	dcee      	bgt.n	80071ce <_printf_float+0x386>
 80071f0:	e74a      	b.n	8007088 <_printf_float+0x240>
 80071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f4:	2a01      	cmp	r2, #1
 80071f6:	dc01      	bgt.n	80071fc <_printf_float+0x3b4>
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d53a      	bpl.n	8007272 <_printf_float+0x42a>
 80071fc:	2301      	movs	r3, #1
 80071fe:	4642      	mov	r2, r8
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	f43f ae7b 	beq.w	8006f02 <_printf_float+0xba>
 800720c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f108 0801 	add.w	r8, r8, #1
 800721c:	f43f ae71 	beq.w	8006f02 <_printf_float+0xba>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	2200      	movs	r2, #0
 8007224:	f103 3aff 	add.w	sl, r3, #4294967295
 8007228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800722c:	2300      	movs	r3, #0
 800722e:	f7f9 fbf7 	bl	8000a20 <__aeabi_dcmpeq>
 8007232:	b9c8      	cbnz	r0, 8007268 <_printf_float+0x420>
 8007234:	4653      	mov	r3, sl
 8007236:	4642      	mov	r2, r8
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	d10e      	bne.n	8007260 <_printf_float+0x418>
 8007242:	e65e      	b.n	8006f02 <_printf_float+0xba>
 8007244:	2301      	movs	r3, #1
 8007246:	4652      	mov	r2, sl
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f ae57 	beq.w	8006f02 <_printf_float+0xba>
 8007254:	f108 0801 	add.w	r8, r8, #1
 8007258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725a:	3b01      	subs	r3, #1
 800725c:	4543      	cmp	r3, r8
 800725e:	dcf1      	bgt.n	8007244 <_printf_float+0x3fc>
 8007260:	464b      	mov	r3, r9
 8007262:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007266:	e6de      	b.n	8007026 <_printf_float+0x1de>
 8007268:	f04f 0800 	mov.w	r8, #0
 800726c:	f104 0a1a 	add.w	sl, r4, #26
 8007270:	e7f2      	b.n	8007258 <_printf_float+0x410>
 8007272:	2301      	movs	r3, #1
 8007274:	e7df      	b.n	8007236 <_printf_float+0x3ee>
 8007276:	2301      	movs	r3, #1
 8007278:	464a      	mov	r2, r9
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f ae3e 	beq.w	8006f02 <_printf_float+0xba>
 8007286:	f108 0801 	add.w	r8, r8, #1
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	4543      	cmp	r3, r8
 8007292:	dcf0      	bgt.n	8007276 <_printf_float+0x42e>
 8007294:	e6fc      	b.n	8007090 <_printf_float+0x248>
 8007296:	f04f 0800 	mov.w	r8, #0
 800729a:	f104 0919 	add.w	r9, r4, #25
 800729e:	e7f4      	b.n	800728a <_printf_float+0x442>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	f43f ae8b 	beq.w	8006fbc <_printf_float+0x174>
 80072a6:	2300      	movs	r3, #0
 80072a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80072ac:	ab09      	add	r3, sp, #36	; 0x24
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	ec49 8b10 	vmov	d0, r8, r9
 80072b4:	6022      	str	r2, [r4, #0]
 80072b6:	f8cd a004 	str.w	sl, [sp, #4]
 80072ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072be:	4628      	mov	r0, r5
 80072c0:	f7ff fd2e 	bl	8006d20 <__cvt>
 80072c4:	4680      	mov	r8, r0
 80072c6:	e648      	b.n	8006f5a <_printf_float+0x112>

080072c8 <_printf_common>:
 80072c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	4691      	mov	r9, r2
 80072ce:	461f      	mov	r7, r3
 80072d0:	688a      	ldr	r2, [r1, #8]
 80072d2:	690b      	ldr	r3, [r1, #16]
 80072d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d8:	4293      	cmp	r3, r2
 80072da:	bfb8      	it	lt
 80072dc:	4613      	movlt	r3, r2
 80072de:	f8c9 3000 	str.w	r3, [r9]
 80072e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072e6:	4606      	mov	r6, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	b112      	cbz	r2, 80072f2 <_printf_common+0x2a>
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c9 3000 	str.w	r3, [r9]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	0699      	lsls	r1, r3, #26
 80072f6:	bf42      	ittt	mi
 80072f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072fc:	3302      	addmi	r3, #2
 80072fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007302:	6825      	ldr	r5, [r4, #0]
 8007304:	f015 0506 	ands.w	r5, r5, #6
 8007308:	d107      	bne.n	800731a <_printf_common+0x52>
 800730a:	f104 0a19 	add.w	sl, r4, #25
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	f8d9 2000 	ldr.w	r2, [r9]
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	42ab      	cmp	r3, r5
 8007318:	dc28      	bgt.n	800736c <_printf_common+0xa4>
 800731a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	3300      	adds	r3, #0
 8007322:	bf18      	it	ne
 8007324:	2301      	movne	r3, #1
 8007326:	0692      	lsls	r2, r2, #26
 8007328:	d42d      	bmi.n	8007386 <_printf_common+0xbe>
 800732a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800732e:	4639      	mov	r1, r7
 8007330:	4630      	mov	r0, r6
 8007332:	47c0      	blx	r8
 8007334:	3001      	adds	r0, #1
 8007336:	d020      	beq.n	800737a <_printf_common+0xb2>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	68e5      	ldr	r5, [r4, #12]
 800733c:	f8d9 2000 	ldr.w	r2, [r9]
 8007340:	f003 0306 	and.w	r3, r3, #6
 8007344:	2b04      	cmp	r3, #4
 8007346:	bf08      	it	eq
 8007348:	1aad      	subeq	r5, r5, r2
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	6922      	ldr	r2, [r4, #16]
 800734e:	bf0c      	ite	eq
 8007350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007354:	2500      	movne	r5, #0
 8007356:	4293      	cmp	r3, r2
 8007358:	bfc4      	itt	gt
 800735a:	1a9b      	subgt	r3, r3, r2
 800735c:	18ed      	addgt	r5, r5, r3
 800735e:	f04f 0900 	mov.w	r9, #0
 8007362:	341a      	adds	r4, #26
 8007364:	454d      	cmp	r5, r9
 8007366:	d11a      	bne.n	800739e <_printf_common+0xd6>
 8007368:	2000      	movs	r0, #0
 800736a:	e008      	b.n	800737e <_printf_common+0xb6>
 800736c:	2301      	movs	r3, #1
 800736e:	4652      	mov	r2, sl
 8007370:	4639      	mov	r1, r7
 8007372:	4630      	mov	r0, r6
 8007374:	47c0      	blx	r8
 8007376:	3001      	adds	r0, #1
 8007378:	d103      	bne.n	8007382 <_printf_common+0xba>
 800737a:	f04f 30ff 	mov.w	r0, #4294967295
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	3501      	adds	r5, #1
 8007384:	e7c3      	b.n	800730e <_printf_common+0x46>
 8007386:	18e1      	adds	r1, r4, r3
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	2030      	movs	r0, #48	; 0x30
 800738c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007390:	4422      	add	r2, r4
 8007392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739a:	3302      	adds	r3, #2
 800739c:	e7c5      	b.n	800732a <_printf_common+0x62>
 800739e:	2301      	movs	r3, #1
 80073a0:	4622      	mov	r2, r4
 80073a2:	4639      	mov	r1, r7
 80073a4:	4630      	mov	r0, r6
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d0e6      	beq.n	800737a <_printf_common+0xb2>
 80073ac:	f109 0901 	add.w	r9, r9, #1
 80073b0:	e7d8      	b.n	8007364 <_printf_common+0x9c>

080073b2 <quorem>:
 80073b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	6903      	ldr	r3, [r0, #16]
 80073b8:	690c      	ldr	r4, [r1, #16]
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	4680      	mov	r8, r0
 80073be:	f2c0 8082 	blt.w	80074c6 <quorem+0x114>
 80073c2:	3c01      	subs	r4, #1
 80073c4:	f101 0714 	add.w	r7, r1, #20
 80073c8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073cc:	f100 0614 	add.w	r6, r0, #20
 80073d0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073d4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80073d8:	eb06 030c 	add.w	r3, r6, ip
 80073dc:	3501      	adds	r5, #1
 80073de:	eb07 090c 	add.w	r9, r7, ip
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80073e8:	b395      	cbz	r5, 8007450 <quorem+0x9e>
 80073ea:	f04f 0a00 	mov.w	sl, #0
 80073ee:	4638      	mov	r0, r7
 80073f0:	46b6      	mov	lr, r6
 80073f2:	46d3      	mov	fp, sl
 80073f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80073f8:	b293      	uxth	r3, r2
 80073fa:	fb05 a303 	mla	r3, r5, r3, sl
 80073fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007402:	b29b      	uxth	r3, r3
 8007404:	ebab 0303 	sub.w	r3, fp, r3
 8007408:	0c12      	lsrs	r2, r2, #16
 800740a:	f8de b000 	ldr.w	fp, [lr]
 800740e:	fb05 a202 	mla	r2, r5, r2, sl
 8007412:	fa13 f38b 	uxtah	r3, r3, fp
 8007416:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800741a:	fa1f fb82 	uxth.w	fp, r2
 800741e:	f8de 2000 	ldr.w	r2, [lr]
 8007422:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007426:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800742a:	b29b      	uxth	r3, r3
 800742c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007430:	4581      	cmp	r9, r0
 8007432:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007436:	f84e 3b04 	str.w	r3, [lr], #4
 800743a:	d2db      	bcs.n	80073f4 <quorem+0x42>
 800743c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007440:	b933      	cbnz	r3, 8007450 <quorem+0x9e>
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	3b04      	subs	r3, #4
 8007446:	429e      	cmp	r6, r3
 8007448:	461a      	mov	r2, r3
 800744a:	d330      	bcc.n	80074ae <quorem+0xfc>
 800744c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007450:	4640      	mov	r0, r8
 8007452:	f001 f82b 	bl	80084ac <__mcmp>
 8007456:	2800      	cmp	r0, #0
 8007458:	db25      	blt.n	80074a6 <quorem+0xf4>
 800745a:	3501      	adds	r5, #1
 800745c:	4630      	mov	r0, r6
 800745e:	f04f 0c00 	mov.w	ip, #0
 8007462:	f857 2b04 	ldr.w	r2, [r7], #4
 8007466:	f8d0 e000 	ldr.w	lr, [r0]
 800746a:	b293      	uxth	r3, r2
 800746c:	ebac 0303 	sub.w	r3, ip, r3
 8007470:	0c12      	lsrs	r2, r2, #16
 8007472:	fa13 f38e 	uxtah	r3, r3, lr
 8007476:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800747a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007484:	45b9      	cmp	r9, r7
 8007486:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800748a:	f840 3b04 	str.w	r3, [r0], #4
 800748e:	d2e8      	bcs.n	8007462 <quorem+0xb0>
 8007490:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007494:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007498:	b92a      	cbnz	r2, 80074a6 <quorem+0xf4>
 800749a:	3b04      	subs	r3, #4
 800749c:	429e      	cmp	r6, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	d30b      	bcc.n	80074ba <quorem+0x108>
 80074a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80074a6:	4628      	mov	r0, r5
 80074a8:	b003      	add	sp, #12
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	3b04      	subs	r3, #4
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	d1ca      	bne.n	800744c <quorem+0x9a>
 80074b6:	3c01      	subs	r4, #1
 80074b8:	e7c5      	b.n	8007446 <quorem+0x94>
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	3b04      	subs	r3, #4
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d1ef      	bne.n	80074a2 <quorem+0xf0>
 80074c2:	3c01      	subs	r4, #1
 80074c4:	e7ea      	b.n	800749c <quorem+0xea>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e7ee      	b.n	80074a8 <quorem+0xf6>
 80074ca:	0000      	movs	r0, r0
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <_dtoa_r>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ec57 6b10 	vmov	r6, r7, d0
 80074d8:	b097      	sub	sp, #92	; 0x5c
 80074da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074dc:	9106      	str	r1, [sp, #24]
 80074de:	4604      	mov	r4, r0
 80074e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80074e2:	9312      	str	r3, [sp, #72]	; 0x48
 80074e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074e8:	e9cd 6700 	strd	r6, r7, [sp]
 80074ec:	b93d      	cbnz	r5, 80074fe <_dtoa_r+0x2e>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f000 fdb4 	bl	800805c <malloc>
 80074f4:	6260      	str	r0, [r4, #36]	; 0x24
 80074f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074fa:	6005      	str	r5, [r0, #0]
 80074fc:	60c5      	str	r5, [r0, #12]
 80074fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	b151      	cbz	r1, 800751a <_dtoa_r+0x4a>
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	604a      	str	r2, [r1, #4]
 8007508:	2301      	movs	r3, #1
 800750a:	4093      	lsls	r3, r2
 800750c:	608b      	str	r3, [r1, #8]
 800750e:	4620      	mov	r0, r4
 8007510:	f000 fdeb 	bl	80080ea <_Bfree>
 8007514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	1e3b      	subs	r3, r7, #0
 800751c:	bfbb      	ittet	lt
 800751e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007522:	9301      	strlt	r3, [sp, #4]
 8007524:	2300      	movge	r3, #0
 8007526:	2201      	movlt	r2, #1
 8007528:	bfac      	ite	ge
 800752a:	f8c8 3000 	strge.w	r3, [r8]
 800752e:	f8c8 2000 	strlt.w	r2, [r8]
 8007532:	4baf      	ldr	r3, [pc, #700]	; (80077f0 <_dtoa_r+0x320>)
 8007534:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007538:	ea33 0308 	bics.w	r3, r3, r8
 800753c:	d114      	bne.n	8007568 <_dtoa_r+0x98>
 800753e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007540:	f242 730f 	movw	r3, #9999	; 0x270f
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	b923      	cbnz	r3, 8007554 <_dtoa_r+0x84>
 800754a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800754e:	2800      	cmp	r0, #0
 8007550:	f000 8542 	beq.w	8007fd8 <_dtoa_r+0xb08>
 8007554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007556:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007804 <_dtoa_r+0x334>
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8544 	beq.w	8007fe8 <_dtoa_r+0xb18>
 8007560:	f10b 0303 	add.w	r3, fp, #3
 8007564:	f000 bd3e 	b.w	8007fe4 <_dtoa_r+0xb14>
 8007568:	e9dd 6700 	ldrd	r6, r7, [sp]
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 fa54 	bl	8000a20 <__aeabi_dcmpeq>
 8007578:	4681      	mov	r9, r0
 800757a:	b168      	cbz	r0, 8007598 <_dtoa_r+0xc8>
 800757c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800757e:	2301      	movs	r3, #1
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8524 	beq.w	8007fd2 <_dtoa_r+0xb02>
 800758a:	4b9a      	ldr	r3, [pc, #616]	; (80077f4 <_dtoa_r+0x324>)
 800758c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800758e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	f000 bd28 	b.w	8007fe8 <_dtoa_r+0xb18>
 8007598:	aa14      	add	r2, sp, #80	; 0x50
 800759a:	a915      	add	r1, sp, #84	; 0x54
 800759c:	ec47 6b10 	vmov	d0, r6, r7
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 fffa 	bl	800859a <__d2b>
 80075a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075aa:	9004      	str	r0, [sp, #16]
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	d07c      	beq.n	80076aa <_dtoa_r+0x1da>
 80075b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80075b8:	46b2      	mov	sl, r6
 80075ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80075be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80075c6:	2200      	movs	r2, #0
 80075c8:	4b8b      	ldr	r3, [pc, #556]	; (80077f8 <_dtoa_r+0x328>)
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f8 fe07 	bl	80001e0 <__aeabi_dsub>
 80075d2:	a381      	add	r3, pc, #516	; (adr r3, 80077d8 <_dtoa_r+0x308>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f8 ffba 	bl	8000550 <__aeabi_dmul>
 80075dc:	a380      	add	r3, pc, #512	; (adr r3, 80077e0 <_dtoa_r+0x310>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fdff 	bl	80001e4 <__adddf3>
 80075e6:	4606      	mov	r6, r0
 80075e8:	4628      	mov	r0, r5
 80075ea:	460f      	mov	r7, r1
 80075ec:	f7f8 ff46 	bl	800047c <__aeabi_i2d>
 80075f0:	a37d      	add	r3, pc, #500	; (adr r3, 80077e8 <_dtoa_r+0x318>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 ffab 	bl	8000550 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f8 fdef 	bl	80001e4 <__adddf3>
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	f7f9 fa51 	bl	8000ab0 <__aeabi_d2iz>
 800760e:	2200      	movs	r2, #0
 8007610:	4682      	mov	sl, r0
 8007612:	2300      	movs	r3, #0
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 fa0c 	bl	8000a34 <__aeabi_dcmplt>
 800761c:	b148      	cbz	r0, 8007632 <_dtoa_r+0x162>
 800761e:	4650      	mov	r0, sl
 8007620:	f7f8 ff2c 	bl	800047c <__aeabi_i2d>
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	f7f9 f9fa 	bl	8000a20 <__aeabi_dcmpeq>
 800762c:	b908      	cbnz	r0, 8007632 <_dtoa_r+0x162>
 800762e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007632:	f1ba 0f16 	cmp.w	sl, #22
 8007636:	d859      	bhi.n	80076ec <_dtoa_r+0x21c>
 8007638:	4970      	ldr	r1, [pc, #448]	; (80077fc <_dtoa_r+0x32c>)
 800763a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800763e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007646:	f7f9 fa13 	bl	8000a70 <__aeabi_dcmpgt>
 800764a:	2800      	cmp	r0, #0
 800764c:	d050      	beq.n	80076f0 <_dtoa_r+0x220>
 800764e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007652:	2300      	movs	r3, #0
 8007654:	930f      	str	r3, [sp, #60]	; 0x3c
 8007656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007658:	1b5d      	subs	r5, r3, r5
 800765a:	f1b5 0801 	subs.w	r8, r5, #1
 800765e:	bf49      	itett	mi
 8007660:	f1c5 0301 	rsbmi	r3, r5, #1
 8007664:	2300      	movpl	r3, #0
 8007666:	9305      	strmi	r3, [sp, #20]
 8007668:	f04f 0800 	movmi.w	r8, #0
 800766c:	bf58      	it	pl
 800766e:	9305      	strpl	r3, [sp, #20]
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	db3e      	blt.n	80076f4 <_dtoa_r+0x224>
 8007676:	2300      	movs	r3, #0
 8007678:	44d0      	add	r8, sl
 800767a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	9b06      	ldr	r3, [sp, #24]
 8007682:	2b09      	cmp	r3, #9
 8007684:	f200 8090 	bhi.w	80077a8 <_dtoa_r+0x2d8>
 8007688:	2b05      	cmp	r3, #5
 800768a:	bfc4      	itt	gt
 800768c:	3b04      	subgt	r3, #4
 800768e:	9306      	strgt	r3, [sp, #24]
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	f1a3 0302 	sub.w	r3, r3, #2
 8007696:	bfcc      	ite	gt
 8007698:	2500      	movgt	r5, #0
 800769a:	2501      	movle	r5, #1
 800769c:	2b03      	cmp	r3, #3
 800769e:	f200 808f 	bhi.w	80077c0 <_dtoa_r+0x2f0>
 80076a2:	e8df f003 	tbb	[pc, r3]
 80076a6:	7f7d      	.short	0x7f7d
 80076a8:	7131      	.short	0x7131
 80076aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80076ae:	441d      	add	r5, r3
 80076b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076b4:	2820      	cmp	r0, #32
 80076b6:	dd13      	ble.n	80076e0 <_dtoa_r+0x210>
 80076b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	fa08 f800 	lsl.w	r8, r8, r0
 80076c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076c6:	fa23 f000 	lsr.w	r0, r3, r0
 80076ca:	ea48 0000 	orr.w	r0, r8, r0
 80076ce:	f7f8 fec5 	bl	800045c <__aeabi_ui2d>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4682      	mov	sl, r0
 80076d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80076da:	3d01      	subs	r5, #1
 80076dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80076de:	e772      	b.n	80075c6 <_dtoa_r+0xf6>
 80076e0:	9b00      	ldr	r3, [sp, #0]
 80076e2:	f1c0 0020 	rsb	r0, r0, #32
 80076e6:	fa03 f000 	lsl.w	r0, r3, r0
 80076ea:	e7f0      	b.n	80076ce <_dtoa_r+0x1fe>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e7b1      	b.n	8007654 <_dtoa_r+0x184>
 80076f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80076f2:	e7b0      	b.n	8007656 <_dtoa_r+0x186>
 80076f4:	9b05      	ldr	r3, [sp, #20]
 80076f6:	eba3 030a 	sub.w	r3, r3, sl
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	f1ca 0300 	rsb	r3, sl, #0
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	2300      	movs	r3, #0
 8007704:	930e      	str	r3, [sp, #56]	; 0x38
 8007706:	e7bb      	b.n	8007680 <_dtoa_r+0x1b0>
 8007708:	2301      	movs	r3, #1
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
 800770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd59      	ble.n	80077c6 <_dtoa_r+0x2f6>
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	4699      	mov	r9, r3
 8007716:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007718:	2200      	movs	r2, #0
 800771a:	6072      	str	r2, [r6, #4]
 800771c:	2204      	movs	r2, #4
 800771e:	f102 0014 	add.w	r0, r2, #20
 8007722:	4298      	cmp	r0, r3
 8007724:	6871      	ldr	r1, [r6, #4]
 8007726:	d953      	bls.n	80077d0 <_dtoa_r+0x300>
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fcaa 	bl	8008082 <_Balloc>
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	f1b9 0f0e 	cmp.w	r9, #14
 8007736:	f8d3 b000 	ldr.w	fp, [r3]
 800773a:	f200 80e6 	bhi.w	800790a <_dtoa_r+0x43a>
 800773e:	2d00      	cmp	r5, #0
 8007740:	f000 80e3 	beq.w	800790a <_dtoa_r+0x43a>
 8007744:	ed9d 7b00 	vldr	d7, [sp]
 8007748:	f1ba 0f00 	cmp.w	sl, #0
 800774c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007750:	dd74      	ble.n	800783c <_dtoa_r+0x36c>
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <_dtoa_r+0x32c>)
 8007754:	f00a 030f 	and.w	r3, sl, #15
 8007758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800775c:	ed93 7b00 	vldr	d7, [r3]
 8007760:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007764:	06f0      	lsls	r0, r6, #27
 8007766:	ed8d 7b08 	vstr	d7, [sp, #32]
 800776a:	d565      	bpl.n	8007838 <_dtoa_r+0x368>
 800776c:	4b24      	ldr	r3, [pc, #144]	; (8007800 <_dtoa_r+0x330>)
 800776e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007776:	f7f9 f815 	bl	80007a4 <__aeabi_ddiv>
 800777a:	e9cd 0100 	strd	r0, r1, [sp]
 800777e:	f006 060f 	and.w	r6, r6, #15
 8007782:	2503      	movs	r5, #3
 8007784:	4f1e      	ldr	r7, [pc, #120]	; (8007800 <_dtoa_r+0x330>)
 8007786:	e04c      	b.n	8007822 <_dtoa_r+0x352>
 8007788:	2301      	movs	r3, #1
 800778a:	930a      	str	r3, [sp, #40]	; 0x28
 800778c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778e:	4453      	add	r3, sl
 8007790:	f103 0901 	add.w	r9, r3, #1
 8007794:	9302      	str	r3, [sp, #8]
 8007796:	464b      	mov	r3, r9
 8007798:	2b01      	cmp	r3, #1
 800779a:	bfb8      	it	lt
 800779c:	2301      	movlt	r3, #1
 800779e:	e7ba      	b.n	8007716 <_dtoa_r+0x246>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e7b2      	b.n	800770a <_dtoa_r+0x23a>
 80077a4:	2300      	movs	r3, #0
 80077a6:	e7f0      	b.n	800778a <_dtoa_r+0x2ba>
 80077a8:	2501      	movs	r5, #1
 80077aa:	2300      	movs	r3, #0
 80077ac:	9306      	str	r3, [sp, #24]
 80077ae:	950a      	str	r5, [sp, #40]	; 0x28
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	4699      	mov	r9, r3
 80077b8:	2200      	movs	r2, #0
 80077ba:	2312      	movs	r3, #18
 80077bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80077be:	e7aa      	b.n	8007716 <_dtoa_r+0x246>
 80077c0:	2301      	movs	r3, #1
 80077c2:	930a      	str	r3, [sp, #40]	; 0x28
 80077c4:	e7f4      	b.n	80077b0 <_dtoa_r+0x2e0>
 80077c6:	2301      	movs	r3, #1
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	4699      	mov	r9, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	e7f5      	b.n	80077bc <_dtoa_r+0x2ec>
 80077d0:	3101      	adds	r1, #1
 80077d2:	6071      	str	r1, [r6, #4]
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	e7a2      	b.n	800771e <_dtoa_r+0x24e>
 80077d8:	636f4361 	.word	0x636f4361
 80077dc:	3fd287a7 	.word	0x3fd287a7
 80077e0:	8b60c8b3 	.word	0x8b60c8b3
 80077e4:	3fc68a28 	.word	0x3fc68a28
 80077e8:	509f79fb 	.word	0x509f79fb
 80077ec:	3fd34413 	.word	0x3fd34413
 80077f0:	7ff00000 	.word	0x7ff00000
 80077f4:	080087b9 	.word	0x080087b9
 80077f8:	3ff80000 	.word	0x3ff80000
 80077fc:	080087f0 	.word	0x080087f0
 8007800:	080087c8 	.word	0x080087c8
 8007804:	080087c3 	.word	0x080087c3
 8007808:	07f1      	lsls	r1, r6, #31
 800780a:	d508      	bpl.n	800781e <_dtoa_r+0x34e>
 800780c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007814:	f7f8 fe9c 	bl	8000550 <__aeabi_dmul>
 8007818:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800781c:	3501      	adds	r5, #1
 800781e:	1076      	asrs	r6, r6, #1
 8007820:	3708      	adds	r7, #8
 8007822:	2e00      	cmp	r6, #0
 8007824:	d1f0      	bne.n	8007808 <_dtoa_r+0x338>
 8007826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800782a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800782e:	f7f8 ffb9 	bl	80007a4 <__aeabi_ddiv>
 8007832:	e9cd 0100 	strd	r0, r1, [sp]
 8007836:	e01a      	b.n	800786e <_dtoa_r+0x39e>
 8007838:	2502      	movs	r5, #2
 800783a:	e7a3      	b.n	8007784 <_dtoa_r+0x2b4>
 800783c:	f000 80a0 	beq.w	8007980 <_dtoa_r+0x4b0>
 8007840:	f1ca 0600 	rsb	r6, sl, #0
 8007844:	4b9f      	ldr	r3, [pc, #636]	; (8007ac4 <_dtoa_r+0x5f4>)
 8007846:	4fa0      	ldr	r7, [pc, #640]	; (8007ac8 <_dtoa_r+0x5f8>)
 8007848:	f006 020f 	and.w	r2, r6, #15
 800784c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007858:	f7f8 fe7a 	bl	8000550 <__aeabi_dmul>
 800785c:	e9cd 0100 	strd	r0, r1, [sp]
 8007860:	1136      	asrs	r6, r6, #4
 8007862:	2300      	movs	r3, #0
 8007864:	2502      	movs	r5, #2
 8007866:	2e00      	cmp	r6, #0
 8007868:	d17f      	bne.n	800796a <_dtoa_r+0x49a>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e1      	bne.n	8007832 <_dtoa_r+0x362>
 800786e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8087 	beq.w	8007984 <_dtoa_r+0x4b4>
 8007876:	e9dd 6700 	ldrd	r6, r7, [sp]
 800787a:	2200      	movs	r2, #0
 800787c:	4b93      	ldr	r3, [pc, #588]	; (8007acc <_dtoa_r+0x5fc>)
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f9 f8d7 	bl	8000a34 <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	d07c      	beq.n	8007984 <_dtoa_r+0x4b4>
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d079      	beq.n	8007984 <_dtoa_r+0x4b4>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd35      	ble.n	8007902 <_dtoa_r+0x432>
 8007896:	f10a 33ff 	add.w	r3, sl, #4294967295
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	4639      	mov	r1, r7
 800789e:	2200      	movs	r2, #0
 80078a0:	4b8b      	ldr	r3, [pc, #556]	; (8007ad0 <_dtoa_r+0x600>)
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7f8 fe54 	bl	8000550 <__aeabi_dmul>
 80078a8:	e9cd 0100 	strd	r0, r1, [sp]
 80078ac:	9f02      	ldr	r7, [sp, #8]
 80078ae:	3501      	adds	r5, #1
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7f8 fde3 	bl	800047c <__aeabi_i2d>
 80078b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ba:	f7f8 fe49 	bl	8000550 <__aeabi_dmul>
 80078be:	2200      	movs	r2, #0
 80078c0:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <_dtoa_r+0x604>)
 80078c2:	f7f8 fc8f 	bl	80001e4 <__adddf3>
 80078c6:	4605      	mov	r5, r0
 80078c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078cc:	2f00      	cmp	r7, #0
 80078ce:	d15d      	bne.n	800798c <_dtoa_r+0x4bc>
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b81      	ldr	r3, [pc, #516]	; (8007ad8 <_dtoa_r+0x608>)
 80078d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d8:	f7f8 fc82 	bl	80001e0 <__aeabi_dsub>
 80078dc:	462a      	mov	r2, r5
 80078de:	4633      	mov	r3, r6
 80078e0:	e9cd 0100 	strd	r0, r1, [sp]
 80078e4:	f7f9 f8c4 	bl	8000a70 <__aeabi_dcmpgt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f040 8288 	bne.w	8007dfe <_dtoa_r+0x92e>
 80078ee:	462a      	mov	r2, r5
 80078f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f8:	f7f9 f89c 	bl	8000a34 <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 827c 	bne.w	8007dfa <_dtoa_r+0x92a>
 8007902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007906:	e9cd 2300 	strd	r2, r3, [sp]
 800790a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	f2c0 8150 	blt.w	8007bb2 <_dtoa_r+0x6e2>
 8007912:	f1ba 0f0e 	cmp.w	sl, #14
 8007916:	f300 814c 	bgt.w	8007bb2 <_dtoa_r+0x6e2>
 800791a:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <_dtoa_r+0x5f4>)
 800791c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007920:	ed93 7b00 	vldr	d7, [r3]
 8007924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800792c:	f280 80d8 	bge.w	8007ae0 <_dtoa_r+0x610>
 8007930:	f1b9 0f00 	cmp.w	r9, #0
 8007934:	f300 80d4 	bgt.w	8007ae0 <_dtoa_r+0x610>
 8007938:	f040 825e 	bne.w	8007df8 <_dtoa_r+0x928>
 800793c:	2200      	movs	r2, #0
 800793e:	4b66      	ldr	r3, [pc, #408]	; (8007ad8 <_dtoa_r+0x608>)
 8007940:	ec51 0b17 	vmov	r0, r1, d7
 8007944:	f7f8 fe04 	bl	8000550 <__aeabi_dmul>
 8007948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794c:	f7f9 f886 	bl	8000a5c <__aeabi_dcmpge>
 8007950:	464f      	mov	r7, r9
 8007952:	464e      	mov	r6, r9
 8007954:	2800      	cmp	r0, #0
 8007956:	f040 8234 	bne.w	8007dc2 <_dtoa_r+0x8f2>
 800795a:	2331      	movs	r3, #49	; 0x31
 800795c:	f10b 0501 	add.w	r5, fp, #1
 8007960:	f88b 3000 	strb.w	r3, [fp]
 8007964:	f10a 0a01 	add.w	sl, sl, #1
 8007968:	e22f      	b.n	8007dca <_dtoa_r+0x8fa>
 800796a:	07f2      	lsls	r2, r6, #31
 800796c:	d505      	bpl.n	800797a <_dtoa_r+0x4aa>
 800796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007972:	f7f8 fded 	bl	8000550 <__aeabi_dmul>
 8007976:	3501      	adds	r5, #1
 8007978:	2301      	movs	r3, #1
 800797a:	1076      	asrs	r6, r6, #1
 800797c:	3708      	adds	r7, #8
 800797e:	e772      	b.n	8007866 <_dtoa_r+0x396>
 8007980:	2502      	movs	r5, #2
 8007982:	e774      	b.n	800786e <_dtoa_r+0x39e>
 8007984:	f8cd a020 	str.w	sl, [sp, #32]
 8007988:	464f      	mov	r7, r9
 800798a:	e791      	b.n	80078b0 <_dtoa_r+0x3e0>
 800798c:	4b4d      	ldr	r3, [pc, #308]	; (8007ac4 <_dtoa_r+0x5f4>)
 800798e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007992:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d047      	beq.n	8007a2c <_dtoa_r+0x55c>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	2000      	movs	r0, #0
 80079a2:	494e      	ldr	r1, [pc, #312]	; (8007adc <_dtoa_r+0x60c>)
 80079a4:	f7f8 fefe 	bl	80007a4 <__aeabi_ddiv>
 80079a8:	462a      	mov	r2, r5
 80079aa:	4633      	mov	r3, r6
 80079ac:	f7f8 fc18 	bl	80001e0 <__aeabi_dsub>
 80079b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80079b4:	465d      	mov	r5, fp
 80079b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ba:	f7f9 f879 	bl	8000ab0 <__aeabi_d2iz>
 80079be:	4606      	mov	r6, r0
 80079c0:	f7f8 fd5c 	bl	800047c <__aeabi_i2d>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079cc:	f7f8 fc08 	bl	80001e0 <__aeabi_dsub>
 80079d0:	3630      	adds	r6, #48	; 0x30
 80079d2:	f805 6b01 	strb.w	r6, [r5], #1
 80079d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079da:	e9cd 0100 	strd	r0, r1, [sp]
 80079de:	f7f9 f829 	bl	8000a34 <__aeabi_dcmplt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d163      	bne.n	8007aae <_dtoa_r+0x5de>
 80079e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ea:	2000      	movs	r0, #0
 80079ec:	4937      	ldr	r1, [pc, #220]	; (8007acc <_dtoa_r+0x5fc>)
 80079ee:	f7f8 fbf7 	bl	80001e0 <__aeabi_dsub>
 80079f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079f6:	f7f9 f81d 	bl	8000a34 <__aeabi_dcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f040 80b7 	bne.w	8007b6e <_dtoa_r+0x69e>
 8007a00:	eba5 030b 	sub.w	r3, r5, fp
 8007a04:	429f      	cmp	r7, r3
 8007a06:	f77f af7c 	ble.w	8007902 <_dtoa_r+0x432>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <_dtoa_r+0x600>)
 8007a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a12:	f7f8 fd9d 	bl	8000550 <__aeabi_dmul>
 8007a16:	2200      	movs	r2, #0
 8007a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <_dtoa_r+0x600>)
 8007a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a22:	f7f8 fd95 	bl	8000550 <__aeabi_dmul>
 8007a26:	e9cd 0100 	strd	r0, r1, [sp]
 8007a2a:	e7c4      	b.n	80079b6 <_dtoa_r+0x4e6>
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	4633      	mov	r3, r6
 8007a30:	f7f8 fd8e 	bl	8000550 <__aeabi_dmul>
 8007a34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a38:	eb0b 0507 	add.w	r5, fp, r7
 8007a3c:	465e      	mov	r6, fp
 8007a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a42:	f7f9 f835 	bl	8000ab0 <__aeabi_d2iz>
 8007a46:	4607      	mov	r7, r0
 8007a48:	f7f8 fd18 	bl	800047c <__aeabi_i2d>
 8007a4c:	3730      	adds	r7, #48	; 0x30
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a56:	f7f8 fbc3 	bl	80001e0 <__aeabi_dsub>
 8007a5a:	f806 7b01 	strb.w	r7, [r6], #1
 8007a5e:	42ae      	cmp	r6, r5
 8007a60:	e9cd 0100 	strd	r0, r1, [sp]
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	d126      	bne.n	8007ab8 <_dtoa_r+0x5e8>
 8007a6a:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <_dtoa_r+0x60c>)
 8007a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a70:	f7f8 fbb8 	bl	80001e4 <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7c:	f7f8 fff8 	bl	8000a70 <__aeabi_dcmpgt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d174      	bne.n	8007b6e <_dtoa_r+0x69e>
 8007a84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a88:	2000      	movs	r0, #0
 8007a8a:	4914      	ldr	r1, [pc, #80]	; (8007adc <_dtoa_r+0x60c>)
 8007a8c:	f7f8 fba8 	bl	80001e0 <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a98:	f7f8 ffcc 	bl	8000a34 <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af30 	beq.w	8007902 <_dtoa_r+0x432>
 8007aa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aa6:	2b30      	cmp	r3, #48	; 0x30
 8007aa8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007aac:	d002      	beq.n	8007ab4 <_dtoa_r+0x5e4>
 8007aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ab2:	e04a      	b.n	8007b4a <_dtoa_r+0x67a>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	e7f4      	b.n	8007aa2 <_dtoa_r+0x5d2>
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <_dtoa_r+0x600>)
 8007aba:	f7f8 fd49 	bl	8000550 <__aeabi_dmul>
 8007abe:	e9cd 0100 	strd	r0, r1, [sp]
 8007ac2:	e7bc      	b.n	8007a3e <_dtoa_r+0x56e>
 8007ac4:	080087f0 	.word	0x080087f0
 8007ac8:	080087c8 	.word	0x080087c8
 8007acc:	3ff00000 	.word	0x3ff00000
 8007ad0:	40240000 	.word	0x40240000
 8007ad4:	401c0000 	.word	0x401c0000
 8007ad8:	40140000 	.word	0x40140000
 8007adc:	3fe00000 	.word	0x3fe00000
 8007ae0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ae4:	465d      	mov	r5, fp
 8007ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fe59 	bl	80007a4 <__aeabi_ddiv>
 8007af2:	f7f8 ffdd 	bl	8000ab0 <__aeabi_d2iz>
 8007af6:	4680      	mov	r8, r0
 8007af8:	f7f8 fcc0 	bl	800047c <__aeabi_i2d>
 8007afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b00:	f7f8 fd26 	bl	8000550 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b10:	f7f8 fb66 	bl	80001e0 <__aeabi_dsub>
 8007b14:	f805 6b01 	strb.w	r6, [r5], #1
 8007b18:	eba5 060b 	sub.w	r6, r5, fp
 8007b1c:	45b1      	cmp	r9, r6
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	d139      	bne.n	8007b98 <_dtoa_r+0x6c8>
 8007b24:	f7f8 fb5e 	bl	80001e4 <__adddf3>
 8007b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f7f8 ff9e 	bl	8000a70 <__aeabi_dcmpgt>
 8007b34:	b9c8      	cbnz	r0, 8007b6a <_dtoa_r+0x69a>
 8007b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 ff6f 	bl	8000a20 <__aeabi_dcmpeq>
 8007b42:	b110      	cbz	r0, 8007b4a <_dtoa_r+0x67a>
 8007b44:	f018 0f01 	tst.w	r8, #1
 8007b48:	d10f      	bne.n	8007b6a <_dtoa_r+0x69a>
 8007b4a:	9904      	ldr	r1, [sp, #16]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 facc 	bl	80080ea <_Bfree>
 8007b52:	2300      	movs	r3, #0
 8007b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b56:	702b      	strb	r3, [r5, #0]
 8007b58:	f10a 0301 	add.w	r3, sl, #1
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8241 	beq.w	8007fe8 <_dtoa_r+0xb18>
 8007b66:	601d      	str	r5, [r3, #0]
 8007b68:	e23e      	b.n	8007fe8 <_dtoa_r+0xb18>
 8007b6a:	f8cd a020 	str.w	sl, [sp, #32]
 8007b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b72:	2a39      	cmp	r2, #57	; 0x39
 8007b74:	f105 33ff 	add.w	r3, r5, #4294967295
 8007b78:	d108      	bne.n	8007b8c <_dtoa_r+0x6bc>
 8007b7a:	459b      	cmp	fp, r3
 8007b7c:	d10a      	bne.n	8007b94 <_dtoa_r+0x6c4>
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	3301      	adds	r3, #1
 8007b82:	9308      	str	r3, [sp, #32]
 8007b84:	2330      	movs	r3, #48	; 0x30
 8007b86:	f88b 3000 	strb.w	r3, [fp]
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	3201      	adds	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e78c      	b.n	8007aae <_dtoa_r+0x5de>
 8007b94:	461d      	mov	r5, r3
 8007b96:	e7ea      	b.n	8007b6e <_dtoa_r+0x69e>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b9b      	ldr	r3, [pc, #620]	; (8007e08 <_dtoa_r+0x938>)
 8007b9c:	f7f8 fcd8 	bl	8000550 <__aeabi_dmul>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	f7f8 ff3a 	bl	8000a20 <__aeabi_dcmpeq>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d09a      	beq.n	8007ae6 <_dtoa_r+0x616>
 8007bb0:	e7cb      	b.n	8007b4a <_dtoa_r+0x67a>
 8007bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	f000 808b 	beq.w	8007cd0 <_dtoa_r+0x800>
 8007bba:	9a06      	ldr	r2, [sp, #24]
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	dc6e      	bgt.n	8007c9e <_dtoa_r+0x7ce>
 8007bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d067      	beq.n	8007c96 <_dtoa_r+0x7c6>
 8007bc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bca:	9f07      	ldr	r7, [sp, #28]
 8007bcc:	9d05      	ldr	r5, [sp, #20]
 8007bce:	9a05      	ldr	r2, [sp, #20]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	441a      	add	r2, r3
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	9205      	str	r2, [sp, #20]
 8007bd8:	4498      	add	r8, r3
 8007bda:	f000 fb26 	bl	800822a <__i2b>
 8007bde:	4606      	mov	r6, r0
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	dd0c      	ble.n	8007bfe <_dtoa_r+0x72e>
 8007be4:	f1b8 0f00 	cmp.w	r8, #0
 8007be8:	dd09      	ble.n	8007bfe <_dtoa_r+0x72e>
 8007bea:	4545      	cmp	r5, r8
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	462b      	mov	r3, r5
 8007bf0:	bfa8      	it	ge
 8007bf2:	4643      	movge	r3, r8
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	9205      	str	r2, [sp, #20]
 8007bf8:	1aed      	subs	r5, r5, r3
 8007bfa:	eba8 0803 	sub.w	r8, r8, r3
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	b1eb      	cbz	r3, 8007c3e <_dtoa_r+0x76e>
 8007c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d067      	beq.n	8007cd8 <_dtoa_r+0x808>
 8007c08:	b18f      	cbz	r7, 8007c2e <_dtoa_r+0x75e>
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fbaa 	bl	8008368 <__pow5mult>
 8007c14:	9a04      	ldr	r2, [sp, #16]
 8007c16:	4601      	mov	r1, r0
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fb0e 	bl	800823c <__multiply>
 8007c20:	9904      	ldr	r1, [sp, #16]
 8007c22:	9008      	str	r0, [sp, #32]
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fa60 	bl	80080ea <_Bfree>
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	1bda      	subs	r2, r3, r7
 8007c32:	d004      	beq.n	8007c3e <_dtoa_r+0x76e>
 8007c34:	9904      	ldr	r1, [sp, #16]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fb96 	bl	8008368 <__pow5mult>
 8007c3c:	9004      	str	r0, [sp, #16]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 faf2 	bl	800822a <__i2b>
 8007c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c48:	4607      	mov	r7, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 81d0 	beq.w	8007ff0 <_dtoa_r+0xb20>
 8007c50:	461a      	mov	r2, r3
 8007c52:	4601      	mov	r1, r0
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fb87 	bl	8008368 <__pow5mult>
 8007c5a:	9b06      	ldr	r3, [sp, #24]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	4607      	mov	r7, r0
 8007c60:	dc40      	bgt.n	8007ce4 <_dtoa_r+0x814>
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d139      	bne.n	8007cdc <_dtoa_r+0x80c>
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d136      	bne.n	8007ce0 <_dtoa_r+0x810>
 8007c72:	9b01      	ldr	r3, [sp, #4]
 8007c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	051b      	lsls	r3, r3, #20
 8007c7c:	b12b      	cbz	r3, 8007c8a <_dtoa_r+0x7ba>
 8007c7e:	9b05      	ldr	r3, [sp, #20]
 8007c80:	3301      	adds	r3, #1
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	f108 0801 	add.w	r8, r8, #1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d12a      	bne.n	8007ce8 <_dtoa_r+0x818>
 8007c92:	2001      	movs	r0, #1
 8007c94:	e030      	b.n	8007cf8 <_dtoa_r+0x828>
 8007c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c9c:	e795      	b.n	8007bca <_dtoa_r+0x6fa>
 8007c9e:	9b07      	ldr	r3, [sp, #28]
 8007ca0:	f109 37ff 	add.w	r7, r9, #4294967295
 8007ca4:	42bb      	cmp	r3, r7
 8007ca6:	bfbf      	itttt	lt
 8007ca8:	9b07      	ldrlt	r3, [sp, #28]
 8007caa:	9707      	strlt	r7, [sp, #28]
 8007cac:	1afa      	sublt	r2, r7, r3
 8007cae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007cb0:	bfbb      	ittet	lt
 8007cb2:	189b      	addlt	r3, r3, r2
 8007cb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cb6:	1bdf      	subge	r7, r3, r7
 8007cb8:	2700      	movlt	r7, #0
 8007cba:	f1b9 0f00 	cmp.w	r9, #0
 8007cbe:	bfb5      	itete	lt
 8007cc0:	9b05      	ldrlt	r3, [sp, #20]
 8007cc2:	9d05      	ldrge	r5, [sp, #20]
 8007cc4:	eba3 0509 	sublt.w	r5, r3, r9
 8007cc8:	464b      	movge	r3, r9
 8007cca:	bfb8      	it	lt
 8007ccc:	2300      	movlt	r3, #0
 8007cce:	e77e      	b.n	8007bce <_dtoa_r+0x6fe>
 8007cd0:	9f07      	ldr	r7, [sp, #28]
 8007cd2:	9d05      	ldr	r5, [sp, #20]
 8007cd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007cd6:	e783      	b.n	8007be0 <_dtoa_r+0x710>
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	e7ab      	b.n	8007c34 <_dtoa_r+0x764>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e7d4      	b.n	8007c8a <_dtoa_r+0x7ba>
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	e7d2      	b.n	8007c8a <_dtoa_r+0x7ba>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9307      	str	r3, [sp, #28]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007cee:	6918      	ldr	r0, [r3, #16]
 8007cf0:	f000 fa4d 	bl	800818e <__hi0bits>
 8007cf4:	f1c0 0020 	rsb	r0, r0, #32
 8007cf8:	4440      	add	r0, r8
 8007cfa:	f010 001f 	ands.w	r0, r0, #31
 8007cfe:	d047      	beq.n	8007d90 <_dtoa_r+0x8c0>
 8007d00:	f1c0 0320 	rsb	r3, r0, #32
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	dd3b      	ble.n	8007d80 <_dtoa_r+0x8b0>
 8007d08:	9b05      	ldr	r3, [sp, #20]
 8007d0a:	f1c0 001c 	rsb	r0, r0, #28
 8007d0e:	4403      	add	r3, r0
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	4405      	add	r5, r0
 8007d14:	4480      	add	r8, r0
 8007d16:	9b05      	ldr	r3, [sp, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd05      	ble.n	8007d28 <_dtoa_r+0x858>
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	9904      	ldr	r1, [sp, #16]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fb6f 	bl	8008404 <__lshift>
 8007d26:	9004      	str	r0, [sp, #16]
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	dd05      	ble.n	8007d3a <_dtoa_r+0x86a>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4642      	mov	r2, r8
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 fb66 	bl	8008404 <__lshift>
 8007d38:	4607      	mov	r7, r0
 8007d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d3c:	b353      	cbz	r3, 8007d94 <_dtoa_r+0x8c4>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	9804      	ldr	r0, [sp, #16]
 8007d42:	f000 fbb3 	bl	80084ac <__mcmp>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	da24      	bge.n	8007d94 <_dtoa_r+0x8c4>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	9904      	ldr	r1, [sp, #16]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 f9e1 	bl	8008118 <__multadd>
 8007d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d58:	9004      	str	r0, [sp, #16]
 8007d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 814d 	beq.w	8007ffe <_dtoa_r+0xb2e>
 8007d64:	2300      	movs	r3, #0
 8007d66:	4631      	mov	r1, r6
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f9d4 	bl	8008118 <__multadd>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	dc4f      	bgt.n	8007e18 <_dtoa_r+0x948>
 8007d78:	9b06      	ldr	r3, [sp, #24]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	dd4c      	ble.n	8007e18 <_dtoa_r+0x948>
 8007d7e:	e011      	b.n	8007da4 <_dtoa_r+0x8d4>
 8007d80:	d0c9      	beq.n	8007d16 <_dtoa_r+0x846>
 8007d82:	9a05      	ldr	r2, [sp, #20]
 8007d84:	331c      	adds	r3, #28
 8007d86:	441a      	add	r2, r3
 8007d88:	9205      	str	r2, [sp, #20]
 8007d8a:	441d      	add	r5, r3
 8007d8c:	4498      	add	r8, r3
 8007d8e:	e7c2      	b.n	8007d16 <_dtoa_r+0x846>
 8007d90:	4603      	mov	r3, r0
 8007d92:	e7f6      	b.n	8007d82 <_dtoa_r+0x8b2>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	dc38      	bgt.n	8007e0c <_dtoa_r+0x93c>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	dd35      	ble.n	8007e0c <_dtoa_r+0x93c>
 8007da0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	b963      	cbnz	r3, 8007dc2 <_dtoa_r+0x8f2>
 8007da8:	4639      	mov	r1, r7
 8007daa:	2205      	movs	r2, #5
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 f9b3 	bl	8008118 <__multadd>
 8007db2:	4601      	mov	r1, r0
 8007db4:	4607      	mov	r7, r0
 8007db6:	9804      	ldr	r0, [sp, #16]
 8007db8:	f000 fb78 	bl	80084ac <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f73f adcc 	bgt.w	800795a <_dtoa_r+0x48a>
 8007dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc4:	465d      	mov	r5, fp
 8007dc6:	ea6f 0a03 	mvn.w	sl, r3
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 f98a 	bl	80080ea <_Bfree>
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	f43f aeb7 	beq.w	8007b4a <_dtoa_r+0x67a>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d005      	beq.n	8007dee <_dtoa_r+0x91e>
 8007de2:	45b1      	cmp	r9, r6
 8007de4:	d003      	beq.n	8007dee <_dtoa_r+0x91e>
 8007de6:	4649      	mov	r1, r9
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 f97e 	bl	80080ea <_Bfree>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f97a 	bl	80080ea <_Bfree>
 8007df6:	e6a8      	b.n	8007b4a <_dtoa_r+0x67a>
 8007df8:	2700      	movs	r7, #0
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	e7e1      	b.n	8007dc2 <_dtoa_r+0x8f2>
 8007dfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e02:	463e      	mov	r6, r7
 8007e04:	e5a9      	b.n	800795a <_dtoa_r+0x48a>
 8007e06:	bf00      	nop
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80fa 	beq.w	800800c <_dtoa_r+0xb3c>
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x958>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	462a      	mov	r2, r5
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 faef 	bl	8008404 <__lshift>
 8007e26:	4606      	mov	r6, r0
 8007e28:	9b07      	ldr	r3, [sp, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d04c      	beq.n	8007ec8 <_dtoa_r+0x9f8>
 8007e2e:	6871      	ldr	r1, [r6, #4]
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 f926 	bl	8008082 <_Balloc>
 8007e36:	6932      	ldr	r2, [r6, #16]
 8007e38:	3202      	adds	r2, #2
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	0092      	lsls	r2, r2, #2
 8007e3e:	f106 010c 	add.w	r1, r6, #12
 8007e42:	300c      	adds	r0, #12
 8007e44:	f000 f912 	bl	800806c <memcpy>
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fad9 	bl	8008404 <__lshift>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	f8cd b014 	str.w	fp, [sp, #20]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	46b1      	mov	r9, r6
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	4606      	mov	r6, r0
 8007e62:	4639      	mov	r1, r7
 8007e64:	9804      	ldr	r0, [sp, #16]
 8007e66:	f7ff faa4 	bl	80073b2 <quorem>
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e72:	9804      	ldr	r0, [sp, #16]
 8007e74:	f000 fb1a 	bl	80084ac <__mcmp>
 8007e78:	4632      	mov	r2, r6
 8007e7a:	9000      	str	r0, [sp, #0]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 fb2e 	bl	80084e0 <__mdiff>
 8007e84:	68c3      	ldr	r3, [r0, #12]
 8007e86:	4602      	mov	r2, r0
 8007e88:	bb03      	cbnz	r3, 8007ecc <_dtoa_r+0x9fc>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	9008      	str	r0, [sp, #32]
 8007e8e:	9804      	ldr	r0, [sp, #16]
 8007e90:	f000 fb0c 	bl	80084ac <__mcmp>
 8007e94:	9a08      	ldr	r2, [sp, #32]
 8007e96:	4603      	mov	r3, r0
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	9308      	str	r3, [sp, #32]
 8007e9e:	f000 f924 	bl	80080ea <_Bfree>
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	b9a3      	cbnz	r3, 8007ed0 <_dtoa_r+0xa00>
 8007ea6:	9a06      	ldr	r2, [sp, #24]
 8007ea8:	b992      	cbnz	r2, 8007ed0 <_dtoa_r+0xa00>
 8007eaa:	9a07      	ldr	r2, [sp, #28]
 8007eac:	b982      	cbnz	r2, 8007ed0 <_dtoa_r+0xa00>
 8007eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eb2:	d029      	beq.n	8007f08 <_dtoa_r+0xa38>
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd01      	ble.n	8007ebe <_dtoa_r+0x9ee>
 8007eba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ebe:	9b05      	ldr	r3, [sp, #20]
 8007ec0:	1c5d      	adds	r5, r3, #1
 8007ec2:	f883 8000 	strb.w	r8, [r3]
 8007ec6:	e782      	b.n	8007dce <_dtoa_r+0x8fe>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	e7c2      	b.n	8007e52 <_dtoa_r+0x982>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7e3      	b.n	8007e98 <_dtoa_r+0x9c8>
 8007ed0:	9a00      	ldr	r2, [sp, #0]
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	db04      	blt.n	8007ee0 <_dtoa_r+0xa10>
 8007ed6:	d125      	bne.n	8007f24 <_dtoa_r+0xa54>
 8007ed8:	9a06      	ldr	r2, [sp, #24]
 8007eda:	bb1a      	cbnz	r2, 8007f24 <_dtoa_r+0xa54>
 8007edc:	9a07      	ldr	r2, [sp, #28]
 8007ede:	bb0a      	cbnz	r2, 8007f24 <_dtoa_r+0xa54>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	ddec      	ble.n	8007ebe <_dtoa_r+0x9ee>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	9904      	ldr	r1, [sp, #16]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fa8b 	bl	8008404 <__lshift>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	9004      	str	r0, [sp, #16]
 8007ef2:	f000 fadb 	bl	80084ac <__mcmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	dc03      	bgt.n	8007f02 <_dtoa_r+0xa32>
 8007efa:	d1e0      	bne.n	8007ebe <_dtoa_r+0x9ee>
 8007efc:	f018 0f01 	tst.w	r8, #1
 8007f00:	d0dd      	beq.n	8007ebe <_dtoa_r+0x9ee>
 8007f02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f06:	d1d8      	bne.n	8007eba <_dtoa_r+0x9ea>
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	1c5d      	adds	r5, r3, #1
 8007f0e:	2339      	movs	r3, #57	; 0x39
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f16:	2b39      	cmp	r3, #57	; 0x39
 8007f18:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f1c:	d04f      	beq.n	8007fbe <_dtoa_r+0xaee>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	7013      	strb	r3, [r2, #0]
 8007f22:	e754      	b.n	8007dce <_dtoa_r+0x8fe>
 8007f24:	9a05      	ldr	r2, [sp, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f102 0501 	add.w	r5, r2, #1
 8007f2c:	dd06      	ble.n	8007f3c <_dtoa_r+0xa6c>
 8007f2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f32:	d0e9      	beq.n	8007f08 <_dtoa_r+0xa38>
 8007f34:	f108 0801 	add.w	r8, r8, #1
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	e7c2      	b.n	8007ec2 <_dtoa_r+0x9f2>
 8007f3c:	9a02      	ldr	r2, [sp, #8]
 8007f3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f42:	eba5 030b 	sub.w	r3, r5, fp
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d021      	beq.n	8007f8e <_dtoa_r+0xabe>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	9904      	ldr	r1, [sp, #16]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 f8e1 	bl	8008118 <__multadd>
 8007f56:	45b1      	cmp	r9, r6
 8007f58:	9004      	str	r0, [sp, #16]
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f04f 020a 	mov.w	r2, #10
 8007f62:	4649      	mov	r1, r9
 8007f64:	4620      	mov	r0, r4
 8007f66:	d105      	bne.n	8007f74 <_dtoa_r+0xaa4>
 8007f68:	f000 f8d6 	bl	8008118 <__multadd>
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	4606      	mov	r6, r0
 8007f70:	9505      	str	r5, [sp, #20]
 8007f72:	e776      	b.n	8007e62 <_dtoa_r+0x992>
 8007f74:	f000 f8d0 	bl	8008118 <__multadd>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4681      	mov	r9, r0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	220a      	movs	r2, #10
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 f8c9 	bl	8008118 <__multadd>
 8007f86:	4606      	mov	r6, r0
 8007f88:	e7f2      	b.n	8007f70 <_dtoa_r+0xaa0>
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	2201      	movs	r2, #1
 8007f90:	9904      	ldr	r1, [sp, #16]
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fa36 	bl	8008404 <__lshift>
 8007f98:	4639      	mov	r1, r7
 8007f9a:	9004      	str	r0, [sp, #16]
 8007f9c:	f000 fa86 	bl	80084ac <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dcb6      	bgt.n	8007f12 <_dtoa_r+0xa42>
 8007fa4:	d102      	bne.n	8007fac <_dtoa_r+0xadc>
 8007fa6:	f018 0f01 	tst.w	r8, #1
 8007faa:	d1b2      	bne.n	8007f12 <_dtoa_r+0xa42>
 8007fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fb6:	f47f af0a 	bne.w	8007dce <_dtoa_r+0x8fe>
 8007fba:	4615      	mov	r5, r2
 8007fbc:	e7f6      	b.n	8007fac <_dtoa_r+0xadc>
 8007fbe:	4593      	cmp	fp, r2
 8007fc0:	d105      	bne.n	8007fce <_dtoa_r+0xafe>
 8007fc2:	2331      	movs	r3, #49	; 0x31
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	f88b 3000 	strb.w	r3, [fp]
 8007fcc:	e6ff      	b.n	8007dce <_dtoa_r+0x8fe>
 8007fce:	4615      	mov	r5, r2
 8007fd0:	e79f      	b.n	8007f12 <_dtoa_r+0xa42>
 8007fd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008038 <_dtoa_r+0xb68>
 8007fd6:	e007      	b.n	8007fe8 <_dtoa_r+0xb18>
 8007fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fda:	f8df b060 	ldr.w	fp, [pc, #96]	; 800803c <_dtoa_r+0xb6c>
 8007fde:	b11b      	cbz	r3, 8007fe8 <_dtoa_r+0xb18>
 8007fe0:	f10b 0308 	add.w	r3, fp, #8
 8007fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	4658      	mov	r0, fp
 8007fea:	b017      	add	sp, #92	; 0x5c
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	9b06      	ldr	r3, [sp, #24]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	f77f ae35 	ble.w	8007c62 <_dtoa_r+0x792>
 8007ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	e649      	b.n	8007c92 <_dtoa_r+0x7c2>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc03      	bgt.n	800800c <_dtoa_r+0xb3c>
 8008004:	9b06      	ldr	r3, [sp, #24]
 8008006:	2b02      	cmp	r3, #2
 8008008:	f73f aecc 	bgt.w	8007da4 <_dtoa_r+0x8d4>
 800800c:	465d      	mov	r5, fp
 800800e:	4639      	mov	r1, r7
 8008010:	9804      	ldr	r0, [sp, #16]
 8008012:	f7ff f9ce 	bl	80073b2 <quorem>
 8008016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800801a:	f805 8b01 	strb.w	r8, [r5], #1
 800801e:	9a02      	ldr	r2, [sp, #8]
 8008020:	eba5 030b 	sub.w	r3, r5, fp
 8008024:	429a      	cmp	r2, r3
 8008026:	ddb0      	ble.n	8007f8a <_dtoa_r+0xaba>
 8008028:	2300      	movs	r3, #0
 800802a:	220a      	movs	r2, #10
 800802c:	9904      	ldr	r1, [sp, #16]
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f872 	bl	8008118 <__multadd>
 8008034:	9004      	str	r0, [sp, #16]
 8008036:	e7ea      	b.n	800800e <_dtoa_r+0xb3e>
 8008038:	080087b8 	.word	0x080087b8
 800803c:	080087ba 	.word	0x080087ba

08008040 <_localeconv_r>:
 8008040:	4b04      	ldr	r3, [pc, #16]	; (8008054 <_localeconv_r+0x14>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6a18      	ldr	r0, [r3, #32]
 8008046:	4b04      	ldr	r3, [pc, #16]	; (8008058 <_localeconv_r+0x18>)
 8008048:	2800      	cmp	r0, #0
 800804a:	bf08      	it	eq
 800804c:	4618      	moveq	r0, r3
 800804e:	30f0      	adds	r0, #240	; 0xf0
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	20000070 	.word	0x20000070

0800805c <malloc>:
 800805c:	4b02      	ldr	r3, [pc, #8]	; (8008068 <malloc+0xc>)
 800805e:	4601      	mov	r1, r0
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	f000 baf7 	b.w	8008654 <_malloc_r>
 8008066:	bf00      	nop
 8008068:	2000000c 	.word	0x2000000c

0800806c <memcpy>:
 800806c:	b510      	push	{r4, lr}
 800806e:	1e43      	subs	r3, r0, #1
 8008070:	440a      	add	r2, r1
 8008072:	4291      	cmp	r1, r2
 8008074:	d100      	bne.n	8008078 <memcpy+0xc>
 8008076:	bd10      	pop	{r4, pc}
 8008078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008080:	e7f7      	b.n	8008072 <memcpy+0x6>

08008082 <_Balloc>:
 8008082:	b570      	push	{r4, r5, r6, lr}
 8008084:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008086:	4604      	mov	r4, r0
 8008088:	460e      	mov	r6, r1
 800808a:	b93d      	cbnz	r5, 800809c <_Balloc+0x1a>
 800808c:	2010      	movs	r0, #16
 800808e:	f7ff ffe5 	bl	800805c <malloc>
 8008092:	6260      	str	r0, [r4, #36]	; 0x24
 8008094:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008098:	6005      	str	r5, [r0, #0]
 800809a:	60c5      	str	r5, [r0, #12]
 800809c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800809e:	68eb      	ldr	r3, [r5, #12]
 80080a0:	b183      	cbz	r3, 80080c4 <_Balloc+0x42>
 80080a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080aa:	b9b8      	cbnz	r0, 80080dc <_Balloc+0x5a>
 80080ac:	2101      	movs	r1, #1
 80080ae:	fa01 f506 	lsl.w	r5, r1, r6
 80080b2:	1d6a      	adds	r2, r5, #5
 80080b4:	0092      	lsls	r2, r2, #2
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 fabe 	bl	8008638 <_calloc_r>
 80080bc:	b160      	cbz	r0, 80080d8 <_Balloc+0x56>
 80080be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80080c2:	e00e      	b.n	80080e2 <_Balloc+0x60>
 80080c4:	2221      	movs	r2, #33	; 0x21
 80080c6:	2104      	movs	r1, #4
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fab5 	bl	8008638 <_calloc_r>
 80080ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d0:	60e8      	str	r0, [r5, #12]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e4      	bne.n	80080a2 <_Balloc+0x20>
 80080d8:	2000      	movs	r0, #0
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	6802      	ldr	r2, [r0, #0]
 80080de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80080e2:	2300      	movs	r3, #0
 80080e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080e8:	e7f7      	b.n	80080da <_Balloc+0x58>

080080ea <_Bfree>:
 80080ea:	b570      	push	{r4, r5, r6, lr}
 80080ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080ee:	4606      	mov	r6, r0
 80080f0:	460d      	mov	r5, r1
 80080f2:	b93c      	cbnz	r4, 8008104 <_Bfree+0x1a>
 80080f4:	2010      	movs	r0, #16
 80080f6:	f7ff ffb1 	bl	800805c <malloc>
 80080fa:	6270      	str	r0, [r6, #36]	; 0x24
 80080fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008100:	6004      	str	r4, [r0, #0]
 8008102:	60c4      	str	r4, [r0, #12]
 8008104:	b13d      	cbz	r5, 8008116 <_Bfree+0x2c>
 8008106:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008108:	686a      	ldr	r2, [r5, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008110:	6029      	str	r1, [r5, #0]
 8008112:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <__multadd>:
 8008118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811c:	690d      	ldr	r5, [r1, #16]
 800811e:	461f      	mov	r7, r3
 8008120:	4606      	mov	r6, r0
 8008122:	460c      	mov	r4, r1
 8008124:	f101 0c14 	add.w	ip, r1, #20
 8008128:	2300      	movs	r3, #0
 800812a:	f8dc 0000 	ldr.w	r0, [ip]
 800812e:	b281      	uxth	r1, r0
 8008130:	fb02 7101 	mla	r1, r2, r1, r7
 8008134:	0c0f      	lsrs	r7, r1, #16
 8008136:	0c00      	lsrs	r0, r0, #16
 8008138:	fb02 7000 	mla	r0, r2, r0, r7
 800813c:	b289      	uxth	r1, r1
 800813e:	3301      	adds	r3, #1
 8008140:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008144:	429d      	cmp	r5, r3
 8008146:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800814a:	f84c 1b04 	str.w	r1, [ip], #4
 800814e:	dcec      	bgt.n	800812a <__multadd+0x12>
 8008150:	b1d7      	cbz	r7, 8008188 <__multadd+0x70>
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	42ab      	cmp	r3, r5
 8008156:	dc12      	bgt.n	800817e <__multadd+0x66>
 8008158:	6861      	ldr	r1, [r4, #4]
 800815a:	4630      	mov	r0, r6
 800815c:	3101      	adds	r1, #1
 800815e:	f7ff ff90 	bl	8008082 <_Balloc>
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	3202      	adds	r2, #2
 8008166:	f104 010c 	add.w	r1, r4, #12
 800816a:	4680      	mov	r8, r0
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	300c      	adds	r0, #12
 8008170:	f7ff ff7c 	bl	800806c <memcpy>
 8008174:	4621      	mov	r1, r4
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ffb7 	bl	80080ea <_Bfree>
 800817c:	4644      	mov	r4, r8
 800817e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008182:	3501      	adds	r5, #1
 8008184:	615f      	str	r7, [r3, #20]
 8008186:	6125      	str	r5, [r4, #16]
 8008188:	4620      	mov	r0, r4
 800818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800818e <__hi0bits>:
 800818e:	0c02      	lsrs	r2, r0, #16
 8008190:	0412      	lsls	r2, r2, #16
 8008192:	4603      	mov	r3, r0
 8008194:	b9b2      	cbnz	r2, 80081c4 <__hi0bits+0x36>
 8008196:	0403      	lsls	r3, r0, #16
 8008198:	2010      	movs	r0, #16
 800819a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800819e:	bf04      	itt	eq
 80081a0:	021b      	lsleq	r3, r3, #8
 80081a2:	3008      	addeq	r0, #8
 80081a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081a8:	bf04      	itt	eq
 80081aa:	011b      	lsleq	r3, r3, #4
 80081ac:	3004      	addeq	r0, #4
 80081ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081b2:	bf04      	itt	eq
 80081b4:	009b      	lsleq	r3, r3, #2
 80081b6:	3002      	addeq	r0, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	db06      	blt.n	80081ca <__hi0bits+0x3c>
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	d503      	bpl.n	80081c8 <__hi0bits+0x3a>
 80081c0:	3001      	adds	r0, #1
 80081c2:	4770      	bx	lr
 80081c4:	2000      	movs	r0, #0
 80081c6:	e7e8      	b.n	800819a <__hi0bits+0xc>
 80081c8:	2020      	movs	r0, #32
 80081ca:	4770      	bx	lr

080081cc <__lo0bits>:
 80081cc:	6803      	ldr	r3, [r0, #0]
 80081ce:	f013 0207 	ands.w	r2, r3, #7
 80081d2:	4601      	mov	r1, r0
 80081d4:	d00b      	beq.n	80081ee <__lo0bits+0x22>
 80081d6:	07da      	lsls	r2, r3, #31
 80081d8:	d423      	bmi.n	8008222 <__lo0bits+0x56>
 80081da:	0798      	lsls	r0, r3, #30
 80081dc:	bf49      	itett	mi
 80081de:	085b      	lsrmi	r3, r3, #1
 80081e0:	089b      	lsrpl	r3, r3, #2
 80081e2:	2001      	movmi	r0, #1
 80081e4:	600b      	strmi	r3, [r1, #0]
 80081e6:	bf5c      	itt	pl
 80081e8:	600b      	strpl	r3, [r1, #0]
 80081ea:	2002      	movpl	r0, #2
 80081ec:	4770      	bx	lr
 80081ee:	b298      	uxth	r0, r3
 80081f0:	b9a8      	cbnz	r0, 800821e <__lo0bits+0x52>
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	2010      	movs	r0, #16
 80081f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081fa:	bf04      	itt	eq
 80081fc:	0a1b      	lsreq	r3, r3, #8
 80081fe:	3008      	addeq	r0, #8
 8008200:	071a      	lsls	r2, r3, #28
 8008202:	bf04      	itt	eq
 8008204:	091b      	lsreq	r3, r3, #4
 8008206:	3004      	addeq	r0, #4
 8008208:	079a      	lsls	r2, r3, #30
 800820a:	bf04      	itt	eq
 800820c:	089b      	lsreq	r3, r3, #2
 800820e:	3002      	addeq	r0, #2
 8008210:	07da      	lsls	r2, r3, #31
 8008212:	d402      	bmi.n	800821a <__lo0bits+0x4e>
 8008214:	085b      	lsrs	r3, r3, #1
 8008216:	d006      	beq.n	8008226 <__lo0bits+0x5a>
 8008218:	3001      	adds	r0, #1
 800821a:	600b      	str	r3, [r1, #0]
 800821c:	4770      	bx	lr
 800821e:	4610      	mov	r0, r2
 8008220:	e7e9      	b.n	80081f6 <__lo0bits+0x2a>
 8008222:	2000      	movs	r0, #0
 8008224:	4770      	bx	lr
 8008226:	2020      	movs	r0, #32
 8008228:	4770      	bx	lr

0800822a <__i2b>:
 800822a:	b510      	push	{r4, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	2101      	movs	r1, #1
 8008230:	f7ff ff27 	bl	8008082 <_Balloc>
 8008234:	2201      	movs	r2, #1
 8008236:	6144      	str	r4, [r0, #20]
 8008238:	6102      	str	r2, [r0, #16]
 800823a:	bd10      	pop	{r4, pc}

0800823c <__multiply>:
 800823c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	4614      	mov	r4, r2
 8008242:	690a      	ldr	r2, [r1, #16]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	bfb8      	it	lt
 800824a:	460b      	movlt	r3, r1
 800824c:	4688      	mov	r8, r1
 800824e:	bfbc      	itt	lt
 8008250:	46a0      	movlt	r8, r4
 8008252:	461c      	movlt	r4, r3
 8008254:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008258:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800825c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008264:	eb07 0609 	add.w	r6, r7, r9
 8008268:	42b3      	cmp	r3, r6
 800826a:	bfb8      	it	lt
 800826c:	3101      	addlt	r1, #1
 800826e:	f7ff ff08 	bl	8008082 <_Balloc>
 8008272:	f100 0514 	add.w	r5, r0, #20
 8008276:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800827a:	462b      	mov	r3, r5
 800827c:	2200      	movs	r2, #0
 800827e:	4573      	cmp	r3, lr
 8008280:	d316      	bcc.n	80082b0 <__multiply+0x74>
 8008282:	f104 0214 	add.w	r2, r4, #20
 8008286:	f108 0114 	add.w	r1, r8, #20
 800828a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800828e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	9201      	str	r2, [sp, #4]
 8008298:	4293      	cmp	r3, r2
 800829a:	d80c      	bhi.n	80082b6 <__multiply+0x7a>
 800829c:	2e00      	cmp	r6, #0
 800829e:	dd03      	ble.n	80082a8 <__multiply+0x6c>
 80082a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d05d      	beq.n	8008364 <__multiply+0x128>
 80082a8:	6106      	str	r6, [r0, #16]
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	f843 2b04 	str.w	r2, [r3], #4
 80082b4:	e7e3      	b.n	800827e <__multiply+0x42>
 80082b6:	f8b2 b000 	ldrh.w	fp, [r2]
 80082ba:	f1bb 0f00 	cmp.w	fp, #0
 80082be:	d023      	beq.n	8008308 <__multiply+0xcc>
 80082c0:	4689      	mov	r9, r1
 80082c2:	46ac      	mov	ip, r5
 80082c4:	f04f 0800 	mov.w	r8, #0
 80082c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80082cc:	f8dc a000 	ldr.w	sl, [ip]
 80082d0:	b2a3      	uxth	r3, r4
 80082d2:	fa1f fa8a 	uxth.w	sl, sl
 80082d6:	fb0b a303 	mla	r3, fp, r3, sl
 80082da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082de:	f8dc 4000 	ldr.w	r4, [ip]
 80082e2:	4443      	add	r3, r8
 80082e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80082e8:	fb0b 840a 	mla	r4, fp, sl, r8
 80082ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80082f0:	46e2      	mov	sl, ip
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082f8:	454f      	cmp	r7, r9
 80082fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80082fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008302:	d82b      	bhi.n	800835c <__multiply+0x120>
 8008304:	f8cc 8004 	str.w	r8, [ip, #4]
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800830e:	3204      	adds	r2, #4
 8008310:	f1ba 0f00 	cmp.w	sl, #0
 8008314:	d020      	beq.n	8008358 <__multiply+0x11c>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	4689      	mov	r9, r1
 800831a:	46a8      	mov	r8, r5
 800831c:	f04f 0b00 	mov.w	fp, #0
 8008320:	f8b9 c000 	ldrh.w	ip, [r9]
 8008324:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008328:	fb0a 440c 	mla	r4, sl, ip, r4
 800832c:	445c      	add	r4, fp
 800832e:	46c4      	mov	ip, r8
 8008330:	b29b      	uxth	r3, r3
 8008332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008336:	f84c 3b04 	str.w	r3, [ip], #4
 800833a:	f859 3b04 	ldr.w	r3, [r9], #4
 800833e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	fb0a b303 	mla	r3, sl, r3, fp
 8008348:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800834c:	454f      	cmp	r7, r9
 800834e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008352:	d805      	bhi.n	8008360 <__multiply+0x124>
 8008354:	f8c8 3004 	str.w	r3, [r8, #4]
 8008358:	3504      	adds	r5, #4
 800835a:	e79b      	b.n	8008294 <__multiply+0x58>
 800835c:	46d4      	mov	ip, sl
 800835e:	e7b3      	b.n	80082c8 <__multiply+0x8c>
 8008360:	46e0      	mov	r8, ip
 8008362:	e7dd      	b.n	8008320 <__multiply+0xe4>
 8008364:	3e01      	subs	r6, #1
 8008366:	e799      	b.n	800829c <__multiply+0x60>

08008368 <__pow5mult>:
 8008368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800836c:	4615      	mov	r5, r2
 800836e:	f012 0203 	ands.w	r2, r2, #3
 8008372:	4606      	mov	r6, r0
 8008374:	460f      	mov	r7, r1
 8008376:	d007      	beq.n	8008388 <__pow5mult+0x20>
 8008378:	3a01      	subs	r2, #1
 800837a:	4c21      	ldr	r4, [pc, #132]	; (8008400 <__pow5mult+0x98>)
 800837c:	2300      	movs	r3, #0
 800837e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008382:	f7ff fec9 	bl	8008118 <__multadd>
 8008386:	4607      	mov	r7, r0
 8008388:	10ad      	asrs	r5, r5, #2
 800838a:	d035      	beq.n	80083f8 <__pow5mult+0x90>
 800838c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800838e:	b93c      	cbnz	r4, 80083a0 <__pow5mult+0x38>
 8008390:	2010      	movs	r0, #16
 8008392:	f7ff fe63 	bl	800805c <malloc>
 8008396:	6270      	str	r0, [r6, #36]	; 0x24
 8008398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800839c:	6004      	str	r4, [r0, #0]
 800839e:	60c4      	str	r4, [r0, #12]
 80083a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083a8:	b94c      	cbnz	r4, 80083be <__pow5mult+0x56>
 80083aa:	f240 2171 	movw	r1, #625	; 0x271
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ff3b 	bl	800822a <__i2b>
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ba:	4604      	mov	r4, r0
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	07eb      	lsls	r3, r5, #31
 80083c4:	d50a      	bpl.n	80083dc <__pow5mult+0x74>
 80083c6:	4639      	mov	r1, r7
 80083c8:	4622      	mov	r2, r4
 80083ca:	4630      	mov	r0, r6
 80083cc:	f7ff ff36 	bl	800823c <__multiply>
 80083d0:	4639      	mov	r1, r7
 80083d2:	4681      	mov	r9, r0
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff fe88 	bl	80080ea <_Bfree>
 80083da:	464f      	mov	r7, r9
 80083dc:	106d      	asrs	r5, r5, #1
 80083de:	d00b      	beq.n	80083f8 <__pow5mult+0x90>
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	b938      	cbnz	r0, 80083f4 <__pow5mult+0x8c>
 80083e4:	4622      	mov	r2, r4
 80083e6:	4621      	mov	r1, r4
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ff27 	bl	800823c <__multiply>
 80083ee:	6020      	str	r0, [r4, #0]
 80083f0:	f8c0 8000 	str.w	r8, [r0]
 80083f4:	4604      	mov	r4, r0
 80083f6:	e7e4      	b.n	80083c2 <__pow5mult+0x5a>
 80083f8:	4638      	mov	r0, r7
 80083fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fe:	bf00      	nop
 8008400:	080088b8 	.word	0x080088b8

08008404 <__lshift>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	460c      	mov	r4, r1
 800840a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	6849      	ldr	r1, [r1, #4]
 8008412:	eb0a 0903 	add.w	r9, sl, r3
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	4607      	mov	r7, r0
 800841a:	4616      	mov	r6, r2
 800841c:	f109 0501 	add.w	r5, r9, #1
 8008420:	42ab      	cmp	r3, r5
 8008422:	db32      	blt.n	800848a <__lshift+0x86>
 8008424:	4638      	mov	r0, r7
 8008426:	f7ff fe2c 	bl	8008082 <_Balloc>
 800842a:	2300      	movs	r3, #0
 800842c:	4680      	mov	r8, r0
 800842e:	f100 0114 	add.w	r1, r0, #20
 8008432:	461a      	mov	r2, r3
 8008434:	4553      	cmp	r3, sl
 8008436:	db2b      	blt.n	8008490 <__lshift+0x8c>
 8008438:	6920      	ldr	r0, [r4, #16]
 800843a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800843e:	f104 0314 	add.w	r3, r4, #20
 8008442:	f016 021f 	ands.w	r2, r6, #31
 8008446:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800844a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800844e:	d025      	beq.n	800849c <__lshift+0x98>
 8008450:	f1c2 0e20 	rsb	lr, r2, #32
 8008454:	2000      	movs	r0, #0
 8008456:	681e      	ldr	r6, [r3, #0]
 8008458:	468a      	mov	sl, r1
 800845a:	4096      	lsls	r6, r2
 800845c:	4330      	orrs	r0, r6
 800845e:	f84a 0b04 	str.w	r0, [sl], #4
 8008462:	f853 0b04 	ldr.w	r0, [r3], #4
 8008466:	459c      	cmp	ip, r3
 8008468:	fa20 f00e 	lsr.w	r0, r0, lr
 800846c:	d814      	bhi.n	8008498 <__lshift+0x94>
 800846e:	6048      	str	r0, [r1, #4]
 8008470:	b108      	cbz	r0, 8008476 <__lshift+0x72>
 8008472:	f109 0502 	add.w	r5, r9, #2
 8008476:	3d01      	subs	r5, #1
 8008478:	4638      	mov	r0, r7
 800847a:	f8c8 5010 	str.w	r5, [r8, #16]
 800847e:	4621      	mov	r1, r4
 8008480:	f7ff fe33 	bl	80080ea <_Bfree>
 8008484:	4640      	mov	r0, r8
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	3101      	adds	r1, #1
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	e7c7      	b.n	8008420 <__lshift+0x1c>
 8008490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008494:	3301      	adds	r3, #1
 8008496:	e7cd      	b.n	8008434 <__lshift+0x30>
 8008498:	4651      	mov	r1, sl
 800849a:	e7dc      	b.n	8008456 <__lshift+0x52>
 800849c:	3904      	subs	r1, #4
 800849e:	f853 2b04 	ldr.w	r2, [r3], #4
 80084a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80084a6:	459c      	cmp	ip, r3
 80084a8:	d8f9      	bhi.n	800849e <__lshift+0x9a>
 80084aa:	e7e4      	b.n	8008476 <__lshift+0x72>

080084ac <__mcmp>:
 80084ac:	6903      	ldr	r3, [r0, #16]
 80084ae:	690a      	ldr	r2, [r1, #16]
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	b530      	push	{r4, r5, lr}
 80084b4:	d10c      	bne.n	80084d0 <__mcmp+0x24>
 80084b6:	0092      	lsls	r2, r2, #2
 80084b8:	3014      	adds	r0, #20
 80084ba:	3114      	adds	r1, #20
 80084bc:	1884      	adds	r4, r0, r2
 80084be:	4411      	add	r1, r2
 80084c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c8:	4295      	cmp	r5, r2
 80084ca:	d003      	beq.n	80084d4 <__mcmp+0x28>
 80084cc:	d305      	bcc.n	80084da <__mcmp+0x2e>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d3f3      	bcc.n	80084c0 <__mcmp+0x14>
 80084d8:	e7fa      	b.n	80084d0 <__mcmp+0x24>
 80084da:	f04f 33ff 	mov.w	r3, #4294967295
 80084de:	e7f7      	b.n	80084d0 <__mcmp+0x24>

080084e0 <__mdiff>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	460d      	mov	r5, r1
 80084e6:	4607      	mov	r7, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4628      	mov	r0, r5
 80084ec:	4614      	mov	r4, r2
 80084ee:	f7ff ffdd 	bl	80084ac <__mcmp>
 80084f2:	1e06      	subs	r6, r0, #0
 80084f4:	d108      	bne.n	8008508 <__mdiff+0x28>
 80084f6:	4631      	mov	r1, r6
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff fdc2 	bl	8008082 <_Balloc>
 80084fe:	2301      	movs	r3, #1
 8008500:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008508:	bfa4      	itt	ge
 800850a:	4623      	movge	r3, r4
 800850c:	462c      	movge	r4, r5
 800850e:	4638      	mov	r0, r7
 8008510:	6861      	ldr	r1, [r4, #4]
 8008512:	bfa6      	itte	ge
 8008514:	461d      	movge	r5, r3
 8008516:	2600      	movge	r6, #0
 8008518:	2601      	movlt	r6, #1
 800851a:	f7ff fdb2 	bl	8008082 <_Balloc>
 800851e:	692b      	ldr	r3, [r5, #16]
 8008520:	60c6      	str	r6, [r0, #12]
 8008522:	6926      	ldr	r6, [r4, #16]
 8008524:	f105 0914 	add.w	r9, r5, #20
 8008528:	f104 0214 	add.w	r2, r4, #20
 800852c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008530:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008534:	f100 0514 	add.w	r5, r0, #20
 8008538:	f04f 0e00 	mov.w	lr, #0
 800853c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008540:	f859 4b04 	ldr.w	r4, [r9], #4
 8008544:	fa1e f18a 	uxtah	r1, lr, sl
 8008548:	b2a3      	uxth	r3, r4
 800854a:	1ac9      	subs	r1, r1, r3
 800854c:	0c23      	lsrs	r3, r4, #16
 800854e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008552:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008556:	b289      	uxth	r1, r1
 8008558:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800855c:	45c8      	cmp	r8, r9
 800855e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008562:	4694      	mov	ip, r2
 8008564:	f845 3b04 	str.w	r3, [r5], #4
 8008568:	d8e8      	bhi.n	800853c <__mdiff+0x5c>
 800856a:	45bc      	cmp	ip, r7
 800856c:	d304      	bcc.n	8008578 <__mdiff+0x98>
 800856e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008572:	b183      	cbz	r3, 8008596 <__mdiff+0xb6>
 8008574:	6106      	str	r6, [r0, #16]
 8008576:	e7c5      	b.n	8008504 <__mdiff+0x24>
 8008578:	f85c 1b04 	ldr.w	r1, [ip], #4
 800857c:	fa1e f381 	uxtah	r3, lr, r1
 8008580:	141a      	asrs	r2, r3, #16
 8008582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800858c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008590:	f845 3b04 	str.w	r3, [r5], #4
 8008594:	e7e9      	b.n	800856a <__mdiff+0x8a>
 8008596:	3e01      	subs	r6, #1
 8008598:	e7e9      	b.n	800856e <__mdiff+0x8e>

0800859a <__d2b>:
 800859a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800859e:	460e      	mov	r6, r1
 80085a0:	2101      	movs	r1, #1
 80085a2:	ec59 8b10 	vmov	r8, r9, d0
 80085a6:	4615      	mov	r5, r2
 80085a8:	f7ff fd6b 	bl	8008082 <_Balloc>
 80085ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80085b0:	4607      	mov	r7, r0
 80085b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085b6:	bb34      	cbnz	r4, 8008606 <__d2b+0x6c>
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	f1b8 0300 	subs.w	r3, r8, #0
 80085be:	d027      	beq.n	8008610 <__d2b+0x76>
 80085c0:	a802      	add	r0, sp, #8
 80085c2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80085c6:	f7ff fe01 	bl	80081cc <__lo0bits>
 80085ca:	9900      	ldr	r1, [sp, #0]
 80085cc:	b1f0      	cbz	r0, 800860c <__d2b+0x72>
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	f1c0 0320 	rsb	r3, r0, #32
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	430b      	orrs	r3, r1
 80085da:	40c2      	lsrs	r2, r0
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	9201      	str	r2, [sp, #4]
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bf14      	ite	ne
 80085e8:	2102      	movne	r1, #2
 80085ea:	2101      	moveq	r1, #1
 80085ec:	6139      	str	r1, [r7, #16]
 80085ee:	b1c4      	cbz	r4, 8008622 <__d2b+0x88>
 80085f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80085f4:	4404      	add	r4, r0
 80085f6:	6034      	str	r4, [r6, #0]
 80085f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085fc:	6028      	str	r0, [r5, #0]
 80085fe:	4638      	mov	r0, r7
 8008600:	b003      	add	sp, #12
 8008602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800860a:	e7d5      	b.n	80085b8 <__d2b+0x1e>
 800860c:	6179      	str	r1, [r7, #20]
 800860e:	e7e7      	b.n	80085e0 <__d2b+0x46>
 8008610:	a801      	add	r0, sp, #4
 8008612:	f7ff fddb 	bl	80081cc <__lo0bits>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	2101      	movs	r1, #1
 800861c:	6139      	str	r1, [r7, #16]
 800861e:	3020      	adds	r0, #32
 8008620:	e7e5      	b.n	80085ee <__d2b+0x54>
 8008622:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008626:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800862a:	6030      	str	r0, [r6, #0]
 800862c:	6918      	ldr	r0, [r3, #16]
 800862e:	f7ff fdae 	bl	800818e <__hi0bits>
 8008632:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008636:	e7e1      	b.n	80085fc <__d2b+0x62>

08008638 <_calloc_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	fb02 f401 	mul.w	r4, r2, r1
 800863e:	4621      	mov	r1, r4
 8008640:	f000 f808 	bl	8008654 <_malloc_r>
 8008644:	4605      	mov	r5, r0
 8008646:	b118      	cbz	r0, 8008650 <_calloc_r+0x18>
 8008648:	4622      	mov	r2, r4
 800864a:	2100      	movs	r1, #0
 800864c:	f7fe fb60 	bl	8006d10 <memset>
 8008650:	4628      	mov	r0, r5
 8008652:	bd38      	pop	{r3, r4, r5, pc}

08008654 <_malloc_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	1ccd      	adds	r5, r1, #3
 8008658:	f025 0503 	bic.w	r5, r5, #3
 800865c:	3508      	adds	r5, #8
 800865e:	2d0c      	cmp	r5, #12
 8008660:	bf38      	it	cc
 8008662:	250c      	movcc	r5, #12
 8008664:	2d00      	cmp	r5, #0
 8008666:	4606      	mov	r6, r0
 8008668:	db01      	blt.n	800866e <_malloc_r+0x1a>
 800866a:	42a9      	cmp	r1, r5
 800866c:	d903      	bls.n	8008676 <_malloc_r+0x22>
 800866e:	230c      	movs	r3, #12
 8008670:	6033      	str	r3, [r6, #0]
 8008672:	2000      	movs	r0, #0
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	f000 f869 	bl	800874c <__malloc_lock>
 800867a:	4a21      	ldr	r2, [pc, #132]	; (8008700 <_malloc_r+0xac>)
 800867c:	6814      	ldr	r4, [r2, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	b991      	cbnz	r1, 80086a8 <_malloc_r+0x54>
 8008682:	4c20      	ldr	r4, [pc, #128]	; (8008704 <_malloc_r+0xb0>)
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	b91b      	cbnz	r3, 8008690 <_malloc_r+0x3c>
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f83d 	bl	8008708 <_sbrk_r>
 800868e:	6020      	str	r0, [r4, #0]
 8008690:	4629      	mov	r1, r5
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f838 	bl	8008708 <_sbrk_r>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d124      	bne.n	80086e6 <_malloc_r+0x92>
 800869c:	230c      	movs	r3, #12
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	4630      	mov	r0, r6
 80086a2:	f000 f854 	bl	800874e <__malloc_unlock>
 80086a6:	e7e4      	b.n	8008672 <_malloc_r+0x1e>
 80086a8:	680b      	ldr	r3, [r1, #0]
 80086aa:	1b5b      	subs	r3, r3, r5
 80086ac:	d418      	bmi.n	80086e0 <_malloc_r+0x8c>
 80086ae:	2b0b      	cmp	r3, #11
 80086b0:	d90f      	bls.n	80086d2 <_malloc_r+0x7e>
 80086b2:	600b      	str	r3, [r1, #0]
 80086b4:	50cd      	str	r5, [r1, r3]
 80086b6:	18cc      	adds	r4, r1, r3
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 f848 	bl	800874e <__malloc_unlock>
 80086be:	f104 000b 	add.w	r0, r4, #11
 80086c2:	1d23      	adds	r3, r4, #4
 80086c4:	f020 0007 	bic.w	r0, r0, #7
 80086c8:	1ac3      	subs	r3, r0, r3
 80086ca:	d0d3      	beq.n	8008674 <_malloc_r+0x20>
 80086cc:	425a      	negs	r2, r3
 80086ce:	50e2      	str	r2, [r4, r3]
 80086d0:	e7d0      	b.n	8008674 <_malloc_r+0x20>
 80086d2:	428c      	cmp	r4, r1
 80086d4:	684b      	ldr	r3, [r1, #4]
 80086d6:	bf16      	itet	ne
 80086d8:	6063      	strne	r3, [r4, #4]
 80086da:	6013      	streq	r3, [r2, #0]
 80086dc:	460c      	movne	r4, r1
 80086de:	e7eb      	b.n	80086b8 <_malloc_r+0x64>
 80086e0:	460c      	mov	r4, r1
 80086e2:	6849      	ldr	r1, [r1, #4]
 80086e4:	e7cc      	b.n	8008680 <_malloc_r+0x2c>
 80086e6:	1cc4      	adds	r4, r0, #3
 80086e8:	f024 0403 	bic.w	r4, r4, #3
 80086ec:	42a0      	cmp	r0, r4
 80086ee:	d005      	beq.n	80086fc <_malloc_r+0xa8>
 80086f0:	1a21      	subs	r1, r4, r0
 80086f2:	4630      	mov	r0, r6
 80086f4:	f000 f808 	bl	8008708 <_sbrk_r>
 80086f8:	3001      	adds	r0, #1
 80086fa:	d0cf      	beq.n	800869c <_malloc_r+0x48>
 80086fc:	6025      	str	r5, [r4, #0]
 80086fe:	e7db      	b.n	80086b8 <_malloc_r+0x64>
 8008700:	2000021c 	.word	0x2000021c
 8008704:	20000220 	.word	0x20000220

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4c06      	ldr	r4, [pc, #24]	; (8008724 <_sbrk_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4605      	mov	r5, r0
 8008710:	4608      	mov	r0, r1
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	f7f9 fad0 	bl	8001cb8 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20000758 	.word	0x20000758

08008728 <__ascii_mbtowc>:
 8008728:	b082      	sub	sp, #8
 800872a:	b901      	cbnz	r1, 800872e <__ascii_mbtowc+0x6>
 800872c:	a901      	add	r1, sp, #4
 800872e:	b142      	cbz	r2, 8008742 <__ascii_mbtowc+0x1a>
 8008730:	b14b      	cbz	r3, 8008746 <__ascii_mbtowc+0x1e>
 8008732:	7813      	ldrb	r3, [r2, #0]
 8008734:	600b      	str	r3, [r1, #0]
 8008736:	7812      	ldrb	r2, [r2, #0]
 8008738:	1c10      	adds	r0, r2, #0
 800873a:	bf18      	it	ne
 800873c:	2001      	movne	r0, #1
 800873e:	b002      	add	sp, #8
 8008740:	4770      	bx	lr
 8008742:	4610      	mov	r0, r2
 8008744:	e7fb      	b.n	800873e <__ascii_mbtowc+0x16>
 8008746:	f06f 0001 	mvn.w	r0, #1
 800874a:	e7f8      	b.n	800873e <__ascii_mbtowc+0x16>

0800874c <__malloc_lock>:
 800874c:	4770      	bx	lr

0800874e <__malloc_unlock>:
 800874e:	4770      	bx	lr

08008750 <__ascii_wctomb>:
 8008750:	b149      	cbz	r1, 8008766 <__ascii_wctomb+0x16>
 8008752:	2aff      	cmp	r2, #255	; 0xff
 8008754:	bf85      	ittet	hi
 8008756:	238a      	movhi	r3, #138	; 0x8a
 8008758:	6003      	strhi	r3, [r0, #0]
 800875a:	700a      	strbls	r2, [r1, #0]
 800875c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008760:	bf98      	it	ls
 8008762:	2001      	movls	r0, #1
 8008764:	4770      	bx	lr
 8008766:	4608      	mov	r0, r1
 8008768:	4770      	bx	lr
	...

0800876c <_init>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr

08008778 <_fini>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	bf00      	nop
 800877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877e:	bc08      	pop	{r3}
 8008780:	469e      	mov	lr, r3
 8008782:	4770      	bx	lr
