
OOEDO_SAMURAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008674  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008800  08008800  00018800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a48  08008a48  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a50  08008a50  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001dc  08008c34  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08008c34  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000292d  00000000  00000000  00031fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002030b  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcf4  00000000  00000000  00056c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c436e  00000000  00000000  00064987  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128cf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df0  00000000  00000000  00128d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087e4 	.word	0x080087e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	080087e4 	.word	0x080087e4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <MX_CAN1_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e52:	f001 ffab 	bl	8002dac <HAL_CAN_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 fd14 	bl	8001888 <Error_Handler>
  }

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000250 	.word	0x20000250
 8000e68:	40006400 	.word	0x40006400

08000e6c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_CAN2_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8-1;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e96:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ebe:	f001 ff75 	bl	8002dac <HAL_CAN_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 fcde 	bl	8001888 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000228 	.word	0x20000228
 8000ed4:	40006800 	.word	0x40006800

08000ed8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a53      	ldr	r2, [pc, #332]	; (8001044 <HAL_CAN_MspInit+0x16c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d146      	bne.n	8000f88 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f04:	4b50      	ldr	r3, [pc, #320]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	4b4e      	ldr	r3, [pc, #312]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f56:	2309      	movs	r3, #9
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	483b      	ldr	r0, [pc, #236]	; (8001050 <HAL_CAN_MspInit+0x178>)
 8000f62:	f003 f99b 	bl	800429c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f002 fe55 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f70:	2014      	movs	r0, #20
 8000f72:	f002 fe6e 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f002 fe4d 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f80:	2015      	movs	r0, #21
 8000f82:	f002 fe66 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000f86:	e058      	b.n	800103a <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_CAN_MspInit+0x17c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d153      	bne.n	800103a <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800100a:	2309      	movs	r3, #9
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_CAN_MspInit+0x180>)
 8001016:	f003 f941 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	f002 fdfb 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f002 fe14 	bl	8003c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	2041      	movs	r0, #65	; 0x41
 8001030:	f002 fdf3 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001034:	2041      	movs	r0, #65	; 0x41
 8001036:	f002 fe0c 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	; 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40006400 	.word	0x40006400
 8001048:	200001f8 	.word	0x200001f8
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40006800 	.word	0x40006800
 8001058:	40020400 	.word	0x40020400

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x4c>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f002 fdc9 	bl	8003c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f002 fde2 	bl	8003c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200f      	movs	r0, #15
 8001094:	f002 fdc1 	bl	8003c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001098:	200f      	movs	r0, #15
 800109a:	f002 fdda 	bl	8003c52 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <MX_GPIO_Init+0x178>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <MX_GPIO_Init+0x178>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <MX_GPIO_Init+0x178>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b50      	ldr	r3, [pc, #320]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_GPIO_Init+0x178>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_GPIO_Init+0x178>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_GPIO_Init+0x178>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_GPIO_Init+0x178>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <MX_GPIO_Init+0x178>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a41      	ldr	r2, [pc, #260]	; (8001224 <MX_GPIO_Init+0x178>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_GPIO_Init+0x178>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x178>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <MX_GPIO_Init+0x178>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_GPIO_Init+0x178>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 800114e:	2200      	movs	r2, #0
 8001150:	f64e 4113 	movw	r1, #60435	; 0xec13
 8001154:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_GPIO_Init+0x17c>)
 8001156:	f003 fa3b 	bl	80045d0 <HAL_GPIO_WritePin>
                          |LED2_Pin|GYRO_CS_Pin|LED8_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4832      	ldr	r0, [pc, #200]	; (800122c <MX_GPIO_Init+0x180>)
 8001162:	f003 fa35 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x184>)
 800116e:	f003 fa2f 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 8001172:	f64e 4311 	movw	r3, #60433	; 0xec11
 8001176:	617b      	str	r3, [r7, #20]
                          |GYRO_CS_Pin|LED8_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4827      	ldr	r0, [pc, #156]	; (8001228 <MX_GPIO_Init+0x17c>)
 800118c:	f003 f886 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <MX_GPIO_Init+0x17c>)
 80011a8:	f003 f878 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SWL_Pin|TOUCH_Pin|SWR_Pin;
 80011ac:	f248 4310 	movw	r3, #33808	; 0x8410
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_GPIO_Init+0x180>)
 80011c2:	f003 f86b 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_GPIO_Init+0x180>)
 80011e0:	f003 f85c 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWE_Pin;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWE_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0x184>)
 80011fa:	f003 f84f 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x184>)
 8001218:	f003 f840 	bl	800429c <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d128      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x66>
		time_count++;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001252:	701a      	strb	r2, [r3, #0]

		if(friction_speed > friction_ob_speed)			friction_speed--;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d906      	bls.n	800126e <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	e00b      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x52>
		else if(friction_speed < friction_ob_speed)		friction_speed++;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d205      	bcs.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x52>
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001284:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 	friction_speed);
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 	friction_speed);
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	639a      	str	r2, [r3, #56]	; 0x38

	}
	if(time_count == 0)	{
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x82>
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012a8:	f003 f9ab 	bl	8004602 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80012ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012b2:	f003 f9a6 	bl	8004602 <HAL_GPIO_TogglePin>
	}

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003d8 	.word	0x200003d8
 80012c4:	20000212 	.word	0x20000212
 80012c8:	20000216 	.word	0x20000216
 80012cc:	20000218 	.word	0x20000218
 80012d0:	20000398 	.word	0x20000398
 80012d4:	40020800 	.word	0x40020800

080012d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	all_uart_count++;
 80012e0:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <HAL_UART_RxCpltCallback+0x120>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <HAL_UART_RxCpltCallback+0x120>)
 80012ea:	801a      	strh	r2, [r3, #0]

	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <HAL_UART_RxCpltCallback+0x124>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10b      	bne.n	8001310 <HAL_UART_RxCpltCallback+0x38>
		uart1_count++;
 80012f8:	4b41      	ldr	r3, [pc, #260]	; (8001400 <HAL_UART_RxCpltCallback+0x128>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_UART_RxCpltCallback+0x128>)
 8001302:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, rx_uart, 2);
 8001304:	2202      	movs	r2, #2
 8001306:	493f      	ldr	r1, [pc, #252]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 8001308:	483c      	ldr	r0, [pc, #240]	; (80013fc <HAL_UART_RxCpltCallback+0x124>)
 800130a:	f004 fecb 	bl	80060a4 <HAL_UART_Receive_IT>
 800130e:	e058      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart2.Instance) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <HAL_UART_RxCpltCallback+0x130>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d10b      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x5c>
		uart2_count++;
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_UART_RxCpltCallback+0x134>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_UART_RxCpltCallback+0x134>)
 8001326:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_uart, 2);
 8001328:	2202      	movs	r2, #2
 800132a:	4936      	ldr	r1, [pc, #216]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 800132c:	4836      	ldr	r0, [pc, #216]	; (8001408 <HAL_UART_RxCpltCallback+0x130>)
 800132e:	f004 feb9 	bl	80060a4 <HAL_UART_Receive_IT>
 8001332:	e046      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart3.Instance) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_UART_RxCpltCallback+0x138>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d10b      	bne.n	8001358 <HAL_UART_RxCpltCallback+0x80>
		uart3_count++;
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_UART_RxCpltCallback+0x13c>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_UART_RxCpltCallback+0x13c>)
 800134a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, rx_uart, 2);
 800134c:	2202      	movs	r2, #2
 800134e:	492d      	ldr	r1, [pc, #180]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <HAL_UART_RxCpltCallback+0x138>)
 8001352:	f004 fea7 	bl	80060a4 <HAL_UART_Receive_IT>
 8001356:	e034      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart4.Instance) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_UART_RxCpltCallback+0x140>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d10b      	bne.n	800137c <HAL_UART_RxCpltCallback+0xa4>
		uart4_count++;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_UART_RxCpltCallback+0x144>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_UART_RxCpltCallback+0x144>)
 800136e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, rx_uart, 2);
 8001370:	2202      	movs	r2, #2
 8001372:	4924      	ldr	r1, [pc, #144]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 8001374:	4828      	ldr	r0, [pc, #160]	; (8001418 <HAL_UART_RxCpltCallback+0x140>)
 8001376:	f004 fe95 	bl	80060a4 <HAL_UART_Receive_IT>
 800137a:	e022      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart5.Instance) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_UART_RxCpltCallback+0x148>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d10b      	bne.n	80013a0 <HAL_UART_RxCpltCallback+0xc8>
		uart5_count++;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_UART_RxCpltCallback+0x14c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_UART_RxCpltCallback+0x14c>)
 8001392:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, rx_uart, 2);
 8001394:	2202      	movs	r2, #2
 8001396:	491b      	ldr	r1, [pc, #108]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 8001398:	4821      	ldr	r0, [pc, #132]	; (8001420 <HAL_UART_RxCpltCallback+0x148>)
 800139a:	f004 fe83 	bl	80060a4 <HAL_UART_Receive_IT>
 800139e:	e010      	b.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart6.Instance) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_UART_RxCpltCallback+0x150>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10a      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0xea>
		uart6_count++;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_UART_RxCpltCallback+0x154>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_UART_RxCpltCallback+0x154>)
 80013b6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, rx_uart, 2);
 80013b8:	2202      	movs	r2, #2
 80013ba:	4912      	ldr	r1, [pc, #72]	; (8001404 <HAL_UART_RxCpltCallback+0x12c>)
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <HAL_UART_RxCpltCallback+0x150>)
 80013be:	f004 fe71 	bl	80060a4 <HAL_UART_Receive_IT>
	}
	if(all_uart_count % 5 == 0){
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_UART_RxCpltCallback+0x120>)
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_UART_RxCpltCallback+0x158>)
 80013c8:	fba3 1302 	umull	r1, r3, r3, r2
 80013cc:	0899      	lsrs	r1, r3, #2
 80013ce:	460b      	mov	r3, r1
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d108      	bne.n	80013ee <HAL_UART_RxCpltCallback+0x116>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <HAL_UART_RxCpltCallback+0x15c>)
 80013e2:	f003 f90e 	bl	8004602 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80013e6:	2102      	movs	r1, #2
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <HAL_UART_RxCpltCallback+0x15c>)
 80013ea:	f003 f90a 	bl	8004602 <HAL_GPIO_TogglePin>

	}
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000020e 	.word	0x2000020e
 80013fc:	200005f8 	.word	0x200005f8
 8001400:	20000202 	.word	0x20000202
 8001404:	2000029c 	.word	0x2000029c
 8001408:	200006b8 	.word	0x200006b8
 800140c:	20000204 	.word	0x20000204
 8001410:	20000578 	.word	0x20000578
 8001414:	20000206 	.word	0x20000206
 8001418:	20000678 	.word	0x20000678
 800141c:	20000208 	.word	0x20000208
 8001420:	200005b8 	.word	0x200005b8
 8001424:	2000020a 	.word	0x2000020a
 8001428:	20000638 	.word	0x20000638
 800142c:	2000020c 	.word	0x2000020c
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	40020800 	.word	0x40020800

08001438 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart3.Instance) {
		//Custom_data_Transmit
	}
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d117      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
	{// can2 bus receive interrupt
		can2_count++;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800146a:	801a      	strh	r2, [r3, #0]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, rx_data);
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 ff95 	bl	80033a2 <HAL_CAN_GetRxMessage>
		//check ESC identifier
		if(canRxHeader.StdId == 0x1ff){
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001480:	4293      	cmp	r3, r2
 8001482:	d105      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			can2_clear++;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800148e:	801a      	strh	r2, [r3, #0]
		}
	}
	if (hcan->Instance == hcan1.Instance)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d105      	bne.n	80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{// can1 bus receive interrupt
		can1_count++;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80014a6:	801a      	strh	r2, [r3, #0]
	}

	if(can2_clear % 5 == 0){
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80014ae:	fba3 1302 	umull	r1, r3, r3, r2
 80014b2:	0899      	lsrs	r1, r3, #2
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d108      	bne.n	80014d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014c2:	2101      	movs	r1, #1
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80014c6:	f003 f89c 	bl	8004602 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80014ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80014d0:	f003 f897 	bl	8004602 <HAL_GPIO_TogglePin>

	}
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000228 	.word	0x20000228
 80014e0:	200001fe 	.word	0x200001fe
 80014e4:	20000294 	.word	0x20000294
 80014e8:	20000278 	.word	0x20000278
 80014ec:	20000200 	.word	0x20000200
 80014f0:	20000250 	.word	0x20000250
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	cccccccd 	.word	0xcccccccd
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020400 	.word	0x40020400

08001504 <initCanFilter>:

void initCanFilter() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <initCanFilter+0x54>)
 8001538:	f001 fd34 	bl	8002fa4 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <initCanFilter+0x58>)
 800154a:	f001 fd2b 	bl	8002fa4 <HAL_CAN_ConfigFilter>
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000250 	.word	0x20000250
 800155c:	20000228 	.word	0x20000228

08001560 <transCAN>:
	WriteByte(ADDRESS_PWR_MGMT_1,VALUE_LOW_POWER);
	HAL_Delay(10);
}

void transCAN()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef header;
	uint32_t TxMailbox;
	uint8_t i;

	header.StdId = 0x1ff;
 8001566:	f240 13ff 	movw	r3, #511	; 0x1ff
 800156a:	607b      	str	r3, [r7, #4]
	header.RTR = CAN_RTR_DATA;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
	header.IDE = CAN_ID_STD;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
	header.DLC = 8;
 8001574:	2308      	movs	r3, #8
 8001576:	617b      	str	r3, [r7, #20]
	for(i=0;i<8;i++){
 8001578:	2300      	movs	r3, #0
 800157a:	77fb      	strb	r3, [r7, #31]
 800157c:	e008      	b.n	8001590 <transCAN+0x30>
		tx_data[i] = 2*i;
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	7ffa      	ldrb	r2, [r7, #31]
 8001582:	0052      	lsls	r2, r2, #1
 8001584:	b2d1      	uxtb	r1, r2
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <transCAN+0x4c>)
 8001588:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<8;i++){
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	3301      	adds	r3, #1
 800158e:	77fb      	strb	r3, [r7, #31]
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	2b07      	cmp	r3, #7
 8001594:	d9f3      	bls.n	800157e <transCAN+0x1e>
	}
	HAL_CAN_AddTxMessage(&hcan1, &header, tx_data, &TxMailbox);
 8001596:	463b      	mov	r3, r7
 8001598:	1d39      	adds	r1, r7, #4
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <transCAN+0x4c>)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <transCAN+0x50>)
 800159e:	f001 fe25 	bl	80031ec <HAL_CAN_AddTxMessage>
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002a0 	.word	0x200002a0
 80015b0:	20000250 	.word	0x20000250

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f001 fb64 	bl	8002c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f8d4 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f7ff fd74 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f7ff fd4a 	bl	800105c <MX_DMA_Init>
  MX_CAN1_Init();
 80015c8:	f7ff fc1a 	bl	8000e00 <MX_CAN1_Init>
  MX_CAN2_Init();
 80015cc:	f7ff fc4e 	bl	8000e6c <MX_CAN2_Init>
  MX_TIM1_Init();
 80015d0:	f000 fbf0 	bl	8001db4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015d4:	f000 fc8e 	bl	8001ef4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015d8:	f000 fcd8 	bl	8001f8c <MX_TIM3_Init>
  MX_TIM6_Init();
 80015dc:	f000 fd58 	bl	8002090 <MX_TIM6_Init>
  MX_TIM8_Init();
 80015e0:	f000 fdc2 	bl	8002168 <MX_TIM8_Init>
  MX_TIM12_Init();
 80015e4:	f000 fe42 	bl	800226c <MX_TIM12_Init>
  MX_UART4_Init();
 80015e8:	f001 f81e 	bl	8002628 <MX_UART4_Init>
  MX_UART5_Init();
 80015ec:	f001 f846 	bl	800267c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80015f0:	f001 f86e 	bl	80026d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015f4:	f001 f896 	bl	8002724 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015f8:	f001 f8be 	bl	8002778 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80015fc:	f001 f8e6 	bl	80027cc <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001600:	f000 fa0a 	bl	8001a18 <MX_SPI3_Init>
  MX_TIM7_Init();
 8001604:	f000 fd7a 	bl	80020fc <MX_TIM7_Init>
  MX_SPI1_Init();
 8001608:	f000 f9d0 	bl	80019ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	4847      	ldr	r0, [pc, #284]	; (8001730 <main+0x17c>)
 8001614:	f002 ffdc 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	4844      	ldr	r0, [pc, #272]	; (8001730 <main+0x17c>)
 8001620:	f002 ffd6 	bl	80045d0 <HAL_GPIO_WritePin>

  initCanFilter();
 8001624:	f7ff ff6e 	bl	8001504 <initCanFilter>
//  initGyro();

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // friction wheel
 8001628:	2100      	movs	r1, #0
 800162a:	4842      	ldr	r0, [pc, #264]	; (8001734 <main+0x180>)
 800162c:	f003 fd1e 	bl	800506c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001630:	2104      	movs	r1, #4
 8001632:	4840      	ldr	r0, [pc, #256]	; (8001734 <main+0x180>)
 8001634:	f003 fd1a 	bl	800506c <HAL_TIM_PWM_Start>
  initFriction();
 8001638:	f000 f900 	bl	800183c <initFriction>

  HAL_Delay(100);
 800163c:	2064      	movs	r0, #100	; 0x64
 800163e:	f001 fb93 	bl	8002d68 <HAL_Delay>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	4839      	ldr	r0, [pc, #228]	; (8001730 <main+0x17c>)
 800164a:	f002 ffc1 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	4836      	ldr	r0, [pc, #216]	; (8001730 <main+0x17c>)
 8001656:	f002 ffbb 	bl	80045d0 <HAL_GPIO_WritePin>

  HAL_CAN_Start(&hcan1);
 800165a:	4837      	ldr	r0, [pc, #220]	; (8001738 <main+0x184>)
 800165c:	f001 fd82 	bl	8003164 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8001660:	4836      	ldr	r0, [pc, #216]	; (800173c <main+0x188>)
 8001662:	f001 fd7f 	bl	8003164 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001666:	2102      	movs	r1, #2
 8001668:	4833      	ldr	r0, [pc, #204]	; (8001738 <main+0x184>)
 800166a:	f001 ffac 	bl	80035c6 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800166e:	2102      	movs	r1, #2
 8001670:	4832      	ldr	r0, [pc, #200]	; (800173c <main+0x188>)
 8001672:	f001 ffa8 	bl	80035c6 <HAL_CAN_ActivateNotification>

  HAL_Delay(100);
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f001 fb76 	bl	8002d68 <HAL_Delay>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	482f      	ldr	r0, [pc, #188]	; (8001740 <main+0x18c>)
 8001684:	f002 ffa4 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	2101      	movs	r1, #1
 800168c:	4828      	ldr	r0, [pc, #160]	; (8001730 <main+0x17c>)
 800168e:	f002 ff9f 	bl	80045d0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 8001692:	482c      	ldr	r0, [pc, #176]	; (8001744 <main+0x190>)
 8001694:	f003 fc9b 	bl	8004fce <HAL_TIM_Base_Start_IT>

  HAL_Delay(100);
 8001698:	2064      	movs	r0, #100	; 0x64
 800169a:	f001 fb65 	bl	8002d68 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	2102      	movs	r1, #2
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <main+0x17c>)
 80016a4:	f002 ff94 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ae:	4820      	ldr	r0, [pc, #128]	; (8001730 <main+0x17c>)
 80016b0:	f002 ff8e 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart3, rx_uart, 2);
  HAL_UART_Receive_IT(&huart4, rx_uart, 2);
  HAL_UART_Receive_IT(&huart5, rx_uart, 2);
  HAL_UART_Receive_IT(&huart6, rx_uart, 2);
*/
  MelodySummer();
 80016b4:	f000 f8ef 	bl	8001896 <MelodySummer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  main_loop++;
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <main+0x194>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <main+0x194>)
 80016c2:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,tx_uart,2,1);
 80016c4:	2301      	movs	r3, #1
 80016c6:	2202      	movs	r2, #2
 80016c8:	4920      	ldr	r1, [pc, #128]	; (800174c <main+0x198>)
 80016ca:	4821      	ldr	r0, [pc, #132]	; (8001750 <main+0x19c>)
 80016cc:	f004 fc51 	bl	8005f72 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,tx_uart,2,1);
 80016d0:	2301      	movs	r3, #1
 80016d2:	2202      	movs	r2, #2
 80016d4:	491d      	ldr	r1, [pc, #116]	; (800174c <main+0x198>)
 80016d6:	481f      	ldr	r0, [pc, #124]	; (8001754 <main+0x1a0>)
 80016d8:	f004 fc4b 	bl	8005f72 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,tx_uart,2,1);
 80016dc:	2301      	movs	r3, #1
 80016de:	2202      	movs	r2, #2
 80016e0:	491a      	ldr	r1, [pc, #104]	; (800174c <main+0x198>)
 80016e2:	481d      	ldr	r0, [pc, #116]	; (8001758 <main+0x1a4>)
 80016e4:	f004 fc45 	bl	8005f72 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4,tx_uart,2,1);
 80016e8:	2301      	movs	r3, #1
 80016ea:	2202      	movs	r2, #2
 80016ec:	4917      	ldr	r1, [pc, #92]	; (800174c <main+0x198>)
 80016ee:	481b      	ldr	r0, [pc, #108]	; (800175c <main+0x1a8>)
 80016f0:	f004 fc3f 	bl	8005f72 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart5,tx_uart,2,1);
 80016f4:	2301      	movs	r3, #1
 80016f6:	2202      	movs	r2, #2
 80016f8:	4914      	ldr	r1, [pc, #80]	; (800174c <main+0x198>)
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <main+0x1ac>)
 80016fc:	f004 fc39 	bl	8005f72 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6,tx_uart,2,1);
 8001700:	2301      	movs	r3, #1
 8001702:	2202      	movs	r2, #2
 8001704:	4911      	ldr	r1, [pc, #68]	; (800174c <main+0x198>)
 8001706:	4817      	ldr	r0, [pc, #92]	; (8001764 <main+0x1b0>)
 8001708:	f004 fc33 	bl	8005f72 <HAL_UART_Transmit>

		  transCAN();
 800170c:	f7ff ff28 	bl	8001560 <transCAN>
		  HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <main+0x17c>)
 8001716:	f002 ff74 	bl	8004602 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <main+0x17c>)
 8001720:	f002 ff6f 	bl	8004602 <HAL_GPIO_TogglePin>

		  HAL_Delay(500);
 8001724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001728:	f001 fb1e 	bl	8002d68 <HAL_Delay>
		  main_loop++;
 800172c:	e7c4      	b.n	80016b8 <main+0x104>
 800172e:	bf00      	nop
 8001730:	40020800 	.word	0x40020800
 8001734:	20000398 	.word	0x20000398
 8001738:	20000250 	.word	0x20000250
 800173c:	20000228 	.word	0x20000228
 8001740:	40020400 	.word	0x40020400
 8001744:	200003d8 	.word	0x200003d8
 8001748:	20000214 	.word	0x20000214
 800174c:	20000210 	.word	0x20000210
 8001750:	200005f8 	.word	0x200005f8
 8001754:	200006b8 	.word	0x200006b8
 8001758:	20000578 	.word	0x20000578
 800175c:	20000678 	.word	0x20000678
 8001760:	200005b8 	.word	0x200005b8
 8001764:	20000638 	.word	0x20000638

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	; 0x50
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fb06 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <SystemClock_Config+0xcc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <SystemClock_Config+0xcc>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <SystemClock_Config+0xcc>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <SystemClock_Config+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <SystemClock_Config+0xd0>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <SystemClock_Config+0xd0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2310      	movs	r3, #16
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d0:	2302      	movs	r3, #2
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d8:	2308      	movs	r3, #8
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017dc:	23a8      	movs	r3, #168	; 0xa8
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e4:	2304      	movs	r3, #4
 80017e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 ff23 	bl	8004638 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f8:	f000 f846 	bl	8001888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800180c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800180e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2105      	movs	r1, #5
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f97c 	bl	8004b18 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001826:	f000 f82f 	bl	8001888 <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3750      	adds	r7, #80	; 0x50
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <initFriction>:

/* USER CODE BEGIN 4 */
void initFriction() {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 250);
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <initFriction+0x44>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	22fa      	movs	r2, #250	; 0xfa
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 250);
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <initFriction+0x44>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	22fa      	movs	r2, #250	; 0xfa
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 8001850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001854:	f001 fa88 	bl	8002d68 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 125);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <initFriction+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	227d      	movs	r2, #125	; 0x7d
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 125);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <initFriction+0x44>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	227d      	movs	r2, #125	; 0x7d
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 8001868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186c:	f001 fa7c 	bl	8002d68 <HAL_Delay>

	friction_ob_speed = 125;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <initFriction+0x48>)
 8001872:	227d      	movs	r2, #125	; 0x7d
 8001874:	801a      	strh	r2, [r3, #0]
	friction_ob_speed = 250;
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <initFriction+0x48>)
 8001878:	22fa      	movs	r2, #250	; 0xfa
 800187a:	801a      	strh	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000398 	.word	0x20000398
 8001884:	20000218 	.word	0x20000218

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <MelodySummer>:

#include"tim.h"
#include"music.h"

void MelodySummer(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
	Melody(g6,100);
 800189a:	2164      	movs	r1, #100	; 0x64
 800189c:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80018a0:	f000 f826 	bl	80018f0 <Melody>
	Melody(c7,100);
 80018a4:	2164      	movs	r1, #100	; 0x64
 80018a6:	f640 002d 	movw	r0, #2093	; 0x82d
 80018aa:	f000 f821 	bl	80018f0 <Melody>
	Melody(d7,100);
 80018ae:	2164      	movs	r1, #100	; 0x64
 80018b0:	f640 102d 	movw	r0, #2349	; 0x92d
 80018b4:	f000 f81c 	bl	80018f0 <Melody>
	Melody(e7,100);
 80018b8:	2164      	movs	r1, #100	; 0x64
 80018ba:	f640 204d 	movw	r0, #2637	; 0xa4d
 80018be:	f000 f817 	bl	80018f0 <Melody>
	Melody(d7,100);
 80018c2:	2164      	movs	r1, #100	; 0x64
 80018c4:	f640 102d 	movw	r0, #2349	; 0x92d
 80018c8:	f000 f812 	bl	80018f0 <Melody>
	HAL_Delay(50);
 80018cc:	2032      	movs	r0, #50	; 0x32
 80018ce:	f001 fa4b 	bl	8002d68 <HAL_Delay>
	Melody(c7,50);
 80018d2:	2132      	movs	r1, #50	; 0x32
 80018d4:	f640 002d 	movw	r0, #2093	; 0x82d
 80018d8:	f000 f80a 	bl	80018f0 <Melody>
	HAL_Delay(50);
 80018dc:	2032      	movs	r0, #50	; 0x32
 80018de:	f001 fa43 	bl	8002d68 <HAL_Delay>
	Melody(c7,200);
 80018e2:	21c8      	movs	r1, #200	; 0xc8
 80018e4:	f640 002d 	movw	r0, #2093	; 0x82d
 80018e8:	f000 f802 	bl	80018f0 <Melody>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <Melody>:
	Melody(e6,400);
	Melody(d6,400);
}

void Melody(uint32_t hz, uint32_t ms)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC;
//TIM8 Setting
	htim3.Instance = TIM3;
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <Melody+0xac>)
 80018fc:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <Melody+0xb0>)
 80018fe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 840-1;
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <Melody+0xac>)
 8001902:	f240 3247 	movw	r2, #839	; 0x347
 8001906:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <Melody+0xac>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100000 / hz;
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <Melody+0xb4>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <Melody+0xac>)
 8001918:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <Melody+0xac>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <Melody+0xac>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <Melody+0xac>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
//Config Setting
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192c:	2360      	movs	r3, #96	; 0x60
 800192e:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse =  95000 / hz ;
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <Melody+0xb8>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
//TIM8 OUTPUT
	if(HAL_TIM_PWM_Init(&htim3) != HAL_OK){
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <Melody+0xac>)
 8001944:	f003 fb67 	bl	8005016 <HAL_TIM_PWM_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <Melody+0x62>
		Error_Handler();
 800194e:	f7ff ff9b 	bl	8001888 <Error_Handler>
	}
	if(HAL_TIM_PWM_ConfigChannel(&htim3,&sConfigOC,TIM_CHANNEL_3) != HAL_OK){
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2208      	movs	r2, #8
 8001958:	4619      	mov	r1, r3
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <Melody+0xac>)
 800195c:	f003 fd24 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <Melody+0x7a>
		Error_Handler();
 8001966:	f7ff ff8f 	bl	8001888 <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3) != HAL_OK){
 800196a:	2108      	movs	r1, #8
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <Melody+0xac>)
 800196e:	f003 fb7d 	bl	800506c <HAL_TIM_PWM_Start>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <Melody+0x8c>
		Error_Handler();
 8001978:	f7ff ff86 	bl	8001888 <Error_Handler>
	}
	HAL_Delay(ms);
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f001 f9f3 	bl	8002d68 <HAL_Delay>
	if(HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3) != HAL_OK){
 8001982:	2108      	movs	r1, #8
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <Melody+0xac>)
 8001986:	f003 fbaf 	bl	80050e8 <HAL_TIM_PWM_Stop>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <Melody+0xa4>
		Error_Handler();
 8001990:	f7ff ff7a 	bl	8001888 <Error_Handler>
	}
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000398 	.word	0x20000398
 80019a0:	40000400 	.word	0x40000400
 80019a4:	000186a0 	.word	0x000186a0
 80019a8:	00017318 	.word	0x00017318

080019ac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019b2:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <MX_SPI1_Init+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019e0:	2220      	movs	r2, #32
 80019e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019f8:	220a      	movs	r2, #10
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_SPI1_Init+0x64>)
 80019fe:	f003 fa57 	bl	8004eb0 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a08:	f7ff ff3e 	bl	8001888 <Error_Handler>
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000300 	.word	0x20000300
 8001a14:	40013000 	.word	0x40013000

08001a18 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <MX_SPI3_Init+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a4c:	2218      	movs	r2, #24
 8001a4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a64:	220a      	movs	r2, #10
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a6a:	f003 fa21 	bl	8004eb0 <HAL_SPI_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a74:	f7ff ff08 	bl	8001888 <Error_Handler>
  }

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200002a8 	.word	0x200002a8
 8001a80:	40003c00 	.word	0x40003c00

08001a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_SPI_MspInit+0xe8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12c      	bne.n	8001b00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ade:	23e0      	movs	r3, #224	; 0xe0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aee:	2305      	movs	r3, #5
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	481e      	ldr	r0, [pc, #120]	; (8001b74 <HAL_SPI_MspInit+0xf0>)
 8001afa:	f002 fbcf 	bl	800429c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001afe:	e030      	b.n	8001b62 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_SPI_MspInit+0xf4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12b      	bne.n	8001b62 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_SPI_MspInit+0xec>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b42:	2338      	movs	r3, #56	; 0x38
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b52:	2306      	movs	r3, #6
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <HAL_SPI_MspInit+0xf8>)
 8001b5e:	f002 fb9d 	bl	800429c <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40013000 	.word	0x40013000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40003c00 	.word	0x40003c00
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f001 f880 	bl	8002d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <DMA1_Stream2_IRQHandler+0x10>)
 8001c32:	f002 f8f9 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000518 	.word	0x20000518

08001c40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <DMA1_Stream4_IRQHandler+0x10>)
 8001c46:	f002 f8ef 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200006f8 	.word	0x200006f8

08001c54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <CAN1_RX0_IRQHandler+0x10>)
 8001c5a:	f001 fcda 	bl	8003612 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000250 	.word	0x20000250

08001c68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <CAN1_RX1_IRQHandler+0x10>)
 8001c6e:	f001 fcd0 	bl	8003612 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000250 	.word	0x20000250

08001c7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART1_IRQHandler+0x10>)
 8001c82:	f004 fa65 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200005f8 	.word	0x200005f8

08001c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <USART2_IRQHandler+0x10>)
 8001c96:	f004 fa5b 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200006b8 	.word	0x200006b8

08001ca4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <USART3_IRQHandler+0x10>)
 8001caa:	f004 fa51 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000578 	.word	0x20000578

08001cb8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <UART5_IRQHandler+0x10>)
 8001cbe:	f004 fa47 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200005b8 	.word	0x200005b8

08001ccc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM6_DAC_IRQHandler+0x10>)
 8001cd2:	f003 fa61 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200003d8 	.word	0x200003d8

08001ce0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <TIM7_IRQHandler+0x10>)
 8001ce6:	f003 fa57 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200004d8 	.word	0x200004d8

08001cf4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <CAN2_RX0_IRQHandler+0x10>)
 8001cfa:	f001 fc8a 	bl	8003612 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000228 	.word	0x20000228

08001d08 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <CAN2_RX1_IRQHandler+0x10>)
 8001d0e:	f001 fc80 	bl	8003612 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000228 	.word	0x20000228

08001d1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART6_IRQHandler+0x10>)
 8001d22:	f004 fa15 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000638 	.word	0x20000638

08001d30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x50>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x16>
		heap_end = &end;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <_sbrk+0x50>)
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <_sbrk+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <_sbrk+0x50>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <_sbrk+0x50>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	466a      	mov	r2, sp
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d907      	bls.n	8001d6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d5a:	f004 ffeb 	bl	8006d34 <__errno>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	230c      	movs	r3, #12
 8001d62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	e006      	b.n	8001d78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <_sbrk+0x50>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <_sbrk+0x50>)
 8001d74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000021c 	.word	0x2000021c
 8001d84:	20000760 	.word	0x20000760

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <SystemInit+0x28>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <SystemInit+0x28>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SystemInit+0x28>)
 8001d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001da2:	609a      	str	r2, [r3, #8]
#endif
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b096      	sub	sp, #88	; 0x58
 8001db8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2220      	movs	r2, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 ffcb 	bl	8006d88 <memset>

  htim1.Instance = TIM1;
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <MX_TIM1_Init+0x138>)
 8001df4:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <MX_TIM1_Init+0x13c>)
 8001df6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001df8:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <MX_TIM1_Init+0x138>)
 8001dfa:	22a7      	movs	r2, #167	; 0xa7
 8001dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b37      	ldr	r3, [pc, #220]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e1e:	4833      	ldr	r0, [pc, #204]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e20:	f003 f8aa 	bl	8004f78 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e2a:	f7ff fd2d 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e38:	4619      	mov	r1, r3
 8001e3a:	482c      	ldr	r0, [pc, #176]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e3c:	f003 fb7a 	bl	8005534 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e46:	f7ff fd1f 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4a:	4828      	ldr	r0, [pc, #160]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e4c:	f003 f8e3 	bl	8005016 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e56:	f7ff fd17 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e66:	4619      	mov	r1, r3
 8001e68:	4820      	ldr	r0, [pc, #128]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e6a:	f003 ff53 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e74:	f7ff fd08 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	; 0x60
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4813      	ldr	r0, [pc, #76]	; (8001eec <MX_TIM1_Init+0x138>)
 8001e9e:	f003 fa83 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ea8:	f7ff fcee 	bl	8001888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_TIM1_Init+0x138>)
 8001ed0:	f003 ff9c 	bl	8005e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001eda:	f7ff fcd5 	bl	8001888 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM1_Init+0x138>)
 8001ee0:	f000 faf0 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8001ee4:	bf00      	nop
 8001ee6:	3758      	adds	r7, #88	; 0x58
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000418 	.word	0x20000418
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	463b      	mov	r3, r7
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f1a:	2253      	movs	r2, #83	; 0x53
 8001f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f3a:	f003 f81d 	bl	8004f78 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f44:	f7ff fca0 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f56:	f003 faed 	bl	8005534 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f60:	f7ff fc92 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM2_Init+0x94>)
 8001f72:	f003 fecf 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f7c:	f7ff fc84 	bl	8001888 <Error_Handler>
  }

}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000458 	.word	0x20000458

08001f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fbe:	4a33      	ldr	r2, [pc, #204]	; (800208c <MX_TIM3_Init+0x100>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fc4:	2253      	movs	r2, #83	; 0x53
 8001fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe2:	4829      	ldr	r0, [pc, #164]	; (8002088 <MX_TIM3_Init+0xfc>)
 8001fe4:	f002 ffc8 	bl	8004f78 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001fee:	f7ff fc4b 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4822      	ldr	r0, [pc, #136]	; (8002088 <MX_TIM3_Init+0xfc>)
 8002000:	f003 fa98 	bl	8005534 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800200a:	f7ff fc3d 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800200e:	481e      	ldr	r0, [pc, #120]	; (8002088 <MX_TIM3_Init+0xfc>)
 8002010:	f003 f801 	bl	8005016 <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800201a:	f7ff fc35 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4619      	mov	r1, r3
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <MX_TIM3_Init+0xfc>)
 800202e:	f003 fe71 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002038:	f7ff fc26 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203c:	2360      	movs	r3, #96	; 0x60
 800203e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2208      	movs	r2, #8
 8002050:	4619      	mov	r1, r3
 8002052:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_TIM3_Init+0xfc>)
 8002054:	f003 f9a8 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800205e:	f7ff fc13 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	220c      	movs	r2, #12
 8002066:	4619      	mov	r1, r3
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <MX_TIM3_Init+0xfc>)
 800206a:	f003 f99d 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002074:	f7ff fc08 	bl	8001888 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <MX_TIM3_Init+0xfc>)
 800207a:	f000 fa23 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 800207e:	bf00      	nop
 8002080:	3738      	adds	r7, #56	; 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000398 	.word	0x20000398
 800208c:	40000400 	.word	0x40000400

08002090 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <MX_TIM6_Init+0x68>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840-1;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020a6:	f240 3247 	movw	r2, #839	; 0x347
 80020aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020c2:	f002 ff59 	bl	8004f78 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020cc:	f7ff fbdc 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_TIM6_Init+0x64>)
 80020de:	f003 fe19 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020e8:	f7ff fbce 	bl	8001888 <Error_Handler>
  }

}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200003d8 	.word	0x200003d8
 80020f8:	40001000 	.word	0x40001000

080020fc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002102:	463b      	mov	r3, r7
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_TIM7_Init+0x64>)
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <MX_TIM7_Init+0x68>)
 800210e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_TIM7_Init+0x64>)
 8002112:	2253      	movs	r2, #83	; 0x53
 8002114:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_TIM7_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <MX_TIM7_Init+0x64>)
 800211e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002122:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_TIM7_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <MX_TIM7_Init+0x64>)
 800212c:	f002 ff24 	bl	8004f78 <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002136:	f7ff fba7 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <MX_TIM7_Init+0x64>)
 8002148:	f003 fde4 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002152:	f7ff fb99 	bl	8001888 <Error_Handler>
  }

}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200004d8 	.word	0x200004d8
 8002164:	40001400 	.word	0x40001400

08002168 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b092      	sub	sp, #72	; 0x48
 800216c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2220      	movs	r2, #32
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fdf8 	bl	8006d88 <memset>

  htim8.Instance = TIM8;
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <MX_TIM8_Init+0xfc>)
 800219a:	4a33      	ldr	r2, [pc, #204]	; (8002268 <MX_TIM8_Init+0x100>)
 800219c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021a0:	22a7      	movs	r2, #167	; 0xa7
 80021a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021c4:	4827      	ldr	r0, [pc, #156]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021c6:	f002 ff26 	bl	8005016 <HAL_TIM_PWM_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80021d0:	f7ff fb5a 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021e0:	4619      	mov	r1, r3
 80021e2:	4820      	ldr	r0, [pc, #128]	; (8002264 <MX_TIM8_Init+0xfc>)
 80021e4:	f003 fd96 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80021ee:	f7ff fb4b 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f2:	2360      	movs	r3, #96	; 0x60
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	220c      	movs	r2, #12
 8002210:	4619      	mov	r1, r3
 8002212:	4814      	ldr	r0, [pc, #80]	; (8002264 <MX_TIM8_Init+0xfc>)
 8002214:	f003 f8c8 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800221e:	f7ff fb33 	bl	8001888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4807      	ldr	r0, [pc, #28]	; (8002264 <MX_TIM8_Init+0xfc>)
 8002246:	f003 fde1 	bl	8005e0c <HAL_TIMEx_ConfigBreakDeadTime>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002250:	f7ff fb1a 	bl	8001888 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <MX_TIM8_Init+0xfc>)
 8002256:	f000 f935 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 800225a:	bf00      	nop
 800225c:	3748      	adds	r7, #72	; 0x48
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000358 	.word	0x20000358
 8002268:	40010400 	.word	0x40010400

0800226c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <MX_TIM12_Init+0xd4>)
 8002294:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <MX_TIM12_Init+0xd8>)
 8002296:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <MX_TIM12_Init+0xd4>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022aa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80022b8:	4821      	ldr	r0, [pc, #132]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022ba:	f002 fe5d 	bl	8004f78 <HAL_TIM_Base_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80022c4:	f7ff fae0 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	4619      	mov	r1, r3
 80022d4:	481a      	ldr	r0, [pc, #104]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022d6:	f003 f92d 	bl	8005534 <HAL_TIM_ConfigClockSource>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80022e0:	f7ff fad2 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <MX_TIM12_Init+0xd4>)
 80022e6:	f002 fe96 	bl	8005016 <HAL_TIM_PWM_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80022f0:	f7ff faca 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f4:	2360      	movs	r3, #96	; 0x60
 80022f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_TIM12_Init+0xd4>)
 800230c:	f003 f84c 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002316:	f7ff fab7 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2204      	movs	r2, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4807      	ldr	r0, [pc, #28]	; (8002340 <MX_TIM12_Init+0xd4>)
 8002322:	f003 f841 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 800232c:	f7ff faac 	bl	8001888 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <MX_TIM12_Init+0xd4>)
 8002332:	f000 f8c7 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000498 	.word	0x20000498
 8002344:	40001800 	.word	0x40001800

08002348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a44      	ldr	r2, [pc, #272]	; (8002468 <HAL_TIM_Base_MspInit+0x120>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a42      	ldr	r2, [pc, #264]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002376:	e072      	b.n	800245e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	e05e      	b.n	800245e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <HAL_TIM_Base_MspInit+0x128>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
}
 80023c6:	e04a      	b.n	800245e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM6)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <HAL_TIM_Base_MspInit+0x12c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d116      	bne.n	8002400 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023dc:	f043 0310 	orr.w	r3, r3, #16
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2101      	movs	r1, #1
 80023f2:	2036      	movs	r0, #54	; 0x36
 80023f4:	f001 fc11 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023f8:	2036      	movs	r0, #54	; 0x36
 80023fa:	f001 fc2a 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 80023fe:	e02e      	b.n	800245e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_TIM_Base_MspInit+0x130>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d116      	bne.n	8002438 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	2037      	movs	r0, #55	; 0x37
 800242c:	f001 fbf5 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002430:	2037      	movs	r0, #55	; 0x37
 8002432:	f001 fc0e 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002436:	e012      	b.n	800245e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM12)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_TIM_Base_MspInit+0x134>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 800244c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_TIM_Base_MspInit+0x124>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40023800 	.word	0x40023800
 8002470:	40000400 	.word	0x40000400
 8002474:	40001000 	.word	0x40001000
 8002478:	40001400 	.word	0x40001400
 800247c:	40001800 	.word	0x40001800

08002480 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_TIM_PWM_MspInit+0x3c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10d      	bne.n	80024ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_TIM_PWM_MspInit+0x40>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_TIM_PWM_MspInit+0x40>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_TIM_PWM_MspInit+0x40>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010400 	.word	0x40010400
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	; 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_TIM_MspPostInit+0x144>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d11f      	bne.n	8002526 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO5_Pin;
 8002502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO5_GPIO_Port, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	483c      	ldr	r0, [pc, #240]	; (8002610 <HAL_TIM_MspPostInit+0x14c>)
 8002520:	f001 febc 	bl	800429c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002524:	e06c      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <HAL_TIM_MspPostInit+0x150>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d11e      	bne.n	800256e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin|SERVO1_Pin;
 800254c:	2303      	movs	r3, #3
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800255c:	2302      	movs	r3, #2
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	482c      	ldr	r0, [pc, #176]	; (8002618 <HAL_TIM_MspPostInit+0x154>)
 8002568:	f001 fe98 	bl	800429c <HAL_GPIO_Init>
}
 800256c:	e048      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_TIM_MspPostInit+0x158>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d11f      	bne.n	80025b8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO4_Pin;
 8002594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	481b      	ldr	r0, [pc, #108]	; (8002620 <HAL_TIM_MspPostInit+0x15c>)
 80025b2:	f001 fe73 	bl	800429c <HAL_GPIO_Init>
}
 80025b6:	e023      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_TIM_MspPostInit+0x160>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d11e      	bne.n	8002600 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_TIM_MspPostInit+0x148>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_Pin|SERVO3_Pin;
 80025de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025f0:	2309      	movs	r3, #9
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <HAL_TIM_MspPostInit+0x154>)
 80025fc:	f001 fe4e 	bl	800429c <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010000 	.word	0x40010000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000
 8002614:	40000400 	.word	0x40000400
 8002618:	40020400 	.word	0x40020400
 800261c:	40010400 	.word	0x40010400
 8002620:	40020800 	.word	0x40020800
 8002624:	40001800 	.word	0x40001800

08002628 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_UART4_Init+0x4c>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_UART4_Init+0x50>)
 8002630:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_UART4_Init+0x4c>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002638:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_UART4_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_UART4_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_UART4_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_UART4_Init+0x4c>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_UART4_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_UART4_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_UART4_Init+0x4c>)
 8002660:	f003 fc3a 	bl	8005ed8 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800266a:	f7ff f90d 	bl	8001888 <Error_Handler>
  }

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000678 	.word	0x20000678
 8002678:	40004c00 	.word	0x40004c00

0800267c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_UART5_Init+0x4c>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <MX_UART5_Init+0x50>)
 8002684:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <MX_UART5_Init+0x4c>)
 8002688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800268c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_UART5_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_UART5_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_UART5_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_UART5_Init+0x4c>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_UART5_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_UART5_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_UART5_Init+0x4c>)
 80026b4:	f003 fc10 	bl	8005ed8 <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80026be:	f7ff f8e3 	bl	8001888 <Error_Handler>
  }

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200005b8 	.word	0x200005b8
 80026cc:	40005000 	.word	0x40005000

080026d0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <MX_USART1_UART_Init+0x50>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_USART1_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_USART1_UART_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_USART1_UART_Init+0x4c>)
 8002708:	f003 fbe6 	bl	8005ed8 <HAL_UART_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002712:	f7ff f8b9 	bl	8001888 <Error_Handler>
  }

}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200005f8 	.word	0x200005f8
 8002720:	40011000 	.word	0x40011000

08002724 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <MX_USART2_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800275c:	f003 fbbc 	bl	8005ed8 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002766:	f7ff f88f 	bl	8001888 <Error_Handler>
  }

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200006b8 	.word	0x200006b8
 8002774:	40004400 	.word	0x40004400

08002778 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_USART3_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027b0:	f003 fb92 	bl	8005ed8 <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027ba:	f7ff f865 	bl	8001888 <Error_Handler>
  }

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000578 	.word	0x20000578
 80027c8:	40004800 	.word	0x40004800

080027cc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <MX_USART6_UART_Init+0x50>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 8002804:	f003 fb68 	bl	8005ed8 <HAL_UART_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800280e:	f7ff f83b 	bl	8001888 <Error_Handler>
  }

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000638 	.word	0x20000638
 800281c:	40011400 	.word	0x40011400

08002820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b094      	sub	sp, #80	; 0x50
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a90      	ldr	r2, [pc, #576]	; (8002a80 <HAL_UART_MspInit+0x260>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f040 808b 	bne.w	800295a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
 8002848:	4b8e      	ldr	r3, [pc, #568]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a8d      	ldr	r2, [pc, #564]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800284e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 8002854:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
 8002864:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a86      	ldr	r2, [pc, #536]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800287c:	2303      	movs	r3, #3
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002884:	2301      	movs	r3, #1
 8002886:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800288c:	2308      	movs	r3, #8
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002894:	4619      	mov	r1, r3
 8002896:	487c      	ldr	r0, [pc, #496]	; (8002a88 <HAL_UART_MspInit+0x268>)
 8002898:	f001 fd00 	bl	800429c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800289c:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 800289e:	4a7c      	ldr	r2, [pc, #496]	; (8002a90 <HAL_UART_MspInit+0x270>)
 80028a0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028aa:	4b78      	ldr	r3, [pc, #480]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b0:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b6:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c4:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80028ca:	4b70      	ldr	r3, [pc, #448]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d2:	4b6e      	ldr	r3, [pc, #440]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028d8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028da:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80028e0:	486a      	ldr	r0, [pc, #424]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028e2:	f001 f9d1 	bl	8003c88 <HAL_DMA_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80028ec:	f7fe ffcc 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a66      	ldr	r2, [pc, #408]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
 80028f6:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <HAL_UART_MspInit+0x26c>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80028fc:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_UART_MspInit+0x274>)
 80028fe:	4a66      	ldr	r2, [pc, #408]	; (8002a98 <HAL_UART_MspInit+0x278>)
 8002900:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002902:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002908:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800290a:	4b62      	ldr	r3, [pc, #392]	; (8002a94 <HAL_UART_MspInit+0x274>)
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002910:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002916:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800291c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002924:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800292a:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_UART_MspInit+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002936:	4b57      	ldr	r3, [pc, #348]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800293c:	4855      	ldr	r0, [pc, #340]	; (8002a94 <HAL_UART_MspInit+0x274>)
 800293e:	f001 f9a3 	bl	8003c88 <HAL_DMA_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002948:	f7fe ff9e 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
 8002952:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_UART_MspInit+0x274>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002958:	e158      	b.n	8002c0c <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==UART5)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_UART_MspInit+0x27c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d153      	bne.n	8002a0c <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a3e      	ldr	r2, [pc, #248]	; (8002a84 <HAL_UART_MspInit+0x264>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <HAL_UART_MspInit+0x264>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a37      	ldr	r2, [pc, #220]	; (8002a84 <HAL_UART_MspInit+0x264>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <HAL_UART_MspInit+0x264>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029ca:	2308      	movs	r3, #8
 80029cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4832      	ldr	r0, [pc, #200]	; (8002aa0 <HAL_UART_MspInit+0x280>)
 80029d6:	f001 fc61 	bl	800429c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029da:	2304      	movs	r3, #4
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029ea:	2308      	movs	r3, #8
 80029ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029f2:	4619      	mov	r1, r3
 80029f4:	482b      	ldr	r0, [pc, #172]	; (8002aa4 <HAL_UART_MspInit+0x284>)
 80029f6:	f001 fc51 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2035      	movs	r0, #53	; 0x35
 8002a00:	f001 f90b 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002a04:	2035      	movs	r0, #53	; 0x35
 8002a06:	f001 f924 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002a0a:	e0ff      	b.n	8002c0c <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_UART_MspInit+0x288>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d14c      	bne.n	8002ab0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_UART_MspInit+0x264>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4e:	23c0      	movs	r3, #192	; 0xc0
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a5e:	2307      	movs	r3, #7
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a66:	4619      	mov	r1, r3
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <HAL_UART_MspInit+0x28c>)
 8002a6a:	f001 fc17 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	2025      	movs	r0, #37	; 0x25
 8002a74:	f001 f8d1 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a78:	2025      	movs	r0, #37	; 0x25
 8002a7a:	f001 f8ea 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002a7e:	e0c5      	b.n	8002c0c <HAL_UART_MspInit+0x3ec>
 8002a80:	40004c00 	.word	0x40004c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	20000518 	.word	0x20000518
 8002a90:	40026040 	.word	0x40026040
 8002a94:	200006f8 	.word	0x200006f8
 8002a98:	40026070 	.word	0x40026070
 8002a9c:	40005000 	.word	0x40005000
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a57      	ldr	r2, [pc, #348]	; (8002c14 <HAL_UART_MspInit+0x3f4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d134      	bne.n	8002b24 <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a55      	ldr	r2, [pc, #340]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002af2:	230c      	movs	r3, #12
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b02:	2307      	movs	r3, #7
 8002b04:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4843      	ldr	r0, [pc, #268]	; (8002c1c <HAL_UART_MspInit+0x3fc>)
 8002b0e:	f001 fbc5 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2026      	movs	r0, #38	; 0x26
 8002b18:	f001 f87f 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b1c:	2026      	movs	r0, #38	; 0x26
 8002b1e:	f001 f898 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002b22:	e073      	b.n	8002c0c <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3d      	ldr	r2, [pc, #244]	; (8002c20 <HAL_UART_MspInit+0x400>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d135      	bne.n	8002b9a <HAL_UART_MspInit+0x37a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b80:	4619      	mov	r1, r3
 8002b82:	4828      	ldr	r0, [pc, #160]	; (8002c24 <HAL_UART_MspInit+0x404>)
 8002b84:	f001 fb8a 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	2027      	movs	r0, #39	; 0x27
 8002b8e:	f001 f844 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b92:	2027      	movs	r0, #39	; 0x27
 8002b94:	f001 f85d 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002b98:	e038      	b.n	8002c0c <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART6)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_UART_MspInit+0x408>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d133      	bne.n	8002c0c <HAL_UART_MspInit+0x3ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_UART_MspInit+0x3f8>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bdc:	23c0      	movs	r3, #192	; 0xc0
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bec:	2308      	movs	r3, #8
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <HAL_UART_MspInit+0x40c>)
 8002bf8:	f001 fb50 	bl	800429c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2047      	movs	r0, #71	; 0x47
 8002c02:	f001 f80a 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c06:	2047      	movs	r0, #71	; 0x47
 8002c08:	f001 f823 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 8002c0c:	bf00      	nop
 8002c0e:	3750      	adds	r7, #80	; 0x50
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40004400 	.word	0x40004400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40004800 	.word	0x40004800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	40020800 	.word	0x40020800

08002c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c36:	e003      	b.n	8002c40 <LoopCopyDataInit>

08002c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c3e:	3104      	adds	r1, #4

08002c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c40:	480b      	ldr	r0, [pc, #44]	; (8002c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c48:	d3f6      	bcc.n	8002c38 <CopyDataInit>
  ldr  r2, =_sbss
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c4c:	e002      	b.n	8002c54 <LoopFillZerobss>

08002c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c50:	f842 3b04 	str.w	r3, [r2], #4

08002c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c58:	d3f9      	bcc.n	8002c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c5a:	f7ff f895 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f004 f86f 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c62:	f7fe fca7 	bl	80015b4 <main>
  bx  lr    
 8002c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c6c:	08008a58 	.word	0x08008a58
  ldr  r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c74:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002c78:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002c7c:	20000760 	.word	0x20000760

08002c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_Init+0x40>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_Init+0x40>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_Init+0x40>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 ffa9 	bl	8003c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f808 	bl	8002cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7fe ff62 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x54>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x58>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 ffc1 	bl	8003c6e <HAL_SYSTICK_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00e      	b.n	8002d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d80a      	bhi.n	8002d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f000 ff89 	bl	8003c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <HAL_InitTick+0x5c>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000008 	.word	0x20000008
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x20>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x24>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_IncTick+0x24>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	20000758 	.word	0x20000758

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_GetTick+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000758 	.word	0x20000758

08002d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff ffee 	bl	8002d50 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d005      	beq.n	8002d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_Delay+0x40>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8e:	bf00      	nop
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d8f7      	bhi.n	8002d90 <HAL_Delay+0x28>
  {
  }
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000008 	.word	0x20000008

08002dac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0ed      	b.n	8002f9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f884 	bl	8000ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0202 	bic.w	r2, r2, #2
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de0:	f7ff ffb6 	bl	8002d50 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002de6:	e012      	b.n	8002e0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de8:	f7ff ffb2 	bl	8002d50 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d90b      	bls.n	8002e0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2205      	movs	r2, #5
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0c5      	b.n	8002f9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2c:	f7ff ff90 	bl	8002d50 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e32:	e012      	b.n	8002e5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e34:	f7ff ff8c 	bl	8002d50 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b0a      	cmp	r3, #10
 8002e40:	d90b      	bls.n	8002e5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2205      	movs	r2, #5
 8002e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e09f      	b.n	8002f9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0e5      	beq.n	8002e34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7e1b      	ldrb	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e007      	b.n	8002e92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7e5b      	ldrb	r3, [r3, #25]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e007      	b.n	8002ebc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7e9b      	ldrb	r3, [r3, #26]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d108      	bne.n	8002ed6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e007      	b.n	8002ee6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0220 	bic.w	r2, r2, #32
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7edb      	ldrb	r3, [r3, #27]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0210 	bic.w	r2, r2, #16
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e007      	b.n	8002f10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0210 	orr.w	r2, r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7f1b      	ldrb	r3, [r3, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7f5b      	ldrb	r3, [r3, #29]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0204 	orr.w	r2, r2, #4
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d003      	beq.n	8002fca <HAL_CAN_ConfigFilter+0x26>
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f040 80be 	bne.w	8003146 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_CAN_ConfigFilter+0x1bc>)
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fe4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2201      	movs	r2, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d123      	bne.n	8003074 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800304e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3248      	adds	r2, #72	; 0x48
 8003054:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003068:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	3348      	adds	r3, #72	; 0x48
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d122      	bne.n	80030c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800309c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3248      	adds	r2, #72	; 0x48
 80030a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	3348      	adds	r3, #72	; 0x48
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030dc:	e007      	b.n	80030ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43db      	mvns	r3, r3
 8003100:	401a      	ands	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003108:	e007      	b.n	800311a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003138:	f023 0201 	bic.w	r2, r3, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e006      	b.n	8003154 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40006400 	.word	0x40006400

08003164 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d12e      	bne.n	80031d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003190:	f7ff fdde 	bl	8002d50 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003196:	e012      	b.n	80031be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003198:	f7ff fdda 	bl	8002d50 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b0a      	cmp	r3, #10
 80031a4:	d90b      	bls.n	80031be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2205      	movs	r2, #5
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e012      	b.n	80031e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e006      	b.n	80031e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003200:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d003      	beq.n	8003218 <HAL_CAN_AddTxMessage+0x2c>
 8003210:	7ffb      	ldrb	r3, [r7, #31]
 8003212:	2b02      	cmp	r3, #2
 8003214:	f040 80b8 	bne.w	8003388 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80a0 	beq.w	8003378 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e09e      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003258:	2201      	movs	r2, #1
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	409a      	lsls	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3318      	adds	r3, #24
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	440b      	add	r3, r1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e00f      	b.n	80032a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003290:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800329a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3318      	adds	r3, #24
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	440b      	add	r3, r1
 80032a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3318      	adds	r3, #24
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	440b      	add	r3, r1
 80032b6:	3304      	adds	r3, #4
 80032b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	7d1b      	ldrb	r3, [r3, #20]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d111      	bne.n	80032e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3318      	adds	r3, #24
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6811      	ldr	r1, [r2, #0]
 80032d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3318      	adds	r3, #24
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	440b      	add	r3, r1
 80032e2:	3304      	adds	r3, #4
 80032e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3307      	adds	r3, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	061a      	lsls	r2, r3, #24
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3306      	adds	r3, #6
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3305      	adds	r3, #5
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4313      	orrs	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	3204      	adds	r2, #4
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	4610      	mov	r0, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	ea43 0200 	orr.w	r2, r3, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	440b      	add	r3, r1
 8003318:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800331c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3303      	adds	r3, #3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	061a      	lsls	r2, r3, #24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3302      	adds	r3, #2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4313      	orrs	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	4610      	mov	r0, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	6811      	ldr	r1, [r2, #0]
 8003344:	ea43 0200 	orr.w	r2, r3, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	440b      	add	r3, r1
 800334e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003352:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3318      	adds	r3, #24
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3318      	adds	r3, #24
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	440b      	add	r3, r1
 8003372:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e00e      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e006      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_GetRxMessage+0x24>
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80f3 	bne.w	80035ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0e7      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d8      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	331b      	adds	r3, #27
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4413      	add	r3, r2
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0204 	and.w	r2, r3, #4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	331b      	adds	r3, #27
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0d5b      	lsrs	r3, r3, #21
 8003436:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e00b      	b.n	8003458 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	331b      	adds	r3, #27
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	331b      	adds	r3, #27
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0202 	and.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	331b      	adds	r3, #27
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	331b      	adds	r3, #27
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	331b      	adds	r3, #27
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0c1b      	lsrs	r3, r3, #16
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1a      	lsrs	r2, r3, #8
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0c1a      	lsrs	r2, r3, #16
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3302      	adds	r3, #2
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	4413      	add	r3, r2
 800350a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e1a      	lsrs	r2, r3, #24
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	3303      	adds	r3, #3
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0a1a      	lsrs	r2, r3, #8
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3305      	adds	r3, #5
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4413      	add	r3, r2
 8003556:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0c1a      	lsrs	r2, r3, #16
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3306      	adds	r3, #6
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4413      	add	r3, r2
 8003570:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0e1a      	lsrs	r2, r3, #24
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3307      	adds	r3, #7
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e007      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e006      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <HAL_CAN_ActivateNotification+0x1e>
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d109      	bne.n	80035f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6959      	ldr	r1, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e006      	b.n	8003606 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b08a      	sub	sp, #40	; 0x28
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d07c      	beq.n	8003752 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d023      	beq.n	80036aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f97d 	bl	8003974 <HAL_CAN_TxMailbox0CompleteCallback>
 800367a:	e016      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e00c      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e002      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f983 	bl	80039b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d024      	beq.n	80036fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f95d 	bl	8003988 <HAL_CAN_TxMailbox1CompleteCallback>
 80036ce:	e016      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e00c      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e002      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f963 	bl	80039c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d024      	beq.n	8003752 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f93d 	bl	800399c <HAL_CAN_TxMailbox2CompleteCallback>
 8003722:	e016      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e00c      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e002      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f943 	bl	80039d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2208      	movs	r2, #8
 8003790:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f92a 	bl	80039ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fe4b 	bl	800144c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2210      	movs	r2, #16
 80037d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2208      	movs	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f90c 	bl	8003a14 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8f3 	bl	8003a00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8f6 	bl	8003a28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2208      	movs	r2, #8
 8003856:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8ef 	bl	8003a3c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d075      	beq.n	8003954 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06c      	beq.n	800394c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d03d      	beq.n	800394c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d038      	beq.n	800394c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e0:	2b30      	cmp	r3, #48	; 0x30
 80038e2:	d017      	beq.n	8003914 <HAL_CAN_IRQHandler+0x302>
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d804      	bhi.n	80038f2 <HAL_CAN_IRQHandler+0x2e0>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d009      	beq.n	8003900 <HAL_CAN_IRQHandler+0x2ee>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d00c      	beq.n	800390a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038f0:	e024      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80038f2:	2b50      	cmp	r3, #80	; 0x50
 80038f4:	d018      	beq.n	8003928 <HAL_CAN_IRQHandler+0x316>
 80038f6:	2b60      	cmp	r3, #96	; 0x60
 80038f8:	d01b      	beq.n	8003932 <HAL_CAN_IRQHandler+0x320>
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d00f      	beq.n	800391e <HAL_CAN_IRQHandler+0x30c>
            break;
 80038fe:	e01d      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003908:	e018      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f043 0310 	orr.w	r3, r3, #16
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003912:	e013      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800391c:	e00e      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003926:	e009      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003930:	e004      	b.n	800393c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800393a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800394a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2204      	movs	r2, #4
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f872 	bl	8003a50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800396c:	bf00      	nop
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a80:	4013      	ands	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	60d3      	str	r3, [r2, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db0b      	blt.n	8003af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <__NVIC_EnableIRQ+0x38>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fa00 f202 	lsl.w	r2, r0, r2
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bd0:	d301      	bcc.n	8003bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00f      	b.n	8003bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <SysTick_Config+0x40>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bde:	210f      	movs	r1, #15
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f7ff ff8e 	bl	8003b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <SysTick_Config+0x40>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <SysTick_Config+0x40>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000e010 	.word	0xe000e010

08003c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff29 	bl	8003a64 <__NVIC_SetPriorityGrouping>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2c:	f7ff ff3e 	bl	8003aac <__NVIC_GetPriorityGrouping>
 8003c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f7ff ff8e 	bl	8003b58 <NVIC_EncodePriority>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff5d 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff31 	bl	8003ac8 <__NVIC_EnableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ffa2 	bl	8003bc0 <SysTick_Config>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff f85c 	bl	8002d50 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e099      	b.n	8003dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc4:	e00f      	b.n	8003ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc6:	f7ff f843 	bl	8002d50 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d908      	bls.n	8003ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e078      	b.n	8003dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e8      	bne.n	8003cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <HAL_DMA_Init+0x158>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d107      	bne.n	8003d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d117      	bne.n	8003daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa0b 	bl	80041a8 <DMA_CheckFifoParam>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003da6:	2301      	movs	r3, #1
 8003da8:	e016      	b.n	8003dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9c2 	bl	800413c <DMA_CalcBaseAndBitshift>
 8003db8:	4603      	mov	r3, r0
 8003dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	223f      	movs	r2, #63	; 0x3f
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	f010803f 	.word	0xf010803f

08003de4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00c      	b.n	8003e1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2205      	movs	r2, #5
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e34:	4b92      	ldr	r3, [pc, #584]	; (8004080 <HAL_DMA_IRQHandler+0x258>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a92      	ldr	r2, [pc, #584]	; (8004084 <HAL_DMA_IRQHandler+0x25c>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	2208      	movs	r2, #8
 8003e54:	409a      	lsls	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01a      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2208      	movs	r2, #8
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2201      	movs	r2, #1
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2204      	movs	r2, #4
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d012      	beq.n	8003f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2204      	movs	r2, #4
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0204 	orr.w	r2, r3, #4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2210      	movs	r2, #16
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d043      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03c      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2210      	movs	r2, #16
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d024      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e01f      	b.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
 8003f68:	e016      	b.n	8003f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0208 	bic.w	r2, r2, #8
 8003f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 808e 	beq.w	80040c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8086 	beq.w	80040c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d136      	bne.n	8004040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0216 	bic.w	r2, r2, #22
 8003fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_DMA_IRQHandler+0x1da>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0208 	bic.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	223f      	movs	r2, #63	; 0x3f
 8004018:	409a      	lsls	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	2b00      	cmp	r3, #0
 8004034:	d07d      	beq.n	8004132 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
        }
        return;
 800403e:	e078      	b.n	8004132 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01c      	beq.n	8004088 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d108      	bne.n	800406e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	2b00      	cmp	r3, #0
 8004062:	d030      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
 800406c:	e02b      	b.n	80040c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
 800407e:	e022      	b.n	80040c6 <HAL_DMA_IRQHandler+0x29e>
 8004080:	20000000 	.word	0x20000000
 8004084:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10f      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0210 	bic.w	r2, r2, #16
 80040a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d032      	beq.n	8004134 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d022      	beq.n	8004120 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2205      	movs	r2, #5
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d307      	bcc.n	800410e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f2      	bne.n	80040f2 <HAL_DMA_IRQHandler+0x2ca>
 800410c:	e000      	b.n	8004110 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800410e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
 8004130:	e000      	b.n	8004134 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004132:	bf00      	nop
    }
  }
}
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop

0800413c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	3b10      	subs	r3, #16
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <DMA_CalcBaseAndBitshift+0x64>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d909      	bls.n	800417e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	659a      	str	r2, [r3, #88]	; 0x58
 800417c:	e007      	b.n	800418e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	aaaaaaab 	.word	0xaaaaaaab
 80041a4:	08008818 	.word	0x08008818

080041a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11f      	bne.n	8004202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d855      	bhi.n	8004274 <DMA_CheckFifoParam+0xcc>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <DMA_CheckFifoParam+0x28>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041f3 	.word	0x080041f3
 80041d8:	080041e1 	.word	0x080041e1
 80041dc:	08004275 	.word	0x08004275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d045      	beq.n	8004278 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e042      	b.n	8004278 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041fa:	d13f      	bne.n	800427c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004200:	e03c      	b.n	800427c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420a:	d121      	bne.n	8004250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d836      	bhi.n	8004280 <DMA_CheckFifoParam+0xd8>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <DMA_CheckFifoParam+0x70>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004229 	.word	0x08004229
 800421c:	0800422f 	.word	0x0800422f
 8004220:	08004229 	.word	0x08004229
 8004224:	08004241 	.word	0x08004241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e02f      	b.n	800428e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d024      	beq.n	8004284 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423e:	e021      	b.n	8004284 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004248:	d11e      	bne.n	8004288 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800424e:	e01b      	b.n	8004288 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d902      	bls.n	800425c <DMA_CheckFifoParam+0xb4>
 8004256:	2b03      	cmp	r3, #3
 8004258:	d003      	beq.n	8004262 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800425a:	e018      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e015      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00e      	beq.n	800428c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      break;
 8004272:	e00b      	b.n	800428c <DMA_CheckFifoParam+0xe4>
      break;
 8004274:	bf00      	nop
 8004276:	e00a      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;
 8004278:	bf00      	nop
 800427a:	e008      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;
 800427c:	bf00      	nop
 800427e:	e006      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;
 8004280:	bf00      	nop
 8004282:	e004      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;
 8004284:	bf00      	nop
 8004286:	e002      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;   
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <DMA_CheckFifoParam+0xe6>
      break;
 800428c:	bf00      	nop
    }
  } 
  
  return status; 
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	; 0x24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e16b      	b.n	8004590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042b8:	2201      	movs	r2, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f040 815a 	bne.w	800458a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d00b      	beq.n	80042f6 <HAL_GPIO_Init+0x5a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d007      	beq.n	80042f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042ea:	2b11      	cmp	r3, #17
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b12      	cmp	r3, #18
 80042f4:	d130      	bne.n	8004358 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	2203      	movs	r2, #3
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800432c:	2201      	movs	r2, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 0201 	and.w	r2, r3, #1
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0xfc>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b12      	cmp	r3, #18
 8004396:	d123      	bne.n	80043e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	08da      	lsrs	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3208      	adds	r2, #8
 80043a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	220f      	movs	r2, #15
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	08da      	lsrs	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3208      	adds	r2, #8
 80043da:	69b9      	ldr	r1, [r7, #24]
 80043dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0203 	and.w	r2, r3, #3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80b4 	beq.w	800458a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_GPIO_Init+0x308>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4a5e      	ldr	r2, [pc, #376]	; (80045a4 <HAL_GPIO_Init+0x308>)
 800442c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004430:	6453      	str	r3, [r2, #68]	; 0x44
 8004432:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_GPIO_Init+0x308>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800443e:	4a5a      	ldr	r2, [pc, #360]	; (80045a8 <HAL_GPIO_Init+0x30c>)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	3302      	adds	r3, #2
 8004446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a51      	ldr	r2, [pc, #324]	; (80045ac <HAL_GPIO_Init+0x310>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02b      	beq.n	80044c2 <HAL_GPIO_Init+0x226>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a50      	ldr	r2, [pc, #320]	; (80045b0 <HAL_GPIO_Init+0x314>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d025      	beq.n	80044be <HAL_GPIO_Init+0x222>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4f      	ldr	r2, [pc, #316]	; (80045b4 <HAL_GPIO_Init+0x318>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01f      	beq.n	80044ba <HAL_GPIO_Init+0x21e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a4e      	ldr	r2, [pc, #312]	; (80045b8 <HAL_GPIO_Init+0x31c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d019      	beq.n	80044b6 <HAL_GPIO_Init+0x21a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a4d      	ldr	r2, [pc, #308]	; (80045bc <HAL_GPIO_Init+0x320>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_GPIO_Init+0x216>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <HAL_GPIO_Init+0x324>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00d      	beq.n	80044ae <HAL_GPIO_Init+0x212>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <HAL_GPIO_Init+0x328>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <HAL_GPIO_Init+0x20e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_GPIO_Init+0x32c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_GPIO_Init+0x20a>
 80044a2:	2307      	movs	r3, #7
 80044a4:	e00e      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044a6:	2308      	movs	r3, #8
 80044a8:	e00c      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044aa:	2306      	movs	r3, #6
 80044ac:	e00a      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e008      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044b2:	2304      	movs	r3, #4
 80044b4:	e006      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e004      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e002      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_GPIO_Init+0x228>
 80044c2:	2300      	movs	r3, #0
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f002 0203 	and.w	r2, r2, #3
 80044ca:	0092      	lsls	r2, r2, #2
 80044cc:	4093      	lsls	r3, r2
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d4:	4934      	ldr	r1, [pc, #208]	; (80045a8 <HAL_GPIO_Init+0x30c>)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	3302      	adds	r3, #2
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e2:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <HAL_GPIO_Init+0x330>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004506:	4a31      	ldr	r2, [pc, #196]	; (80045cc <HAL_GPIO_Init+0x330>)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800450c:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_GPIO_Init+0x330>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_GPIO_Init+0x330>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_GPIO_Init+0x330>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455a:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <HAL_GPIO_Init+0x330>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_GPIO_Init+0x330>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <HAL_GPIO_Init+0x330>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3301      	adds	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	f67f ae90 	bls.w	80042b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004598:	bf00      	nop
 800459a:	3724      	adds	r7, #36	; 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40013800 	.word	0x40013800
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40020400 	.word	0x40020400
 80045b4:	40020800 	.word	0x40020800
 80045b8:	40020c00 	.word	0x40020c00
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40021400 	.word	0x40021400
 80045c4:	40021800 	.word	0x40021800
 80045c8:	40021c00 	.word	0x40021c00
 80045cc:	40013c00 	.word	0x40013c00

080045d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]
 80045dc:	4613      	mov	r3, r2
 80045de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045ec:	e003      	b.n	80045f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	041a      	lsls	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	619a      	str	r2, [r3, #24]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	401a      	ands	r2, r3
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	429a      	cmp	r2, r3
 800461a:	d104      	bne.n	8004626 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	041a      	lsls	r2, r3, #16
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004624:	e002      	b.n	800462c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e25b      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d075      	beq.n	8004742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004656:	4ba3      	ldr	r3, [pc, #652]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00c      	beq.n	800467c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4ba0      	ldr	r3, [pc, #640]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	2b08      	cmp	r3, #8
 800466c:	d112      	bne.n	8004694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466e:	4b9d      	ldr	r3, [pc, #628]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800467a:	d10b      	bne.n	8004694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	4b99      	ldr	r3, [pc, #612]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d05b      	beq.n	8004740 <HAL_RCC_OscConfig+0x108>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d157      	bne.n	8004740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e236      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x74>
 800469e:	4b91      	ldr	r3, [pc, #580]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a90      	ldr	r2, [pc, #576]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e01d      	b.n	80046e8 <HAL_RCC_OscConfig+0xb0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x98>
 80046b6:	4b8b      	ldr	r3, [pc, #556]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a8a      	ldr	r2, [pc, #552]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a87      	ldr	r2, [pc, #540]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e00b      	b.n	80046e8 <HAL_RCC_OscConfig+0xb0>
 80046d0:	4b84      	ldr	r3, [pc, #528]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a83      	ldr	r2, [pc, #524]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a80      	ldr	r2, [pc, #512]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fb2e 	bl	8002d50 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fe fb2a 	bl	8002d50 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1fb      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	4b76      	ldr	r3, [pc, #472]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0xc0>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fb1a 	bl	8002d50 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004720:	f7fe fb16 	bl	8002d50 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e1e7      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	4b6c      	ldr	r3, [pc, #432]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0xe8>
 800473e:	e000      	b.n	8004742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d063      	beq.n	8004816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474e:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	2b08      	cmp	r3, #8
 8004764:	d11c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d116      	bne.n	80047a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004772:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_RCC_OscConfig+0x152>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e1bb      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4952      	ldr	r1, [pc, #328]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	e03a      	b.n	8004816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a8:	4b4f      	ldr	r3, [pc, #316]	; (80048e8 <HAL_RCC_OscConfig+0x2b0>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fe facf 	bl	8002d50 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fe facb 	bl	8002d50 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e19c      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4940      	ldr	r1, [pc, #256]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
 80047e8:	e015      	b.n	8004816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ea:	4b3f      	ldr	r3, [pc, #252]	; (80048e8 <HAL_RCC_OscConfig+0x2b0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe faae 	bl	8002d50 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f8:	f7fe faaa 	bl	8002d50 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e17b      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d030      	beq.n	8004884 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <HAL_RCC_OscConfig+0x2b4>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fe fa8e 	bl	8002d50 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004838:	f7fe fa8a 	bl	8002d50 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e15b      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x200>
 8004856:	e015      	b.n	8004884 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004858:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCC_OscConfig+0x2b4>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fe fa77 	bl	8002d50 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004866:	f7fe fa73 	bl	8002d50 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e144      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f0      	bne.n	8004866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80a0 	beq.w	80049d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_OscConfig+0x2b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d121      	bne.n	8004912 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <HAL_RCC_OscConfig+0x2b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <HAL_RCC_OscConfig+0x2b8>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fe fa39 	bl	8002d50 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e011      	b.n	8004906 <HAL_RCC_OscConfig+0x2ce>
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470000 	.word	0x42470000
 80048ec:	42470e80 	.word	0x42470e80
 80048f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f4:	f7fe fa2c 	bl	8002d50 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0fd      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004906:	4b81      	ldr	r3, [pc, #516]	; (8004b0c <HAL_RCC_OscConfig+0x4d4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x2f0>
 800491a:	4b7d      	ldr	r3, [pc, #500]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a7c      	ldr	r2, [pc, #496]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
 8004926:	e01c      	b.n	8004962 <HAL_RCC_OscConfig+0x32a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d10c      	bne.n	800494a <HAL_RCC_OscConfig+0x312>
 8004930:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a76      	ldr	r2, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	4b74      	ldr	r3, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a73      	ldr	r2, [pc, #460]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	e00b      	b.n	8004962 <HAL_RCC_OscConfig+0x32a>
 800494a:	4b71      	ldr	r3, [pc, #452]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a70      	ldr	r2, [pc, #448]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
 8004956:	4b6e      	ldr	r3, [pc, #440]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	4a6d      	ldr	r2, [pc, #436]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d015      	beq.n	8004996 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496a:	f7fe f9f1 	bl	8002d50 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fe f9ed 	bl	8002d50 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0bc      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ee      	beq.n	8004972 <HAL_RCC_OscConfig+0x33a>
 8004994:	e014      	b.n	80049c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004996:	f7fe f9db 	bl	8002d50 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fe f9d7 	bl	8002d50 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0a6      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ee      	bne.n	800499e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c6:	4b52      	ldr	r3, [pc, #328]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 80049cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8092 	beq.w	8004b00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049dc:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d05c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d141      	bne.n	8004a74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f0:	4b48      	ldr	r3, [pc, #288]	; (8004b14 <HAL_RCC_OscConfig+0x4dc>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fe f9ab 	bl	8002d50 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fe f9a7 	bl	8002d50 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e078      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	019b      	lsls	r3, r3, #6
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	3b01      	subs	r3, #1
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	4933      	ldr	r1, [pc, #204]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <HAL_RCC_OscConfig+0x4dc>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe f980 	bl	8002d50 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe f97c 	bl	8002d50 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e04d      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x41c>
 8004a72:	e045      	b.n	8004b00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x4dc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fe f969 	bl	8002d50 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fe f965 	bl	8002d50 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e036      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x44a>
 8004aa0:	e02e      	b.n	8004b00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e029      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11c      	bne.n	8004afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d115      	bne.n	8004afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10d      	bne.n	8004afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d106      	bne.n	8004afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40007000 	.word	0x40007000
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470060 	.word	0x42470060

08004b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0cc      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b68      	ldr	r3, [pc, #416]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d90c      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a58      	ldr	r2, [pc, #352]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d044      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d119      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd6:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e06f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e067      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 0203 	bic.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4934      	ldr	r1, [pc, #208]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c08:	f7fe f8a2 	bl	8002d50 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	f7fe f89e 	bl	8002d50 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e04f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 020c 	and.w	r2, r3, #12
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d1eb      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d20c      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	5cd3      	ldrb	r3, [r2, r3]
 8004cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe f802 	bl	8002cc8 <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	08008800 	.word	0x08008800
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	20000004 	.word	0x20000004

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfa:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d007      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x32>
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d008      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x38>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 808d 	bne.w	8004e2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d12:	60bb      	str	r3, [r7, #8]
       break;
 8004d14:	e08c      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d16:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d18:	60bb      	str	r3, [r7, #8]
      break;
 8004d1a:	e089      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d1c:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d26:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d023      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	ea03 0501 	and.w	r5, r3, r1
 8004d48:	ea04 0602 	and.w	r6, r4, r2
 8004d4c:	4a3d      	ldr	r2, [pc, #244]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d4e:	fb02 f106 	mul.w	r1, r2, r6
 8004d52:	2200      	movs	r2, #0
 8004d54:	fb02 f205 	mul.w	r2, r2, r5
 8004d58:	440a      	add	r2, r1
 8004d5a:	493a      	ldr	r1, [pc, #232]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d5c:	fba5 0101 	umull	r0, r1, r5, r1
 8004d60:	1853      	adds	r3, r2, r1
 8004d62:	4619      	mov	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f04f 0400 	mov.w	r4, #0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	f7fb fec7 	bl	8000b00 <__aeabi_uldivmod>
 8004d72:	4603      	mov	r3, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e049      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7a:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	f04f 0400 	mov.w	r4, #0
 8004d84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	ea03 0501 	and.w	r5, r3, r1
 8004d90:	ea04 0602 	and.w	r6, r4, r2
 8004d94:	4629      	mov	r1, r5
 8004d96:	4632      	mov	r2, r6
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	f04f 0400 	mov.w	r4, #0
 8004da0:	0154      	lsls	r4, r2, #5
 8004da2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004da6:	014b      	lsls	r3, r1, #5
 8004da8:	4619      	mov	r1, r3
 8004daa:	4622      	mov	r2, r4
 8004dac:	1b49      	subs	r1, r1, r5
 8004dae:	eb62 0206 	sbc.w	r2, r2, r6
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f04f 0400 	mov.w	r4, #0
 8004dba:	0194      	lsls	r4, r2, #6
 8004dbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dc0:	018b      	lsls	r3, r1, #6
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	eb64 0402 	sbc.w	r4, r4, r2
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	00e2      	lsls	r2, r4, #3
 8004dd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dd6:	00d9      	lsls	r1, r3, #3
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4614      	mov	r4, r2
 8004ddc:	195b      	adds	r3, r3, r5
 8004dde:	eb44 0406 	adc.w	r4, r4, r6
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	02a2      	lsls	r2, r4, #10
 8004dec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004df0:	0299      	lsls	r1, r3, #10
 8004df2:	460b      	mov	r3, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	4621      	mov	r1, r4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f04f 0400 	mov.w	r4, #0
 8004e00:	461a      	mov	r2, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	f7fb fe7c 	bl	8000b00 <__aeabi_uldivmod>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	60bb      	str	r3, [r7, #8]
      break;
 8004e28:	e002      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e2c:	60bb      	str	r3, [r7, #8]
      break;
 8004e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e30:	68bb      	ldr	r3, [r7, #8]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	00b71b00 	.word	0x00b71b00

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08008810 	.word	0x08008810

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e8c:	f7ff ffdc 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e90:	4601      	mov	r1, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0b5b      	lsrs	r3, r3, #13
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4a03      	ldr	r2, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	08008810 	.word	0x08008810

08004eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e056      	b.n	8004f70 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fc fdd1 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	ea42 0103 	orr.w	r1, r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	f003 0104 	and.w	r1, r3, #4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e01d      	b.n	8004fc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd f9d2 	bl	8002348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f000 fb9c 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d007      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e01d      	b.n	8005064 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fd fa1f 	bl	8002480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 fb4d 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fe22 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <HAL_TIM_PWM_Start+0x74>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_PWM_Start+0x2c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <HAL_TIM_PWM_Start+0x78>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_TIM_PWM_Start+0x30>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_TIM_PWM_Start+0x32>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40010400 	.word	0x40010400

080050e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fde4 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a22      	ldr	r2, [pc, #136]	; (8005190 <HAL_TIM_PWM_Stop+0xa8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIM_PWM_Stop+0x2c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <HAL_TIM_PWM_Stop+0xac>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_TIM_PWM_Stop+0x30>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_TIM_PWM_Stop+0x32>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	f241 1311 	movw	r3, #4369	; 0x1111
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_TIM_PWM_Stop+0x66>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	f240 4344 	movw	r3, #1092	; 0x444
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <HAL_TIM_PWM_Stop+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	f241 1311 	movw	r3, #4369	; 0x1111
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <HAL_TIM_PWM_Stop+0x96>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	f240 4344 	movw	r3, #1092	; 0x444
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_TIM_PWM_Stop+0x96>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40010000 	.word	0x40010000
 8005194:	40010400 	.word	0x40010400

08005198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0202 	mvn.w	r2, #2
 80051c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa6b 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa5d 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa6e 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0204 	mvn.w	r2, #4
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa41 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa33 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa44 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b08      	cmp	r3, #8
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0208 	mvn.w	r2, #8
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa17 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa09 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa1a 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0210 	mvn.w	r2, #16
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2208      	movs	r2, #8
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9ed 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9df 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f9f0 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0201 	mvn.w	r2, #1
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb ff8c 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fdbe 	bl	8005ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d10e      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d107      	bne.n	8005374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9b5 	bl	80056de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b20      	cmp	r3, #32
 8005380:	d10e      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b20      	cmp	r3, #32
 800538e:	d107      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0220 	mvn.w	r2, #32
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fd88 	bl	8005eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053be:	2302      	movs	r3, #2
 80053c0:	e0b4      	b.n	800552c <HAL_TIM_PWM_ConfigChannel+0x184>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	f200 809f 	bhi.w	8005518 <HAL_TIM_PWM_ConfigChannel+0x170>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005415 	.word	0x08005415
 80053e4:	08005519 	.word	0x08005519
 80053e8:	08005519 	.word	0x08005519
 80053ec:	08005519 	.word	0x08005519
 80053f0:	08005455 	.word	0x08005455
 80053f4:	08005519 	.word	0x08005519
 80053f8:	08005519 	.word	0x08005519
 80053fc:	08005519 	.word	0x08005519
 8005400:	08005497 	.word	0x08005497
 8005404:	08005519 	.word	0x08005519
 8005408:	08005519 	.word	0x08005519
 800540c:	08005519 	.word	0x08005519
 8005410:	080054d7 	.word	0x080054d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fa0a 	bl	8005834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0208 	orr.w	r2, r2, #8
 800542e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
      break;
 8005452:	e062      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa5a 	bl	8005914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	619a      	str	r2, [r3, #24]
      break;
 8005494:	e041      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 faaf 	bl	8005a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0204 	bic.w	r2, r2, #4
 80054c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	61da      	str	r2, [r3, #28]
      break;
 80054d4:	e021      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fb03 	bl	8005ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	021a      	lsls	r2, r3, #8
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	61da      	str	r2, [r3, #28]
      break;
 8005516:	e000      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005518:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e0a6      	b.n	800569a <HAL_TIM_ConfigClockSource+0x166>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800556a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d067      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0x120>
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d80b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x6c>
 8005588:	2b10      	cmp	r3, #16
 800558a:	d073      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0x140>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d802      	bhi.n	8005596 <HAL_TIM_ConfigClockSource+0x62>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d06f      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005594:	e078      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005596:	2b20      	cmp	r3, #32
 8005598:	d06c      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0x140>
 800559a:	2b30      	cmp	r3, #48	; 0x30
 800559c:	d06a      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800559e:	e073      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055a0:	2b70      	cmp	r3, #112	; 0x70
 80055a2:	d00d      	beq.n	80055c0 <HAL_TIM_ConfigClockSource+0x8c>
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d804      	bhi.n	80055b2 <HAL_TIM_ConfigClockSource+0x7e>
 80055a8:	2b50      	cmp	r3, #80	; 0x50
 80055aa:	d033      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0xe0>
 80055ac:	2b60      	cmp	r3, #96	; 0x60
 80055ae:	d041      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055b0:	e06a      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d066      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x152>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d017      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055be:	e063      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6899      	ldr	r1, [r3, #8]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f000 fb5a 	bl	8005c88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
      break;
 80055ec:	e04c      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6899      	ldr	r1, [r3, #8]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f000 fb43 	bl	8005c88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005610:	609a      	str	r2, [r3, #8]
      break;
 8005612:	e039      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	461a      	mov	r2, r3
 8005622:	f000 fab7 	bl	8005b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2150      	movs	r1, #80	; 0x50
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fb10 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 8005632:	e029      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	461a      	mov	r2, r3
 8005642:	f000 fad6 	bl	8005bf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2160      	movs	r1, #96	; 0x60
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fb00 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 8005652:	e019      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	461a      	mov	r2, r3
 8005662:	f000 fa97 	bl	8005b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2140      	movs	r1, #64	; 0x40
 800566c:	4618      	mov	r0, r3
 800566e:	f000 faf0 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 8005672:	e009      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fae7 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 8005684:	e000      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a40      	ldr	r2, [pc, #256]	; (8005808 <TIM_Base_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3d      	ldr	r2, [pc, #244]	; (800580c <TIM_Base_SetConfig+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <TIM_Base_SetConfig+0x120>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <TIM_Base_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d027      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <TIM_Base_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d023      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <TIM_Base_SetConfig+0x120>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d017      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <TIM_Base_SetConfig+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a27      	ldr	r2, [pc, #156]	; (8005820 <TIM_Base_SetConfig+0x12c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0x130>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_Base_SetConfig+0x134>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_Base_SetConfig+0x138>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_Base_SetConfig+0x13c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <TIM_Base_SetConfig+0x114>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <TIM_Base_SetConfig+0x124>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40010400 	.word	0x40010400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800
 8005828:	40001800 	.word	0x40001800
 800582c:	40001c00 	.word	0x40001c00
 8005830:	40002000 	.word	0x40002000

08005834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0302 	bic.w	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <TIM_OC1_SetConfig+0xd8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC1_SetConfig+0x64>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <TIM_OC1_SetConfig+0xdc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10c      	bne.n	80058b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0308 	bic.w	r3, r3, #8
 800589e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 0304 	bic.w	r3, r3, #4
 80058b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	; (800590c <TIM_OC1_SetConfig+0xd8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC1_SetConfig+0x8e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a14      	ldr	r2, [pc, #80]	; (8005910 <TIM_OC1_SetConfig+0xdc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d111      	bne.n	80058e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400

08005914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a22      	ldr	r2, [pc, #136]	; (80059f8 <TIM_OC2_SetConfig+0xe4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC2_SetConfig+0x68>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <TIM_OC2_SetConfig+0xe8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10d      	bne.n	8005998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <TIM_OC2_SetConfig+0xe4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC2_SetConfig+0x94>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a16      	ldr	r2, [pc, #88]	; (80059fc <TIM_OC2_SetConfig+0xe8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d113      	bne.n	80059d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40010400 	.word	0x40010400

08005a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <TIM_OC3_SetConfig+0xe0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC3_SetConfig+0x66>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <TIM_OC3_SetConfig+0xe4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d10d      	bne.n	8005a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <TIM_OC3_SetConfig+0xe0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC3_SetConfig+0x92>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <TIM_OC3_SetConfig+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d113      	bne.n	8005aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_OC4_SetConfig+0xa4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC4_SetConfig+0x68>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <TIM_OC4_SetConfig+0xa8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d109      	bne.n	8005b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	019b      	lsls	r3, r3, #6
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400

08005b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f023 0201 	bic.w	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 030a 	bic.w	r3, r3, #10
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b087      	sub	sp, #28
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0210 	bic.w	r2, r3, #16
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	031b      	lsls	r3, r3, #12
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f043 0307 	orr.w	r3, r3, #7
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	609a      	str	r2, [r3, #8]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2201      	movs	r2, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e05a      	b.n	8005de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d78:	d01d      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10c      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40010400 	.word	0x40010400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40001800 	.word	0x40001800

08005e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e03d      	b.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e03f      	b.n	8005f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fc8e 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	; 0x24
 8005f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fb8d 	bl	800663c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b088      	sub	sp, #32
 8005f76:	af02      	add	r7, sp, #8
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	f040 8083 	bne.w	800609a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit+0x2e>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e07b      	b.n	800609c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Transmit+0x40>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e074      	b.n	800609c <HAL_UART_Transmit+0x12a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2221      	movs	r2, #33	; 0x21
 8005fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fc8:	f7fc fec2 	bl	8002d50 <HAL_GetTick>
 8005fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005fe2:	e042      	b.n	800606a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d122      	bne.n	8006042 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2180      	movs	r1, #128	; 0x80
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f9ac 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e042      	b.n	800609c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006028:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3302      	adds	r3, #2
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	e017      	b.n	800606a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	3301      	adds	r3, #1
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	e013      	b.n	800606a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f989 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e01f      	b.n	800609c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	60ba      	str	r2, [r7, #8]
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1b7      	bne.n	8005fe4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2200      	movs	r2, #0
 800607c:	2140      	movs	r1, #64	; 0x40
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f970 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e006      	b.n	800609c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d140      	bne.n	8006140 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_UART_Receive_IT+0x26>
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e039      	b.n	8006142 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Receive_IT+0x38>
 80060d8:	2302      	movs	r3, #2
 80060da:	e032      	b.n	8006142 <HAL_UART_Receive_IT+0x9e>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	88fa      	ldrh	r2, [r7, #6]
 80060f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2222      	movs	r2, #34	; 0x22
 8006100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0220 	orr.w	r2, r2, #32
 800613a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10d      	bne.n	80061a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_UART_IRQHandler+0x52>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9cc 	bl	8006538 <UART_Receive_IT>
      return;
 80061a0:	e0d1      	b.n	8006346 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80b0 	beq.w	800630a <HAL_UART_IRQHandler+0x1ba>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <HAL_UART_IRQHandler+0x70>
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80a5 	beq.w	800630a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_UART_IRQHandler+0x90>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_UART_IRQHandler+0xb0>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	f043 0202 	orr.w	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_UART_IRQHandler+0xd0>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006218:	f043 0204 	orr.w	r2, r3, #4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <HAL_UART_IRQHandler+0xfa>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_UART_IRQHandler+0xee>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d078      	beq.n	8006344 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_UART_IRQHandler+0x11c>
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f966 	bl	8006538 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_UART_IRQHandler+0x144>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d031      	beq.n	80062f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8af 	bl	80063f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d123      	bne.n	80062f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	4a21      	ldr	r2, [pc, #132]	; (800634c <HAL_UART_IRQHandler+0x1fc>)
 80062c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fd fd89 	bl	8003de4 <HAL_DMA_Abort_IT>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062e2:	4610      	mov	r0, r2
 80062e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e6:	e00e      	b.n	8006306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f831 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ee:	e00a      	b.n	8006306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f82d 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	e006      	b.n	8006306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f829 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006304:	e01e      	b.n	8006344 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	bf00      	nop
    return;
 8006308:	e01c      	b.n	8006344 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_UART_IRQHandler+0x1d6>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f89c 	bl	800645c <UART_Transmit_IT>
    return;
 8006324:	e00f      	b.n	8006346 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_UART_IRQHandler+0x1f6>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f8e4 	bl	8006508 <UART_EndTransmit_IT>
    return;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006344:	bf00      	nop
  }
}
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08006435 	.word	0x08006435

08006350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006374:	e02c      	b.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d028      	beq.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0x30>
 8006384:	f7fc fce4 	bl	8002d50 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	d21d      	bcs.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e00f      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d0c3      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800640e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff7e 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b21      	cmp	r3, #33	; 0x21
 800646e:	d144      	bne.n	80064fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d11a      	bne.n	80064b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800648e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]
 80064a2:	e00e      	b.n	80064c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]
 80064ae:	e008      	b.n	80064c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	1c59      	adds	r1, r3, #1
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6211      	str	r1, [r2, #32]
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4619      	mov	r1, r3
 80064d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fa ff85 	bl	8001438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b22      	cmp	r3, #34	; 0x22
 800654a:	d171      	bne.n	8006630 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d123      	bne.n	800659e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10e      	bne.n	8006582 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
 8006580:	e029      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	b29b      	uxth	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28
 800659c:	e01b      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6291      	str	r1, [r2, #40]	; 0x28
 80065b6:	b2c2      	uxtb	r2, r0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e00c      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	1c58      	adds	r0, r3, #1
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	6288      	str	r0, [r1, #40]	; 0x28
 80065ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d120      	bne.n	800662c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0220 	bic.w	r2, r2, #32
 80065f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fa fe58 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e002      	b.n	8006632 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800667e:	f023 030c 	bic.w	r3, r3, #12
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	430b      	orrs	r3, r1
 800668a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	f040 818b 	bne.w	80069c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4ac1      	ldr	r2, [pc, #772]	; (80069b8 <UART_SetConfig+0x37c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d005      	beq.n	80066c4 <UART_SetConfig+0x88>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4abf      	ldr	r2, [pc, #764]	; (80069bc <UART_SetConfig+0x380>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f040 80bd 	bne.w	800683e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c4:	f7fe fbe0 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 80066c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	461d      	mov	r5, r3
 80066ce:	f04f 0600 	mov.w	r6, #0
 80066d2:	46a8      	mov	r8, r5
 80066d4:	46b1      	mov	r9, r6
 80066d6:	eb18 0308 	adds.w	r3, r8, r8
 80066da:	eb49 0409 	adc.w	r4, r9, r9
 80066de:	4698      	mov	r8, r3
 80066e0:	46a1      	mov	r9, r4
 80066e2:	eb18 0805 	adds.w	r8, r8, r5
 80066e6:	eb49 0906 	adc.w	r9, r9, r6
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066fe:	4688      	mov	r8, r1
 8006700:	4691      	mov	r9, r2
 8006702:	eb18 0005 	adds.w	r0, r8, r5
 8006706:	eb49 0106 	adc.w	r1, r9, r6
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	461d      	mov	r5, r3
 8006710:	f04f 0600 	mov.w	r6, #0
 8006714:	196b      	adds	r3, r5, r5
 8006716:	eb46 0406 	adc.w	r4, r6, r6
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	f7fa f9ef 	bl	8000b00 <__aeabi_uldivmod>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461a      	mov	r2, r3
 8006728:	4ba5      	ldr	r3, [pc, #660]	; (80069c0 <UART_SetConfig+0x384>)
 800672a:	fba3 2302 	umull	r2, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	461d      	mov	r5, r3
 8006738:	f04f 0600 	mov.w	r6, #0
 800673c:	46a9      	mov	r9, r5
 800673e:	46b2      	mov	sl, r6
 8006740:	eb19 0309 	adds.w	r3, r9, r9
 8006744:	eb4a 040a 	adc.w	r4, sl, sl
 8006748:	4699      	mov	r9, r3
 800674a:	46a2      	mov	sl, r4
 800674c:	eb19 0905 	adds.w	r9, r9, r5
 8006750:	eb4a 0a06 	adc.w	sl, sl, r6
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006768:	4689      	mov	r9, r1
 800676a:	4692      	mov	sl, r2
 800676c:	eb19 0005 	adds.w	r0, r9, r5
 8006770:	eb4a 0106 	adc.w	r1, sl, r6
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	461d      	mov	r5, r3
 800677a:	f04f 0600 	mov.w	r6, #0
 800677e:	196b      	adds	r3, r5, r5
 8006780:	eb46 0406 	adc.w	r4, r6, r6
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	f7fa f9ba 	bl	8000b00 <__aeabi_uldivmod>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	461a      	mov	r2, r3
 8006792:	4b8b      	ldr	r3, [pc, #556]	; (80069c0 <UART_SetConfig+0x384>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3332      	adds	r3, #50	; 0x32
 80067a6:	4a86      	ldr	r2, [pc, #536]	; (80069c0 <UART_SetConfig+0x384>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067b4:	4498      	add	r8, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	461d      	mov	r5, r3
 80067ba:	f04f 0600 	mov.w	r6, #0
 80067be:	46a9      	mov	r9, r5
 80067c0:	46b2      	mov	sl, r6
 80067c2:	eb19 0309 	adds.w	r3, r9, r9
 80067c6:	eb4a 040a 	adc.w	r4, sl, sl
 80067ca:	4699      	mov	r9, r3
 80067cc:	46a2      	mov	sl, r4
 80067ce:	eb19 0905 	adds.w	r9, r9, r5
 80067d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ea:	4689      	mov	r9, r1
 80067ec:	4692      	mov	sl, r2
 80067ee:	eb19 0005 	adds.w	r0, r9, r5
 80067f2:	eb4a 0106 	adc.w	r1, sl, r6
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	461d      	mov	r5, r3
 80067fc:	f04f 0600 	mov.w	r6, #0
 8006800:	196b      	adds	r3, r5, r5
 8006802:	eb46 0406 	adc.w	r4, r6, r6
 8006806:	461a      	mov	r2, r3
 8006808:	4623      	mov	r3, r4
 800680a:	f7fa f979 	bl	8000b00 <__aeabi_uldivmod>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	461a      	mov	r2, r3
 8006814:	4b6a      	ldr	r3, [pc, #424]	; (80069c0 <UART_SetConfig+0x384>)
 8006816:	fba3 1302 	umull	r1, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2164      	movs	r1, #100	; 0x64
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	3332      	adds	r3, #50	; 0x32
 8006828:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <UART_SetConfig+0x384>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	f003 0207 	and.w	r2, r3, #7
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4442      	add	r2, r8
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	e26f      	b.n	8006d1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800683e:	f7fe fb0f 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8006842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	461d      	mov	r5, r3
 8006848:	f04f 0600 	mov.w	r6, #0
 800684c:	46a8      	mov	r8, r5
 800684e:	46b1      	mov	r9, r6
 8006850:	eb18 0308 	adds.w	r3, r8, r8
 8006854:	eb49 0409 	adc.w	r4, r9, r9
 8006858:	4698      	mov	r8, r3
 800685a:	46a1      	mov	r9, r4
 800685c:	eb18 0805 	adds.w	r8, r8, r5
 8006860:	eb49 0906 	adc.w	r9, r9, r6
 8006864:	f04f 0100 	mov.w	r1, #0
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006878:	4688      	mov	r8, r1
 800687a:	4691      	mov	r9, r2
 800687c:	eb18 0005 	adds.w	r0, r8, r5
 8006880:	eb49 0106 	adc.w	r1, r9, r6
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	461d      	mov	r5, r3
 800688a:	f04f 0600 	mov.w	r6, #0
 800688e:	196b      	adds	r3, r5, r5
 8006890:	eb46 0406 	adc.w	r4, r6, r6
 8006894:	461a      	mov	r2, r3
 8006896:	4623      	mov	r3, r4
 8006898:	f7fa f932 	bl	8000b00 <__aeabi_uldivmod>
 800689c:	4603      	mov	r3, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <UART_SetConfig+0x384>)
 80068a4:	fba3 2302 	umull	r2, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	461d      	mov	r5, r3
 80068b2:	f04f 0600 	mov.w	r6, #0
 80068b6:	46a9      	mov	r9, r5
 80068b8:	46b2      	mov	sl, r6
 80068ba:	eb19 0309 	adds.w	r3, r9, r9
 80068be:	eb4a 040a 	adc.w	r4, sl, sl
 80068c2:	4699      	mov	r9, r3
 80068c4:	46a2      	mov	sl, r4
 80068c6:	eb19 0905 	adds.w	r9, r9, r5
 80068ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ce:	f04f 0100 	mov.w	r1, #0
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068e2:	4689      	mov	r9, r1
 80068e4:	4692      	mov	sl, r2
 80068e6:	eb19 0005 	adds.w	r0, r9, r5
 80068ea:	eb4a 0106 	adc.w	r1, sl, r6
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	461d      	mov	r5, r3
 80068f4:	f04f 0600 	mov.w	r6, #0
 80068f8:	196b      	adds	r3, r5, r5
 80068fa:	eb46 0406 	adc.w	r4, r6, r6
 80068fe:	461a      	mov	r2, r3
 8006900:	4623      	mov	r3, r4
 8006902:	f7fa f8fd 	bl	8000b00 <__aeabi_uldivmod>
 8006906:	4603      	mov	r3, r0
 8006908:	460c      	mov	r4, r1
 800690a:	461a      	mov	r2, r3
 800690c:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <UART_SetConfig+0x384>)
 800690e:	fba3 1302 	umull	r1, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2164      	movs	r1, #100	; 0x64
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	3332      	adds	r3, #50	; 0x32
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <UART_SetConfig+0x384>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800692e:	4498      	add	r8, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	461d      	mov	r5, r3
 8006934:	f04f 0600 	mov.w	r6, #0
 8006938:	46a9      	mov	r9, r5
 800693a:	46b2      	mov	sl, r6
 800693c:	eb19 0309 	adds.w	r3, r9, r9
 8006940:	eb4a 040a 	adc.w	r4, sl, sl
 8006944:	4699      	mov	r9, r3
 8006946:	46a2      	mov	sl, r4
 8006948:	eb19 0905 	adds.w	r9, r9, r5
 800694c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800695c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006964:	4689      	mov	r9, r1
 8006966:	4692      	mov	sl, r2
 8006968:	eb19 0005 	adds.w	r0, r9, r5
 800696c:	eb4a 0106 	adc.w	r1, sl, r6
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	461d      	mov	r5, r3
 8006976:	f04f 0600 	mov.w	r6, #0
 800697a:	196b      	adds	r3, r5, r5
 800697c:	eb46 0406 	adc.w	r4, r6, r6
 8006980:	461a      	mov	r2, r3
 8006982:	4623      	mov	r3, r4
 8006984:	f7fa f8bc 	bl	8000b00 <__aeabi_uldivmod>
 8006988:	4603      	mov	r3, r0
 800698a:	460c      	mov	r4, r1
 800698c:	461a      	mov	r2, r3
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <UART_SetConfig+0x384>)
 8006990:	fba3 1302 	umull	r1, r3, r3, r2
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	2164      	movs	r1, #100	; 0x64
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	3332      	adds	r3, #50	; 0x32
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <UART_SetConfig+0x384>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4442      	add	r2, r8
 80069b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069b6:	e1b2      	b.n	8006d1e <UART_SetConfig+0x6e2>
 80069b8:	40011000 	.word	0x40011000
 80069bc:	40011400 	.word	0x40011400
 80069c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4ad7      	ldr	r2, [pc, #860]	; (8006d28 <UART_SetConfig+0x6ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d005      	beq.n	80069da <UART_SetConfig+0x39e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4ad6      	ldr	r2, [pc, #856]	; (8006d2c <UART_SetConfig+0x6f0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f040 80d1 	bne.w	8006b7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069da:	f7fe fa55 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 80069de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	469a      	mov	sl, r3
 80069e4:	f04f 0b00 	mov.w	fp, #0
 80069e8:	46d0      	mov	r8, sl
 80069ea:	46d9      	mov	r9, fp
 80069ec:	eb18 0308 	adds.w	r3, r8, r8
 80069f0:	eb49 0409 	adc.w	r4, r9, r9
 80069f4:	4698      	mov	r8, r3
 80069f6:	46a1      	mov	r9, r4
 80069f8:	eb18 080a 	adds.w	r8, r8, sl
 80069fc:	eb49 090b 	adc.w	r9, r9, fp
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a14:	4688      	mov	r8, r1
 8006a16:	4691      	mov	r9, r2
 8006a18:	eb1a 0508 	adds.w	r5, sl, r8
 8006a1c:	eb4b 0609 	adc.w	r6, fp, r9
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	f04f 0400 	mov.w	r4, #0
 8006a32:	0094      	lsls	r4, r2, #2
 8006a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a38:	008b      	lsls	r3, r1, #2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4631      	mov	r1, r6
 8006a42:	f7fa f85d 	bl	8000b00 <__aeabi_uldivmod>
 8006a46:	4603      	mov	r3, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4bb8      	ldr	r3, [pc, #736]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	469b      	mov	fp, r3
 8006a5c:	f04f 0c00 	mov.w	ip, #0
 8006a60:	46d9      	mov	r9, fp
 8006a62:	46e2      	mov	sl, ip
 8006a64:	eb19 0309 	adds.w	r3, r9, r9
 8006a68:	eb4a 040a 	adc.w	r4, sl, sl
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	46a2      	mov	sl, r4
 8006a70:	eb19 090b 	adds.w	r9, r9, fp
 8006a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	4692      	mov	sl, r2
 8006a90:	eb1b 0509 	adds.w	r5, fp, r9
 8006a94:	eb4c 060a 	adc.w	r6, ip, sl
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	0094      	lsls	r4, r2, #2
 8006aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ab0:	008b      	lsls	r3, r1, #2
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4631      	mov	r1, r6
 8006aba:	f7fa f821 	bl	8000b00 <__aeabi_uldivmod>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4b9a      	ldr	r3, [pc, #616]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	2164      	movs	r1, #100	; 0x64
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	3332      	adds	r3, #50	; 0x32
 8006ad8:	4a95      	ldr	r2, [pc, #596]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae4:	4498      	add	r8, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	469b      	mov	fp, r3
 8006aea:	f04f 0c00 	mov.w	ip, #0
 8006aee:	46d9      	mov	r9, fp
 8006af0:	46e2      	mov	sl, ip
 8006af2:	eb19 0309 	adds.w	r3, r9, r9
 8006af6:	eb4a 040a 	adc.w	r4, sl, sl
 8006afa:	4699      	mov	r9, r3
 8006afc:	46a2      	mov	sl, r4
 8006afe:	eb19 090b 	adds.w	r9, r9, fp
 8006b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b06:	f04f 0100 	mov.w	r1, #0
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	4692      	mov	sl, r2
 8006b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006b22:	eb4c 060a 	adc.w	r6, ip, sl
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	f04f 0400 	mov.w	r4, #0
 8006b38:	0094      	lsls	r4, r2, #2
 8006b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4623      	mov	r3, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	4631      	mov	r1, r6
 8006b48:	f7f9 ffda 	bl	8000b00 <__aeabi_uldivmod>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b77      	ldr	r3, [pc, #476]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	3332      	adds	r3, #50	; 0x32
 8006b66:	4a72      	ldr	r2, [pc, #456]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 020f 	and.w	r2, r3, #15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4442      	add	r2, r8
 8006b78:	609a      	str	r2, [r3, #8]
 8006b7a:	e0d0      	b.n	8006d1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fe f970 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8006b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	469a      	mov	sl, r3
 8006b86:	f04f 0b00 	mov.w	fp, #0
 8006b8a:	46d0      	mov	r8, sl
 8006b8c:	46d9      	mov	r9, fp
 8006b8e:	eb18 0308 	adds.w	r3, r8, r8
 8006b92:	eb49 0409 	adc.w	r4, r9, r9
 8006b96:	4698      	mov	r8, r3
 8006b98:	46a1      	mov	r9, r4
 8006b9a:	eb18 080a 	adds.w	r8, r8, sl
 8006b9e:	eb49 090b 	adc.w	r9, r9, fp
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	4691      	mov	r9, r2
 8006bba:	eb1a 0508 	adds.w	r5, sl, r8
 8006bbe:	eb4b 0609 	adc.w	r6, fp, r9
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	0094      	lsls	r4, r2, #2
 8006bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bda:	008b      	lsls	r3, r1, #2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	4631      	mov	r1, r6
 8006be4:	f7f9 ff8c 	bl	8000b00 <__aeabi_uldivmod>
 8006be8:	4603      	mov	r3, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b50      	ldr	r3, [pc, #320]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	469b      	mov	fp, r3
 8006bfe:	f04f 0c00 	mov.w	ip, #0
 8006c02:	46d9      	mov	r9, fp
 8006c04:	46e2      	mov	sl, ip
 8006c06:	eb19 0309 	adds.w	r3, r9, r9
 8006c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c0e:	4699      	mov	r9, r3
 8006c10:	46a2      	mov	sl, r4
 8006c12:	eb19 090b 	adds.w	r9, r9, fp
 8006c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4692      	mov	sl, r2
 8006c32:	eb1b 0509 	adds.w	r5, fp, r9
 8006c36:	eb4c 060a 	adc.w	r6, ip, sl
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	0094      	lsls	r4, r2, #2
 8006c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c52:	008b      	lsls	r3, r1, #2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	f7f9 ff50 	bl	8000b00 <__aeabi_uldivmod>
 8006c60:	4603      	mov	r3, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	461a      	mov	r2, r3
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006c68:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	3332      	adds	r3, #50	; 0x32
 8006c7a:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c86:	4498      	add	r8, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	469b      	mov	fp, r3
 8006c8c:	f04f 0c00 	mov.w	ip, #0
 8006c90:	46d9      	mov	r9, fp
 8006c92:	46e2      	mov	sl, ip
 8006c94:	eb19 0309 	adds.w	r3, r9, r9
 8006c98:	eb4a 040a 	adc.w	r4, sl, sl
 8006c9c:	4699      	mov	r9, r3
 8006c9e:	46a2      	mov	sl, r4
 8006ca0:	eb19 090b 	adds.w	r9, r9, fp
 8006ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	4692      	mov	sl, r2
 8006cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8006cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	f04f 0400 	mov.w	r4, #0
 8006cda:	0094      	lsls	r4, r2, #2
 8006cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ce0:	008b      	lsls	r3, r1, #2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	4631      	mov	r1, r6
 8006cea:	f7f9 ff09 	bl	8000b00 <__aeabi_uldivmod>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2164      	movs	r1, #100	; 0x64
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4442      	add	r2, r8
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	e7ff      	b.n	8006d1e <UART_SetConfig+0x6e2>
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d28:	40011000 	.word	0x40011000
 8006d2c:	40011400 	.word	0x40011400
 8006d30:	51eb851f 	.word	0x51eb851f

08006d34 <__errno>:
 8006d34:	4b01      	ldr	r3, [pc, #4]	; (8006d3c <__errno+0x8>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0d      	ldr	r6, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4e0b      	ldr	r6, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f001 fd46 	bl	80087e4 <_init>
 8006d58:	1ba4      	subs	r4, r4, r6
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d68:	4798      	blx	r3
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d72:	4798      	blx	r3
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	08008a50 	.word	0x08008a50
 8006d7c:	08008a50 	.word	0x08008a50
 8006d80:	08008a50 	.word	0x08008a50
 8006d84:	08008a54 	.word	0x08008a54

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <__cvt>:
 8006d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	ec55 4b10 	vmov	r4, r5, d0
 8006da0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006da2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	460e      	mov	r6, r1
 8006daa:	4691      	mov	r9, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	bfb8      	it	lt
 8006db0:	4622      	movlt	r2, r4
 8006db2:	462b      	mov	r3, r5
 8006db4:	f027 0720 	bic.w	r7, r7, #32
 8006db8:	bfbb      	ittet	lt
 8006dba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dbe:	461d      	movlt	r5, r3
 8006dc0:	2300      	movge	r3, #0
 8006dc2:	232d      	movlt	r3, #45	; 0x2d
 8006dc4:	bfb8      	it	lt
 8006dc6:	4614      	movlt	r4, r2
 8006dc8:	2f46      	cmp	r7, #70	; 0x46
 8006dca:	700b      	strb	r3, [r1, #0]
 8006dcc:	d004      	beq.n	8006dd8 <__cvt+0x40>
 8006dce:	2f45      	cmp	r7, #69	; 0x45
 8006dd0:	d100      	bne.n	8006dd4 <__cvt+0x3c>
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	e000      	b.n	8006dda <__cvt+0x42>
 8006dd8:	2103      	movs	r1, #3
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	ab02      	add	r3, sp, #8
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4632      	mov	r2, r6
 8006de4:	4653      	mov	r3, sl
 8006de6:	ec45 4b10 	vmov	d0, r4, r5
 8006dea:	f000 fbad 	bl	8007548 <_dtoa_r>
 8006dee:	2f47      	cmp	r7, #71	; 0x47
 8006df0:	4680      	mov	r8, r0
 8006df2:	d102      	bne.n	8006dfa <__cvt+0x62>
 8006df4:	f019 0f01 	tst.w	r9, #1
 8006df8:	d026      	beq.n	8006e48 <__cvt+0xb0>
 8006dfa:	2f46      	cmp	r7, #70	; 0x46
 8006dfc:	eb08 0906 	add.w	r9, r8, r6
 8006e00:	d111      	bne.n	8006e26 <__cvt+0x8e>
 8006e02:	f898 3000 	ldrb.w	r3, [r8]
 8006e06:	2b30      	cmp	r3, #48	; 0x30
 8006e08:	d10a      	bne.n	8006e20 <__cvt+0x88>
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fe05 	bl	8000a20 <__aeabi_dcmpeq>
 8006e16:	b918      	cbnz	r0, 8006e20 <__cvt+0x88>
 8006e18:	f1c6 0601 	rsb	r6, r6, #1
 8006e1c:	f8ca 6000 	str.w	r6, [sl]
 8006e20:	f8da 3000 	ldr.w	r3, [sl]
 8006e24:	4499      	add	r9, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fdf7 	bl	8000a20 <__aeabi_dcmpeq>
 8006e32:	b938      	cbnz	r0, 8006e44 <__cvt+0xac>
 8006e34:	2230      	movs	r2, #48	; 0x30
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	454b      	cmp	r3, r9
 8006e3a:	d205      	bcs.n	8006e48 <__cvt+0xb0>
 8006e3c:	1c59      	adds	r1, r3, #1
 8006e3e:	9103      	str	r1, [sp, #12]
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e7f8      	b.n	8006e36 <__cvt+0x9e>
 8006e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e4c:	eba3 0308 	sub.w	r3, r3, r8
 8006e50:	4640      	mov	r0, r8
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	b004      	add	sp, #16
 8006e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e5a <__exponent>:
 8006e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	bfba      	itte	lt
 8006e62:	4249      	neglt	r1, r1
 8006e64:	232d      	movlt	r3, #45	; 0x2d
 8006e66:	232b      	movge	r3, #43	; 0x2b
 8006e68:	2909      	cmp	r1, #9
 8006e6a:	f804 2b02 	strb.w	r2, [r4], #2
 8006e6e:	7043      	strb	r3, [r0, #1]
 8006e70:	dd20      	ble.n	8006eb4 <__exponent+0x5a>
 8006e72:	f10d 0307 	add.w	r3, sp, #7
 8006e76:	461f      	mov	r7, r3
 8006e78:	260a      	movs	r6, #10
 8006e7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e7e:	fb06 1115 	mls	r1, r6, r5, r1
 8006e82:	3130      	adds	r1, #48	; 0x30
 8006e84:	2d09      	cmp	r5, #9
 8006e86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e8a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e8e:	4629      	mov	r1, r5
 8006e90:	dc09      	bgt.n	8006ea6 <__exponent+0x4c>
 8006e92:	3130      	adds	r1, #48	; 0x30
 8006e94:	3b02      	subs	r3, #2
 8006e96:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	d304      	bcc.n	8006eaa <__exponent+0x50>
 8006ea0:	1a10      	subs	r0, r2, r0
 8006ea2:	b003      	add	sp, #12
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	e7e7      	b.n	8006e7a <__exponent+0x20>
 8006eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eae:	f804 2b01 	strb.w	r2, [r4], #1
 8006eb2:	e7f2      	b.n	8006e9a <__exponent+0x40>
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	4419      	add	r1, r3
 8006eb8:	7083      	strb	r3, [r0, #2]
 8006eba:	1d02      	adds	r2, r0, #4
 8006ebc:	70c1      	strb	r1, [r0, #3]
 8006ebe:	e7ef      	b.n	8006ea0 <__exponent+0x46>

08006ec0 <_printf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b08d      	sub	sp, #52	; 0x34
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f001 f8f1 	bl	80080b8 <_localeconv_r>
 8006ed6:	6803      	ldr	r3, [r0, #0]
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 f974 	bl	80001c8 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	9005      	str	r0, [sp, #20]
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	f103 0208 	add.w	r2, r3, #8
 8006ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f08:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f10:	9307      	str	r3, [sp, #28]
 8006f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	4ba7      	ldr	r3, [pc, #668]	; (80071b8 <_printf_float+0x2f8>)
 8006f1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f20:	f7f9 fdb0 	bl	8000a84 <__aeabi_dcmpun>
 8006f24:	bb70      	cbnz	r0, 8006f84 <_printf_float+0xc4>
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	4ba3      	ldr	r3, [pc, #652]	; (80071b8 <_printf_float+0x2f8>)
 8006f2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f30:	f7f9 fd8a 	bl	8000a48 <__aeabi_dcmple>
 8006f34:	bb30      	cbnz	r0, 8006f84 <_printf_float+0xc4>
 8006f36:	2200      	movs	r2, #0
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 fd79 	bl	8000a34 <__aeabi_dcmplt>
 8006f42:	b110      	cbz	r0, 8006f4a <_printf_float+0x8a>
 8006f44:	232d      	movs	r3, #45	; 0x2d
 8006f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4a:	4a9c      	ldr	r2, [pc, #624]	; (80071bc <_printf_float+0x2fc>)
 8006f4c:	4b9c      	ldr	r3, [pc, #624]	; (80071c0 <_printf_float+0x300>)
 8006f4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f52:	bf8c      	ite	hi
 8006f54:	4690      	movhi	r8, r2
 8006f56:	4698      	movls	r8, r3
 8006f58:	2303      	movs	r3, #3
 8006f5a:	f02b 0204 	bic.w	r2, fp, #4
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	9700      	str	r7, [sp, #0]
 8006f68:	4633      	mov	r3, r6
 8006f6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 f9e6 	bl	8007340 <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	f040 808d 	bne.w	8007094 <_printf_float+0x1d4>
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	b00d      	add	sp, #52	; 0x34
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 fd7a 	bl	8000a84 <__aeabi_dcmpun>
 8006f90:	b110      	cbz	r0, 8006f98 <_printf_float+0xd8>
 8006f92:	4a8c      	ldr	r2, [pc, #560]	; (80071c4 <_printf_float+0x304>)
 8006f94:	4b8c      	ldr	r3, [pc, #560]	; (80071c8 <_printf_float+0x308>)
 8006f96:	e7da      	b.n	8006f4e <_printf_float+0x8e>
 8006f98:	6861      	ldr	r1, [r4, #4]
 8006f9a:	1c4b      	adds	r3, r1, #1
 8006f9c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006fa0:	a80a      	add	r0, sp, #40	; 0x28
 8006fa2:	d13e      	bne.n	8007022 <_printf_float+0x162>
 8006fa4:	2306      	movs	r3, #6
 8006fa6:	6063      	str	r3, [r4, #4]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006fae:	ab09      	add	r3, sp, #36	; 0x24
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	ec49 8b10 	vmov	d0, r8, r9
 8006fb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fba:	6022      	str	r2, [r4, #0]
 8006fbc:	f8cd a004 	str.w	sl, [sp, #4]
 8006fc0:	6861      	ldr	r1, [r4, #4]
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff fee8 	bl	8006d98 <__cvt>
 8006fc8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fcc:	2b47      	cmp	r3, #71	; 0x47
 8006fce:	4680      	mov	r8, r0
 8006fd0:	d109      	bne.n	8006fe6 <_printf_float+0x126>
 8006fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd4:	1cd8      	adds	r0, r3, #3
 8006fd6:	db02      	blt.n	8006fde <_printf_float+0x11e>
 8006fd8:	6862      	ldr	r2, [r4, #4]
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	dd47      	ble.n	800706e <_printf_float+0x1ae>
 8006fde:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fe2:	fa5f fa8a 	uxtb.w	sl, sl
 8006fe6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fec:	d824      	bhi.n	8007038 <_printf_float+0x178>
 8006fee:	3901      	subs	r1, #1
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ff6:	9109      	str	r1, [sp, #36]	; 0x24
 8006ff8:	f7ff ff2f 	bl	8006e5a <__exponent>
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffe:	1813      	adds	r3, r2, r0
 8007000:	2a01      	cmp	r2, #1
 8007002:	4681      	mov	r9, r0
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	dc02      	bgt.n	800700e <_printf_float+0x14e>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	07d1      	lsls	r1, r2, #31
 800700c:	d501      	bpl.n	8007012 <_printf_float+0x152>
 800700e:	3301      	adds	r3, #1
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0a5      	beq.n	8006f66 <_printf_float+0xa6>
 800701a:	232d      	movs	r3, #45	; 0x2d
 800701c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007020:	e7a1      	b.n	8006f66 <_printf_float+0xa6>
 8007022:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007026:	f000 8177 	beq.w	8007318 <_printf_float+0x458>
 800702a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800702e:	d1bb      	bne.n	8006fa8 <_printf_float+0xe8>
 8007030:	2900      	cmp	r1, #0
 8007032:	d1b9      	bne.n	8006fa8 <_printf_float+0xe8>
 8007034:	2301      	movs	r3, #1
 8007036:	e7b6      	b.n	8006fa6 <_printf_float+0xe6>
 8007038:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800703c:	d119      	bne.n	8007072 <_printf_float+0x1b2>
 800703e:	2900      	cmp	r1, #0
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	dd0c      	ble.n	800705e <_printf_float+0x19e>
 8007044:	6121      	str	r1, [r4, #16]
 8007046:	b913      	cbnz	r3, 800704e <_printf_float+0x18e>
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	07d2      	lsls	r2, r2, #31
 800704c:	d502      	bpl.n	8007054 <_printf_float+0x194>
 800704e:	3301      	adds	r3, #1
 8007050:	440b      	add	r3, r1
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007056:	65a3      	str	r3, [r4, #88]	; 0x58
 8007058:	f04f 0900 	mov.w	r9, #0
 800705c:	e7d9      	b.n	8007012 <_printf_float+0x152>
 800705e:	b913      	cbnz	r3, 8007066 <_printf_float+0x1a6>
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	07d0      	lsls	r0, r2, #31
 8007064:	d501      	bpl.n	800706a <_printf_float+0x1aa>
 8007066:	3302      	adds	r3, #2
 8007068:	e7f3      	b.n	8007052 <_printf_float+0x192>
 800706a:	2301      	movs	r3, #1
 800706c:	e7f1      	b.n	8007052 <_printf_float+0x192>
 800706e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007072:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007076:	4293      	cmp	r3, r2
 8007078:	db05      	blt.n	8007086 <_printf_float+0x1c6>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	07d1      	lsls	r1, r2, #31
 8007080:	d5e8      	bpl.n	8007054 <_printf_float+0x194>
 8007082:	3301      	adds	r3, #1
 8007084:	e7e5      	b.n	8007052 <_printf_float+0x192>
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfd4      	ite	le
 800708a:	f1c3 0302 	rsble	r3, r3, #2
 800708e:	2301      	movgt	r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	e7de      	b.n	8007052 <_printf_float+0x192>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	055a      	lsls	r2, r3, #21
 8007098:	d407      	bmi.n	80070aa <_printf_float+0x1ea>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	4642      	mov	r2, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	d12b      	bne.n	8007100 <_printf_float+0x240>
 80070a8:	e767      	b.n	8006f7a <_printf_float+0xba>
 80070aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80070ae:	f240 80dc 	bls.w	800726a <_printf_float+0x3aa>
 80070b2:	2200      	movs	r2, #0
 80070b4:	2300      	movs	r3, #0
 80070b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070ba:	f7f9 fcb1 	bl	8000a20 <__aeabi_dcmpeq>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d033      	beq.n	800712a <_printf_float+0x26a>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4a41      	ldr	r2, [pc, #260]	; (80071cc <_printf_float+0x30c>)
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f af54 	beq.w	8006f7a <_printf_float+0xba>
 80070d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070d6:	429a      	cmp	r2, r3
 80070d8:	db02      	blt.n	80070e0 <_printf_float+0x220>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	07d8      	lsls	r0, r3, #31
 80070de:	d50f      	bpl.n	8007100 <_printf_float+0x240>
 80070e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f af45 	beq.w	8006f7a <_printf_float+0xba>
 80070f0:	f04f 0800 	mov.w	r8, #0
 80070f4:	f104 091a 	add.w	r9, r4, #26
 80070f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fa:	3b01      	subs	r3, #1
 80070fc:	4543      	cmp	r3, r8
 80070fe:	dc09      	bgt.n	8007114 <_printf_float+0x254>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	079b      	lsls	r3, r3, #30
 8007104:	f100 8103 	bmi.w	800730e <_printf_float+0x44e>
 8007108:	68e0      	ldr	r0, [r4, #12]
 800710a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800710c:	4298      	cmp	r0, r3
 800710e:	bfb8      	it	lt
 8007110:	4618      	movlt	r0, r3
 8007112:	e734      	b.n	8006f7e <_printf_float+0xbe>
 8007114:	2301      	movs	r3, #1
 8007116:	464a      	mov	r2, r9
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af2b 	beq.w	8006f7a <_printf_float+0xba>
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	e7e6      	b.n	80070f8 <_printf_float+0x238>
 800712a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc2b      	bgt.n	8007188 <_printf_float+0x2c8>
 8007130:	2301      	movs	r3, #1
 8007132:	4a26      	ldr	r2, [pc, #152]	; (80071cc <_printf_float+0x30c>)
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f af1d 	beq.w	8006f7a <_printf_float+0xba>
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	b923      	cbnz	r3, 800714e <_printf_float+0x28e>
 8007144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007146:	b913      	cbnz	r3, 800714e <_printf_float+0x28e>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	07d9      	lsls	r1, r3, #31
 800714c:	d5d8      	bpl.n	8007100 <_printf_float+0x240>
 800714e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007152:	4631      	mov	r1, r6
 8007154:	4628      	mov	r0, r5
 8007156:	47b8      	blx	r7
 8007158:	3001      	adds	r0, #1
 800715a:	f43f af0e 	beq.w	8006f7a <_printf_float+0xba>
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	f104 0a1a 	add.w	sl, r4, #26
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	425b      	negs	r3, r3
 800716a:	454b      	cmp	r3, r9
 800716c:	dc01      	bgt.n	8007172 <_printf_float+0x2b2>
 800716e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007170:	e794      	b.n	800709c <_printf_float+0x1dc>
 8007172:	2301      	movs	r3, #1
 8007174:	4652      	mov	r2, sl
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f aefc 	beq.w	8006f7a <_printf_float+0xba>
 8007182:	f109 0901 	add.w	r9, r9, #1
 8007186:	e7ee      	b.n	8007166 <_printf_float+0x2a6>
 8007188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800718a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800718c:	429a      	cmp	r2, r3
 800718e:	bfa8      	it	ge
 8007190:	461a      	movge	r2, r3
 8007192:	2a00      	cmp	r2, #0
 8007194:	4691      	mov	r9, r2
 8007196:	dd07      	ble.n	80071a8 <_printf_float+0x2e8>
 8007198:	4613      	mov	r3, r2
 800719a:	4631      	mov	r1, r6
 800719c:	4642      	mov	r2, r8
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	f43f aee9 	beq.w	8006f7a <_printf_float+0xba>
 80071a8:	f104 031a 	add.w	r3, r4, #26
 80071ac:	f04f 0b00 	mov.w	fp, #0
 80071b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b4:	9306      	str	r3, [sp, #24]
 80071b6:	e015      	b.n	80071e4 <_printf_float+0x324>
 80071b8:	7fefffff 	.word	0x7fefffff
 80071bc:	08008824 	.word	0x08008824
 80071c0:	08008820 	.word	0x08008820
 80071c4:	0800882c 	.word	0x0800882c
 80071c8:	08008828 	.word	0x08008828
 80071cc:	08008830 	.word	0x08008830
 80071d0:	2301      	movs	r3, #1
 80071d2:	9a06      	ldr	r2, [sp, #24]
 80071d4:	4631      	mov	r1, r6
 80071d6:	4628      	mov	r0, r5
 80071d8:	47b8      	blx	r7
 80071da:	3001      	adds	r0, #1
 80071dc:	f43f aecd 	beq.w	8006f7a <_printf_float+0xba>
 80071e0:	f10b 0b01 	add.w	fp, fp, #1
 80071e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071e8:	ebaa 0309 	sub.w	r3, sl, r9
 80071ec:	455b      	cmp	r3, fp
 80071ee:	dcef      	bgt.n	80071d0 <_printf_float+0x310>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	429a      	cmp	r2, r3
 80071f6:	44d0      	add	r8, sl
 80071f8:	db15      	blt.n	8007226 <_printf_float+0x366>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	07da      	lsls	r2, r3, #31
 80071fe:	d412      	bmi.n	8007226 <_printf_float+0x366>
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007204:	eba3 020a 	sub.w	r2, r3, sl
 8007208:	eba3 0a01 	sub.w	sl, r3, r1
 800720c:	4592      	cmp	sl, r2
 800720e:	bfa8      	it	ge
 8007210:	4692      	movge	sl, r2
 8007212:	f1ba 0f00 	cmp.w	sl, #0
 8007216:	dc0e      	bgt.n	8007236 <_printf_float+0x376>
 8007218:	f04f 0800 	mov.w	r8, #0
 800721c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007220:	f104 091a 	add.w	r9, r4, #26
 8007224:	e019      	b.n	800725a <_printf_float+0x39a>
 8007226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d1e5      	bne.n	8007200 <_printf_float+0x340>
 8007234:	e6a1      	b.n	8006f7a <_printf_float+0xba>
 8007236:	4653      	mov	r3, sl
 8007238:	4642      	mov	r2, r8
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	d1e9      	bne.n	8007218 <_printf_float+0x358>
 8007244:	e699      	b.n	8006f7a <_printf_float+0xba>
 8007246:	2301      	movs	r3, #1
 8007248:	464a      	mov	r2, r9
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	f43f ae92 	beq.w	8006f7a <_printf_float+0xba>
 8007256:	f108 0801 	add.w	r8, r8, #1
 800725a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	eba3 030a 	sub.w	r3, r3, sl
 8007264:	4543      	cmp	r3, r8
 8007266:	dcee      	bgt.n	8007246 <_printf_float+0x386>
 8007268:	e74a      	b.n	8007100 <_printf_float+0x240>
 800726a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726c:	2a01      	cmp	r2, #1
 800726e:	dc01      	bgt.n	8007274 <_printf_float+0x3b4>
 8007270:	07db      	lsls	r3, r3, #31
 8007272:	d53a      	bpl.n	80072ea <_printf_float+0x42a>
 8007274:	2301      	movs	r3, #1
 8007276:	4642      	mov	r2, r8
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f ae7b 	beq.w	8006f7a <_printf_float+0xba>
 8007284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f108 0801 	add.w	r8, r8, #1
 8007294:	f43f ae71 	beq.w	8006f7a <_printf_float+0xba>
 8007298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729a:	2200      	movs	r2, #0
 800729c:	f103 3aff 	add.w	sl, r3, #4294967295
 80072a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a4:	2300      	movs	r3, #0
 80072a6:	f7f9 fbbb 	bl	8000a20 <__aeabi_dcmpeq>
 80072aa:	b9c8      	cbnz	r0, 80072e0 <_printf_float+0x420>
 80072ac:	4653      	mov	r3, sl
 80072ae:	4642      	mov	r2, r8
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	d10e      	bne.n	80072d8 <_printf_float+0x418>
 80072ba:	e65e      	b.n	8006f7a <_printf_float+0xba>
 80072bc:	2301      	movs	r3, #1
 80072be:	4652      	mov	r2, sl
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f ae57 	beq.w	8006f7a <_printf_float+0xba>
 80072cc:	f108 0801 	add.w	r8, r8, #1
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	3b01      	subs	r3, #1
 80072d4:	4543      	cmp	r3, r8
 80072d6:	dcf1      	bgt.n	80072bc <_printf_float+0x3fc>
 80072d8:	464b      	mov	r3, r9
 80072da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072de:	e6de      	b.n	800709e <_printf_float+0x1de>
 80072e0:	f04f 0800 	mov.w	r8, #0
 80072e4:	f104 0a1a 	add.w	sl, r4, #26
 80072e8:	e7f2      	b.n	80072d0 <_printf_float+0x410>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e7df      	b.n	80072ae <_printf_float+0x3ee>
 80072ee:	2301      	movs	r3, #1
 80072f0:	464a      	mov	r2, r9
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae3e 	beq.w	8006f7a <_printf_float+0xba>
 80072fe:	f108 0801 	add.w	r8, r8, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	4543      	cmp	r3, r8
 800730a:	dcf0      	bgt.n	80072ee <_printf_float+0x42e>
 800730c:	e6fc      	b.n	8007108 <_printf_float+0x248>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	f104 0919 	add.w	r9, r4, #25
 8007316:	e7f4      	b.n	8007302 <_printf_float+0x442>
 8007318:	2900      	cmp	r1, #0
 800731a:	f43f ae8b 	beq.w	8007034 <_printf_float+0x174>
 800731e:	2300      	movs	r3, #0
 8007320:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007324:	ab09      	add	r3, sp, #36	; 0x24
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	ec49 8b10 	vmov	d0, r8, r9
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	f8cd a004 	str.w	sl, [sp, #4]
 8007332:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007336:	4628      	mov	r0, r5
 8007338:	f7ff fd2e 	bl	8006d98 <__cvt>
 800733c:	4680      	mov	r8, r0
 800733e:	e648      	b.n	8006fd2 <_printf_float+0x112>

08007340 <_printf_common>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	4691      	mov	r9, r2
 8007346:	461f      	mov	r7, r3
 8007348:	688a      	ldr	r2, [r1, #8]
 800734a:	690b      	ldr	r3, [r1, #16]
 800734c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007350:	4293      	cmp	r3, r2
 8007352:	bfb8      	it	lt
 8007354:	4613      	movlt	r3, r2
 8007356:	f8c9 3000 	str.w	r3, [r9]
 800735a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800735e:	4606      	mov	r6, r0
 8007360:	460c      	mov	r4, r1
 8007362:	b112      	cbz	r2, 800736a <_printf_common+0x2a>
 8007364:	3301      	adds	r3, #1
 8007366:	f8c9 3000 	str.w	r3, [r9]
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	0699      	lsls	r1, r3, #26
 800736e:	bf42      	ittt	mi
 8007370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007374:	3302      	addmi	r3, #2
 8007376:	f8c9 3000 	strmi.w	r3, [r9]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	f015 0506 	ands.w	r5, r5, #6
 8007380:	d107      	bne.n	8007392 <_printf_common+0x52>
 8007382:	f104 0a19 	add.w	sl, r4, #25
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	f8d9 2000 	ldr.w	r2, [r9]
 800738c:	1a9b      	subs	r3, r3, r2
 800738e:	42ab      	cmp	r3, r5
 8007390:	dc28      	bgt.n	80073e4 <_printf_common+0xa4>
 8007392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	3300      	adds	r3, #0
 800739a:	bf18      	it	ne
 800739c:	2301      	movne	r3, #1
 800739e:	0692      	lsls	r2, r2, #26
 80073a0:	d42d      	bmi.n	80073fe <_printf_common+0xbe>
 80073a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	47c0      	blx	r8
 80073ac:	3001      	adds	r0, #1
 80073ae:	d020      	beq.n	80073f2 <_printf_common+0xb2>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	68e5      	ldr	r5, [r4, #12]
 80073b4:	f8d9 2000 	ldr.w	r2, [r9]
 80073b8:	f003 0306 	and.w	r3, r3, #6
 80073bc:	2b04      	cmp	r3, #4
 80073be:	bf08      	it	eq
 80073c0:	1aad      	subeq	r5, r5, r2
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	6922      	ldr	r2, [r4, #16]
 80073c6:	bf0c      	ite	eq
 80073c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073cc:	2500      	movne	r5, #0
 80073ce:	4293      	cmp	r3, r2
 80073d0:	bfc4      	itt	gt
 80073d2:	1a9b      	subgt	r3, r3, r2
 80073d4:	18ed      	addgt	r5, r5, r3
 80073d6:	f04f 0900 	mov.w	r9, #0
 80073da:	341a      	adds	r4, #26
 80073dc:	454d      	cmp	r5, r9
 80073de:	d11a      	bne.n	8007416 <_printf_common+0xd6>
 80073e0:	2000      	movs	r0, #0
 80073e2:	e008      	b.n	80073f6 <_printf_common+0xb6>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4652      	mov	r2, sl
 80073e8:	4639      	mov	r1, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	47c0      	blx	r8
 80073ee:	3001      	adds	r0, #1
 80073f0:	d103      	bne.n	80073fa <_printf_common+0xba>
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	3501      	adds	r5, #1
 80073fc:	e7c3      	b.n	8007386 <_printf_common+0x46>
 80073fe:	18e1      	adds	r1, r4, r3
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	2030      	movs	r0, #48	; 0x30
 8007404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007408:	4422      	add	r2, r4
 800740a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800740e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007412:	3302      	adds	r3, #2
 8007414:	e7c5      	b.n	80073a2 <_printf_common+0x62>
 8007416:	2301      	movs	r3, #1
 8007418:	4622      	mov	r2, r4
 800741a:	4639      	mov	r1, r7
 800741c:	4630      	mov	r0, r6
 800741e:	47c0      	blx	r8
 8007420:	3001      	adds	r0, #1
 8007422:	d0e6      	beq.n	80073f2 <_printf_common+0xb2>
 8007424:	f109 0901 	add.w	r9, r9, #1
 8007428:	e7d8      	b.n	80073dc <_printf_common+0x9c>

0800742a <quorem>:
 800742a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742e:	6903      	ldr	r3, [r0, #16]
 8007430:	690c      	ldr	r4, [r1, #16]
 8007432:	42a3      	cmp	r3, r4
 8007434:	4680      	mov	r8, r0
 8007436:	f2c0 8082 	blt.w	800753e <quorem+0x114>
 800743a:	3c01      	subs	r4, #1
 800743c:	f101 0714 	add.w	r7, r1, #20
 8007440:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007444:	f100 0614 	add.w	r6, r0, #20
 8007448:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800744c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007450:	eb06 030c 	add.w	r3, r6, ip
 8007454:	3501      	adds	r5, #1
 8007456:	eb07 090c 	add.w	r9, r7, ip
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007460:	b395      	cbz	r5, 80074c8 <quorem+0x9e>
 8007462:	f04f 0a00 	mov.w	sl, #0
 8007466:	4638      	mov	r0, r7
 8007468:	46b6      	mov	lr, r6
 800746a:	46d3      	mov	fp, sl
 800746c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007470:	b293      	uxth	r3, r2
 8007472:	fb05 a303 	mla	r3, r5, r3, sl
 8007476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800747a:	b29b      	uxth	r3, r3
 800747c:	ebab 0303 	sub.w	r3, fp, r3
 8007480:	0c12      	lsrs	r2, r2, #16
 8007482:	f8de b000 	ldr.w	fp, [lr]
 8007486:	fb05 a202 	mla	r2, r5, r2, sl
 800748a:	fa13 f38b 	uxtah	r3, r3, fp
 800748e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007492:	fa1f fb82 	uxth.w	fp, r2
 8007496:	f8de 2000 	ldr.w	r2, [lr]
 800749a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800749e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a8:	4581      	cmp	r9, r0
 80074aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80074ae:	f84e 3b04 	str.w	r3, [lr], #4
 80074b2:	d2db      	bcs.n	800746c <quorem+0x42>
 80074b4:	f856 300c 	ldr.w	r3, [r6, ip]
 80074b8:	b933      	cbnz	r3, 80074c8 <quorem+0x9e>
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	3b04      	subs	r3, #4
 80074be:	429e      	cmp	r6, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	d330      	bcc.n	8007526 <quorem+0xfc>
 80074c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80074c8:	4640      	mov	r0, r8
 80074ca:	f001 f82b 	bl	8008524 <__mcmp>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	db25      	blt.n	800751e <quorem+0xf4>
 80074d2:	3501      	adds	r5, #1
 80074d4:	4630      	mov	r0, r6
 80074d6:	f04f 0c00 	mov.w	ip, #0
 80074da:	f857 2b04 	ldr.w	r2, [r7], #4
 80074de:	f8d0 e000 	ldr.w	lr, [r0]
 80074e2:	b293      	uxth	r3, r2
 80074e4:	ebac 0303 	sub.w	r3, ip, r3
 80074e8:	0c12      	lsrs	r2, r2, #16
 80074ea:	fa13 f38e 	uxtah	r3, r3, lr
 80074ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074fc:	45b9      	cmp	r9, r7
 80074fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007502:	f840 3b04 	str.w	r3, [r0], #4
 8007506:	d2e8      	bcs.n	80074da <quorem+0xb0>
 8007508:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800750c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007510:	b92a      	cbnz	r2, 800751e <quorem+0xf4>
 8007512:	3b04      	subs	r3, #4
 8007514:	429e      	cmp	r6, r3
 8007516:	461a      	mov	r2, r3
 8007518:	d30b      	bcc.n	8007532 <quorem+0x108>
 800751a:	f8c8 4010 	str.w	r4, [r8, #16]
 800751e:	4628      	mov	r0, r5
 8007520:	b003      	add	sp, #12
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	3b04      	subs	r3, #4
 800752a:	2a00      	cmp	r2, #0
 800752c:	d1ca      	bne.n	80074c4 <quorem+0x9a>
 800752e:	3c01      	subs	r4, #1
 8007530:	e7c5      	b.n	80074be <quorem+0x94>
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	3b04      	subs	r3, #4
 8007536:	2a00      	cmp	r2, #0
 8007538:	d1ef      	bne.n	800751a <quorem+0xf0>
 800753a:	3c01      	subs	r4, #1
 800753c:	e7ea      	b.n	8007514 <quorem+0xea>
 800753e:	2000      	movs	r0, #0
 8007540:	e7ee      	b.n	8007520 <quorem+0xf6>
 8007542:	0000      	movs	r0, r0
 8007544:	0000      	movs	r0, r0
	...

08007548 <_dtoa_r>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	ec57 6b10 	vmov	r6, r7, d0
 8007550:	b097      	sub	sp, #92	; 0x5c
 8007552:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007554:	9106      	str	r1, [sp, #24]
 8007556:	4604      	mov	r4, r0
 8007558:	920b      	str	r2, [sp, #44]	; 0x2c
 800755a:	9312      	str	r3, [sp, #72]	; 0x48
 800755c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007560:	e9cd 6700 	strd	r6, r7, [sp]
 8007564:	b93d      	cbnz	r5, 8007576 <_dtoa_r+0x2e>
 8007566:	2010      	movs	r0, #16
 8007568:	f000 fdb4 	bl	80080d4 <malloc>
 800756c:	6260      	str	r0, [r4, #36]	; 0x24
 800756e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007572:	6005      	str	r5, [r0, #0]
 8007574:	60c5      	str	r5, [r0, #12]
 8007576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007578:	6819      	ldr	r1, [r3, #0]
 800757a:	b151      	cbz	r1, 8007592 <_dtoa_r+0x4a>
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	604a      	str	r2, [r1, #4]
 8007580:	2301      	movs	r3, #1
 8007582:	4093      	lsls	r3, r2
 8007584:	608b      	str	r3, [r1, #8]
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fdeb 	bl	8008162 <_Bfree>
 800758c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	1e3b      	subs	r3, r7, #0
 8007594:	bfbb      	ittet	lt
 8007596:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800759a:	9301      	strlt	r3, [sp, #4]
 800759c:	2300      	movge	r3, #0
 800759e:	2201      	movlt	r2, #1
 80075a0:	bfac      	ite	ge
 80075a2:	f8c8 3000 	strge.w	r3, [r8]
 80075a6:	f8c8 2000 	strlt.w	r2, [r8]
 80075aa:	4baf      	ldr	r3, [pc, #700]	; (8007868 <_dtoa_r+0x320>)
 80075ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075b0:	ea33 0308 	bics.w	r3, r3, r8
 80075b4:	d114      	bne.n	80075e0 <_dtoa_r+0x98>
 80075b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	b923      	cbnz	r3, 80075cc <_dtoa_r+0x84>
 80075c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f000 8542 	beq.w	8008050 <_dtoa_r+0xb08>
 80075cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800787c <_dtoa_r+0x334>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8544 	beq.w	8008060 <_dtoa_r+0xb18>
 80075d8:	f10b 0303 	add.w	r3, fp, #3
 80075dc:	f000 bd3e 	b.w	800805c <_dtoa_r+0xb14>
 80075e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f9 fa18 	bl	8000a20 <__aeabi_dcmpeq>
 80075f0:	4681      	mov	r9, r0
 80075f2:	b168      	cbz	r0, 8007610 <_dtoa_r+0xc8>
 80075f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075f6:	2301      	movs	r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8524 	beq.w	800804a <_dtoa_r+0xb02>
 8007602:	4b9a      	ldr	r3, [pc, #616]	; (800786c <_dtoa_r+0x324>)
 8007604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007606:	f103 3bff 	add.w	fp, r3, #4294967295
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	f000 bd28 	b.w	8008060 <_dtoa_r+0xb18>
 8007610:	aa14      	add	r2, sp, #80	; 0x50
 8007612:	a915      	add	r1, sp, #84	; 0x54
 8007614:	ec47 6b10 	vmov	d0, r6, r7
 8007618:	4620      	mov	r0, r4
 800761a:	f000 fffa 	bl	8008612 <__d2b>
 800761e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007622:	9004      	str	r0, [sp, #16]
 8007624:	2d00      	cmp	r5, #0
 8007626:	d07c      	beq.n	8007722 <_dtoa_r+0x1da>
 8007628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800762c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007630:	46b2      	mov	sl, r6
 8007632:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800763a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800763e:	2200      	movs	r2, #0
 8007640:	4b8b      	ldr	r3, [pc, #556]	; (8007870 <_dtoa_r+0x328>)
 8007642:	4650      	mov	r0, sl
 8007644:	4659      	mov	r1, fp
 8007646:	f7f8 fdcb 	bl	80001e0 <__aeabi_dsub>
 800764a:	a381      	add	r3, pc, #516	; (adr r3, 8007850 <_dtoa_r+0x308>)
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f7f8 ff7e 	bl	8000550 <__aeabi_dmul>
 8007654:	a380      	add	r3, pc, #512	; (adr r3, 8007858 <_dtoa_r+0x310>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f8 fdc3 	bl	80001e4 <__adddf3>
 800765e:	4606      	mov	r6, r0
 8007660:	4628      	mov	r0, r5
 8007662:	460f      	mov	r7, r1
 8007664:	f7f8 ff0a 	bl	800047c <__aeabi_i2d>
 8007668:	a37d      	add	r3, pc, #500	; (adr r3, 8007860 <_dtoa_r+0x318>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f7f8 ff6f 	bl	8000550 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f8 fdb3 	bl	80001e4 <__adddf3>
 800767e:	4606      	mov	r6, r0
 8007680:	460f      	mov	r7, r1
 8007682:	f7f9 fa15 	bl	8000ab0 <__aeabi_d2iz>
 8007686:	2200      	movs	r2, #0
 8007688:	4682      	mov	sl, r0
 800768a:	2300      	movs	r3, #0
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f7f9 f9d0 	bl	8000a34 <__aeabi_dcmplt>
 8007694:	b148      	cbz	r0, 80076aa <_dtoa_r+0x162>
 8007696:	4650      	mov	r0, sl
 8007698:	f7f8 fef0 	bl	800047c <__aeabi_i2d>
 800769c:	4632      	mov	r2, r6
 800769e:	463b      	mov	r3, r7
 80076a0:	f7f9 f9be 	bl	8000a20 <__aeabi_dcmpeq>
 80076a4:	b908      	cbnz	r0, 80076aa <_dtoa_r+0x162>
 80076a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076aa:	f1ba 0f16 	cmp.w	sl, #22
 80076ae:	d859      	bhi.n	8007764 <_dtoa_r+0x21c>
 80076b0:	4970      	ldr	r1, [pc, #448]	; (8007874 <_dtoa_r+0x32c>)
 80076b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80076b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076be:	f7f9 f9d7 	bl	8000a70 <__aeabi_dcmpgt>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d050      	beq.n	8007768 <_dtoa_r+0x220>
 80076c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ca:	2300      	movs	r3, #0
 80076cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d0:	1b5d      	subs	r5, r3, r5
 80076d2:	f1b5 0801 	subs.w	r8, r5, #1
 80076d6:	bf49      	itett	mi
 80076d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80076dc:	2300      	movpl	r3, #0
 80076de:	9305      	strmi	r3, [sp, #20]
 80076e0:	f04f 0800 	movmi.w	r8, #0
 80076e4:	bf58      	it	pl
 80076e6:	9305      	strpl	r3, [sp, #20]
 80076e8:	f1ba 0f00 	cmp.w	sl, #0
 80076ec:	db3e      	blt.n	800776c <_dtoa_r+0x224>
 80076ee:	2300      	movs	r3, #0
 80076f0:	44d0      	add	r8, sl
 80076f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	2b09      	cmp	r3, #9
 80076fc:	f200 8090 	bhi.w	8007820 <_dtoa_r+0x2d8>
 8007700:	2b05      	cmp	r3, #5
 8007702:	bfc4      	itt	gt
 8007704:	3b04      	subgt	r3, #4
 8007706:	9306      	strgt	r3, [sp, #24]
 8007708:	9b06      	ldr	r3, [sp, #24]
 800770a:	f1a3 0302 	sub.w	r3, r3, #2
 800770e:	bfcc      	ite	gt
 8007710:	2500      	movgt	r5, #0
 8007712:	2501      	movle	r5, #1
 8007714:	2b03      	cmp	r3, #3
 8007716:	f200 808f 	bhi.w	8007838 <_dtoa_r+0x2f0>
 800771a:	e8df f003 	tbb	[pc, r3]
 800771e:	7f7d      	.short	0x7f7d
 8007720:	7131      	.short	0x7131
 8007722:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007726:	441d      	add	r5, r3
 8007728:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800772c:	2820      	cmp	r0, #32
 800772e:	dd13      	ble.n	8007758 <_dtoa_r+0x210>
 8007730:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007734:	9b00      	ldr	r3, [sp, #0]
 8007736:	fa08 f800 	lsl.w	r8, r8, r0
 800773a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800773e:	fa23 f000 	lsr.w	r0, r3, r0
 8007742:	ea48 0000 	orr.w	r0, r8, r0
 8007746:	f7f8 fe89 	bl	800045c <__aeabi_ui2d>
 800774a:	2301      	movs	r3, #1
 800774c:	4682      	mov	sl, r0
 800774e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007752:	3d01      	subs	r5, #1
 8007754:	9313      	str	r3, [sp, #76]	; 0x4c
 8007756:	e772      	b.n	800763e <_dtoa_r+0xf6>
 8007758:	9b00      	ldr	r3, [sp, #0]
 800775a:	f1c0 0020 	rsb	r0, r0, #32
 800775e:	fa03 f000 	lsl.w	r0, r3, r0
 8007762:	e7f0      	b.n	8007746 <_dtoa_r+0x1fe>
 8007764:	2301      	movs	r3, #1
 8007766:	e7b1      	b.n	80076cc <_dtoa_r+0x184>
 8007768:	900f      	str	r0, [sp, #60]	; 0x3c
 800776a:	e7b0      	b.n	80076ce <_dtoa_r+0x186>
 800776c:	9b05      	ldr	r3, [sp, #20]
 800776e:	eba3 030a 	sub.w	r3, r3, sl
 8007772:	9305      	str	r3, [sp, #20]
 8007774:	f1ca 0300 	rsb	r3, sl, #0
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	2300      	movs	r3, #0
 800777c:	930e      	str	r3, [sp, #56]	; 0x38
 800777e:	e7bb      	b.n	80076f8 <_dtoa_r+0x1b0>
 8007780:	2301      	movs	r3, #1
 8007782:	930a      	str	r3, [sp, #40]	; 0x28
 8007784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd59      	ble.n	800783e <_dtoa_r+0x2f6>
 800778a:	9302      	str	r3, [sp, #8]
 800778c:	4699      	mov	r9, r3
 800778e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007790:	2200      	movs	r2, #0
 8007792:	6072      	str	r2, [r6, #4]
 8007794:	2204      	movs	r2, #4
 8007796:	f102 0014 	add.w	r0, r2, #20
 800779a:	4298      	cmp	r0, r3
 800779c:	6871      	ldr	r1, [r6, #4]
 800779e:	d953      	bls.n	8007848 <_dtoa_r+0x300>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fcaa 	bl	80080fa <_Balloc>
 80077a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a8:	6030      	str	r0, [r6, #0]
 80077aa:	f1b9 0f0e 	cmp.w	r9, #14
 80077ae:	f8d3 b000 	ldr.w	fp, [r3]
 80077b2:	f200 80e6 	bhi.w	8007982 <_dtoa_r+0x43a>
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	f000 80e3 	beq.w	8007982 <_dtoa_r+0x43a>
 80077bc:	ed9d 7b00 	vldr	d7, [sp]
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80077c8:	dd74      	ble.n	80078b4 <_dtoa_r+0x36c>
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <_dtoa_r+0x32c>)
 80077cc:	f00a 030f 	and.w	r3, sl, #15
 80077d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077d4:	ed93 7b00 	vldr	d7, [r3]
 80077d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80077dc:	06f0      	lsls	r0, r6, #27
 80077de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80077e2:	d565      	bpl.n	80078b0 <_dtoa_r+0x368>
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <_dtoa_r+0x330>)
 80077e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077ee:	f7f8 ffd9 	bl	80007a4 <__aeabi_ddiv>
 80077f2:	e9cd 0100 	strd	r0, r1, [sp]
 80077f6:	f006 060f 	and.w	r6, r6, #15
 80077fa:	2503      	movs	r5, #3
 80077fc:	4f1e      	ldr	r7, [pc, #120]	; (8007878 <_dtoa_r+0x330>)
 80077fe:	e04c      	b.n	800789a <_dtoa_r+0x352>
 8007800:	2301      	movs	r3, #1
 8007802:	930a      	str	r3, [sp, #40]	; 0x28
 8007804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007806:	4453      	add	r3, sl
 8007808:	f103 0901 	add.w	r9, r3, #1
 800780c:	9302      	str	r3, [sp, #8]
 800780e:	464b      	mov	r3, r9
 8007810:	2b01      	cmp	r3, #1
 8007812:	bfb8      	it	lt
 8007814:	2301      	movlt	r3, #1
 8007816:	e7ba      	b.n	800778e <_dtoa_r+0x246>
 8007818:	2300      	movs	r3, #0
 800781a:	e7b2      	b.n	8007782 <_dtoa_r+0x23a>
 800781c:	2300      	movs	r3, #0
 800781e:	e7f0      	b.n	8007802 <_dtoa_r+0x2ba>
 8007820:	2501      	movs	r5, #1
 8007822:	2300      	movs	r3, #0
 8007824:	9306      	str	r3, [sp, #24]
 8007826:	950a      	str	r5, [sp, #40]	; 0x28
 8007828:	f04f 33ff 	mov.w	r3, #4294967295
 800782c:	9302      	str	r3, [sp, #8]
 800782e:	4699      	mov	r9, r3
 8007830:	2200      	movs	r2, #0
 8007832:	2312      	movs	r3, #18
 8007834:	920b      	str	r2, [sp, #44]	; 0x2c
 8007836:	e7aa      	b.n	800778e <_dtoa_r+0x246>
 8007838:	2301      	movs	r3, #1
 800783a:	930a      	str	r3, [sp, #40]	; 0x28
 800783c:	e7f4      	b.n	8007828 <_dtoa_r+0x2e0>
 800783e:	2301      	movs	r3, #1
 8007840:	9302      	str	r3, [sp, #8]
 8007842:	4699      	mov	r9, r3
 8007844:	461a      	mov	r2, r3
 8007846:	e7f5      	b.n	8007834 <_dtoa_r+0x2ec>
 8007848:	3101      	adds	r1, #1
 800784a:	6071      	str	r1, [r6, #4]
 800784c:	0052      	lsls	r2, r2, #1
 800784e:	e7a2      	b.n	8007796 <_dtoa_r+0x24e>
 8007850:	636f4361 	.word	0x636f4361
 8007854:	3fd287a7 	.word	0x3fd287a7
 8007858:	8b60c8b3 	.word	0x8b60c8b3
 800785c:	3fc68a28 	.word	0x3fc68a28
 8007860:	509f79fb 	.word	0x509f79fb
 8007864:	3fd34413 	.word	0x3fd34413
 8007868:	7ff00000 	.word	0x7ff00000
 800786c:	08008831 	.word	0x08008831
 8007870:	3ff80000 	.word	0x3ff80000
 8007874:	08008868 	.word	0x08008868
 8007878:	08008840 	.word	0x08008840
 800787c:	0800883b 	.word	0x0800883b
 8007880:	07f1      	lsls	r1, r6, #31
 8007882:	d508      	bpl.n	8007896 <_dtoa_r+0x34e>
 8007884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788c:	f7f8 fe60 	bl	8000550 <__aeabi_dmul>
 8007890:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007894:	3501      	adds	r5, #1
 8007896:	1076      	asrs	r6, r6, #1
 8007898:	3708      	adds	r7, #8
 800789a:	2e00      	cmp	r6, #0
 800789c:	d1f0      	bne.n	8007880 <_dtoa_r+0x338>
 800789e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a6:	f7f8 ff7d 	bl	80007a4 <__aeabi_ddiv>
 80078aa:	e9cd 0100 	strd	r0, r1, [sp]
 80078ae:	e01a      	b.n	80078e6 <_dtoa_r+0x39e>
 80078b0:	2502      	movs	r5, #2
 80078b2:	e7a3      	b.n	80077fc <_dtoa_r+0x2b4>
 80078b4:	f000 80a0 	beq.w	80079f8 <_dtoa_r+0x4b0>
 80078b8:	f1ca 0600 	rsb	r6, sl, #0
 80078bc:	4b9f      	ldr	r3, [pc, #636]	; (8007b3c <_dtoa_r+0x5f4>)
 80078be:	4fa0      	ldr	r7, [pc, #640]	; (8007b40 <_dtoa_r+0x5f8>)
 80078c0:	f006 020f 	and.w	r2, r6, #15
 80078c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078d0:	f7f8 fe3e 	bl	8000550 <__aeabi_dmul>
 80078d4:	e9cd 0100 	strd	r0, r1, [sp]
 80078d8:	1136      	asrs	r6, r6, #4
 80078da:	2300      	movs	r3, #0
 80078dc:	2502      	movs	r5, #2
 80078de:	2e00      	cmp	r6, #0
 80078e0:	d17f      	bne.n	80079e2 <_dtoa_r+0x49a>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e1      	bne.n	80078aa <_dtoa_r+0x362>
 80078e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8087 	beq.w	80079fc <_dtoa_r+0x4b4>
 80078ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078f2:	2200      	movs	r2, #0
 80078f4:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <_dtoa_r+0x5fc>)
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f9 f89b 	bl	8000a34 <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d07c      	beq.n	80079fc <_dtoa_r+0x4b4>
 8007902:	f1b9 0f00 	cmp.w	r9, #0
 8007906:	d079      	beq.n	80079fc <_dtoa_r+0x4b4>
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd35      	ble.n	800797a <_dtoa_r+0x432>
 800790e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007912:	9308      	str	r3, [sp, #32]
 8007914:	4639      	mov	r1, r7
 8007916:	2200      	movs	r2, #0
 8007918:	4b8b      	ldr	r3, [pc, #556]	; (8007b48 <_dtoa_r+0x600>)
 800791a:	4630      	mov	r0, r6
 800791c:	f7f8 fe18 	bl	8000550 <__aeabi_dmul>
 8007920:	e9cd 0100 	strd	r0, r1, [sp]
 8007924:	9f02      	ldr	r7, [sp, #8]
 8007926:	3501      	adds	r5, #1
 8007928:	4628      	mov	r0, r5
 800792a:	f7f8 fda7 	bl	800047c <__aeabi_i2d>
 800792e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007932:	f7f8 fe0d 	bl	8000550 <__aeabi_dmul>
 8007936:	2200      	movs	r2, #0
 8007938:	4b84      	ldr	r3, [pc, #528]	; (8007b4c <_dtoa_r+0x604>)
 800793a:	f7f8 fc53 	bl	80001e4 <__adddf3>
 800793e:	4605      	mov	r5, r0
 8007940:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007944:	2f00      	cmp	r7, #0
 8007946:	d15d      	bne.n	8007a04 <_dtoa_r+0x4bc>
 8007948:	2200      	movs	r2, #0
 800794a:	4b81      	ldr	r3, [pc, #516]	; (8007b50 <_dtoa_r+0x608>)
 800794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007950:	f7f8 fc46 	bl	80001e0 <__aeabi_dsub>
 8007954:	462a      	mov	r2, r5
 8007956:	4633      	mov	r3, r6
 8007958:	e9cd 0100 	strd	r0, r1, [sp]
 800795c:	f7f9 f888 	bl	8000a70 <__aeabi_dcmpgt>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 8288 	bne.w	8007e76 <_dtoa_r+0x92e>
 8007966:	462a      	mov	r2, r5
 8007968:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800796c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007970:	f7f9 f860 	bl	8000a34 <__aeabi_dcmplt>
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 827c 	bne.w	8007e72 <_dtoa_r+0x92a>
 800797a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800797e:	e9cd 2300 	strd	r2, r3, [sp]
 8007982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007984:	2b00      	cmp	r3, #0
 8007986:	f2c0 8150 	blt.w	8007c2a <_dtoa_r+0x6e2>
 800798a:	f1ba 0f0e 	cmp.w	sl, #14
 800798e:	f300 814c 	bgt.w	8007c2a <_dtoa_r+0x6e2>
 8007992:	4b6a      	ldr	r3, [pc, #424]	; (8007b3c <_dtoa_r+0x5f4>)
 8007994:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007998:	ed93 7b00 	vldr	d7, [r3]
 800799c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079a4:	f280 80d8 	bge.w	8007b58 <_dtoa_r+0x610>
 80079a8:	f1b9 0f00 	cmp.w	r9, #0
 80079ac:	f300 80d4 	bgt.w	8007b58 <_dtoa_r+0x610>
 80079b0:	f040 825e 	bne.w	8007e70 <_dtoa_r+0x928>
 80079b4:	2200      	movs	r2, #0
 80079b6:	4b66      	ldr	r3, [pc, #408]	; (8007b50 <_dtoa_r+0x608>)
 80079b8:	ec51 0b17 	vmov	r0, r1, d7
 80079bc:	f7f8 fdc8 	bl	8000550 <__aeabi_dmul>
 80079c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079c4:	f7f9 f84a 	bl	8000a5c <__aeabi_dcmpge>
 80079c8:	464f      	mov	r7, r9
 80079ca:	464e      	mov	r6, r9
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f040 8234 	bne.w	8007e3a <_dtoa_r+0x8f2>
 80079d2:	2331      	movs	r3, #49	; 0x31
 80079d4:	f10b 0501 	add.w	r5, fp, #1
 80079d8:	f88b 3000 	strb.w	r3, [fp]
 80079dc:	f10a 0a01 	add.w	sl, sl, #1
 80079e0:	e22f      	b.n	8007e42 <_dtoa_r+0x8fa>
 80079e2:	07f2      	lsls	r2, r6, #31
 80079e4:	d505      	bpl.n	80079f2 <_dtoa_r+0x4aa>
 80079e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ea:	f7f8 fdb1 	bl	8000550 <__aeabi_dmul>
 80079ee:	3501      	adds	r5, #1
 80079f0:	2301      	movs	r3, #1
 80079f2:	1076      	asrs	r6, r6, #1
 80079f4:	3708      	adds	r7, #8
 80079f6:	e772      	b.n	80078de <_dtoa_r+0x396>
 80079f8:	2502      	movs	r5, #2
 80079fa:	e774      	b.n	80078e6 <_dtoa_r+0x39e>
 80079fc:	f8cd a020 	str.w	sl, [sp, #32]
 8007a00:	464f      	mov	r7, r9
 8007a02:	e791      	b.n	8007928 <_dtoa_r+0x3e0>
 8007a04:	4b4d      	ldr	r3, [pc, #308]	; (8007b3c <_dtoa_r+0x5f4>)
 8007a06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d047      	beq.n	8007aa4 <_dtoa_r+0x55c>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	2000      	movs	r0, #0
 8007a1a:	494e      	ldr	r1, [pc, #312]	; (8007b54 <_dtoa_r+0x60c>)
 8007a1c:	f7f8 fec2 	bl	80007a4 <__aeabi_ddiv>
 8007a20:	462a      	mov	r2, r5
 8007a22:	4633      	mov	r3, r6
 8007a24:	f7f8 fbdc 	bl	80001e0 <__aeabi_dsub>
 8007a28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a2c:	465d      	mov	r5, fp
 8007a2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a32:	f7f9 f83d 	bl	8000ab0 <__aeabi_d2iz>
 8007a36:	4606      	mov	r6, r0
 8007a38:	f7f8 fd20 	bl	800047c <__aeabi_i2d>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a44:	f7f8 fbcc 	bl	80001e0 <__aeabi_dsub>
 8007a48:	3630      	adds	r6, #48	; 0x30
 8007a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a52:	e9cd 0100 	strd	r0, r1, [sp]
 8007a56:	f7f8 ffed 	bl	8000a34 <__aeabi_dcmplt>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d163      	bne.n	8007b26 <_dtoa_r+0x5de>
 8007a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a62:	2000      	movs	r0, #0
 8007a64:	4937      	ldr	r1, [pc, #220]	; (8007b44 <_dtoa_r+0x5fc>)
 8007a66:	f7f8 fbbb 	bl	80001e0 <__aeabi_dsub>
 8007a6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a6e:	f7f8 ffe1 	bl	8000a34 <__aeabi_dcmplt>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f040 80b7 	bne.w	8007be6 <_dtoa_r+0x69e>
 8007a78:	eba5 030b 	sub.w	r3, r5, fp
 8007a7c:	429f      	cmp	r7, r3
 8007a7e:	f77f af7c 	ble.w	800797a <_dtoa_r+0x432>
 8007a82:	2200      	movs	r2, #0
 8007a84:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <_dtoa_r+0x600>)
 8007a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a8a:	f7f8 fd61 	bl	8000550 <__aeabi_dmul>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a94:	4b2c      	ldr	r3, [pc, #176]	; (8007b48 <_dtoa_r+0x600>)
 8007a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a9a:	f7f8 fd59 	bl	8000550 <__aeabi_dmul>
 8007a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8007aa2:	e7c4      	b.n	8007a2e <_dtoa_r+0x4e6>
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4633      	mov	r3, r6
 8007aa8:	f7f8 fd52 	bl	8000550 <__aeabi_dmul>
 8007aac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ab0:	eb0b 0507 	add.w	r5, fp, r7
 8007ab4:	465e      	mov	r6, fp
 8007ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aba:	f7f8 fff9 	bl	8000ab0 <__aeabi_d2iz>
 8007abe:	4607      	mov	r7, r0
 8007ac0:	f7f8 fcdc 	bl	800047c <__aeabi_i2d>
 8007ac4:	3730      	adds	r7, #48	; 0x30
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ace:	f7f8 fb87 	bl	80001e0 <__aeabi_dsub>
 8007ad2:	f806 7b01 	strb.w	r7, [r6], #1
 8007ad6:	42ae      	cmp	r6, r5
 8007ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	d126      	bne.n	8007b30 <_dtoa_r+0x5e8>
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <_dtoa_r+0x60c>)
 8007ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ae8:	f7f8 fb7c 	bl	80001e4 <__adddf3>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af4:	f7f8 ffbc 	bl	8000a70 <__aeabi_dcmpgt>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d174      	bne.n	8007be6 <_dtoa_r+0x69e>
 8007afc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b00:	2000      	movs	r0, #0
 8007b02:	4914      	ldr	r1, [pc, #80]	; (8007b54 <_dtoa_r+0x60c>)
 8007b04:	f7f8 fb6c 	bl	80001e0 <__aeabi_dsub>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b10:	f7f8 ff90 	bl	8000a34 <__aeabi_dcmplt>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f af30 	beq.w	800797a <_dtoa_r+0x432>
 8007b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b1e:	2b30      	cmp	r3, #48	; 0x30
 8007b20:	f105 32ff 	add.w	r2, r5, #4294967295
 8007b24:	d002      	beq.n	8007b2c <_dtoa_r+0x5e4>
 8007b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b2a:	e04a      	b.n	8007bc2 <_dtoa_r+0x67a>
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	e7f4      	b.n	8007b1a <_dtoa_r+0x5d2>
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <_dtoa_r+0x600>)
 8007b32:	f7f8 fd0d 	bl	8000550 <__aeabi_dmul>
 8007b36:	e9cd 0100 	strd	r0, r1, [sp]
 8007b3a:	e7bc      	b.n	8007ab6 <_dtoa_r+0x56e>
 8007b3c:	08008868 	.word	0x08008868
 8007b40:	08008840 	.word	0x08008840
 8007b44:	3ff00000 	.word	0x3ff00000
 8007b48:	40240000 	.word	0x40240000
 8007b4c:	401c0000 	.word	0x401c0000
 8007b50:	40140000 	.word	0x40140000
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b5c:	465d      	mov	r5, fp
 8007b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	f7f8 fe1d 	bl	80007a4 <__aeabi_ddiv>
 8007b6a:	f7f8 ffa1 	bl	8000ab0 <__aeabi_d2iz>
 8007b6e:	4680      	mov	r8, r0
 8007b70:	f7f8 fc84 	bl	800047c <__aeabi_i2d>
 8007b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b78:	f7f8 fcea 	bl	8000550 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b88:	f7f8 fb2a 	bl	80001e0 <__aeabi_dsub>
 8007b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b90:	eba5 060b 	sub.w	r6, r5, fp
 8007b94:	45b1      	cmp	r9, r6
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	d139      	bne.n	8007c10 <_dtoa_r+0x6c8>
 8007b9c:	f7f8 fb22 	bl	80001e4 <__adddf3>
 8007ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	f7f8 ff62 	bl	8000a70 <__aeabi_dcmpgt>
 8007bac:	b9c8      	cbnz	r0, 8007be2 <_dtoa_r+0x69a>
 8007bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	f7f8 ff33 	bl	8000a20 <__aeabi_dcmpeq>
 8007bba:	b110      	cbz	r0, 8007bc2 <_dtoa_r+0x67a>
 8007bbc:	f018 0f01 	tst.w	r8, #1
 8007bc0:	d10f      	bne.n	8007be2 <_dtoa_r+0x69a>
 8007bc2:	9904      	ldr	r1, [sp, #16]
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f000 facc 	bl	8008162 <_Bfree>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bce:	702b      	strb	r3, [r5, #0]
 8007bd0:	f10a 0301 	add.w	r3, sl, #1
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8241 	beq.w	8008060 <_dtoa_r+0xb18>
 8007bde:	601d      	str	r5, [r3, #0]
 8007be0:	e23e      	b.n	8008060 <_dtoa_r+0xb18>
 8007be2:	f8cd a020 	str.w	sl, [sp, #32]
 8007be6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bea:	2a39      	cmp	r2, #57	; 0x39
 8007bec:	f105 33ff 	add.w	r3, r5, #4294967295
 8007bf0:	d108      	bne.n	8007c04 <_dtoa_r+0x6bc>
 8007bf2:	459b      	cmp	fp, r3
 8007bf4:	d10a      	bne.n	8007c0c <_dtoa_r+0x6c4>
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	2330      	movs	r3, #48	; 0x30
 8007bfe:	f88b 3000 	strb.w	r3, [fp]
 8007c02:	465b      	mov	r3, fp
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	3201      	adds	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e78c      	b.n	8007b26 <_dtoa_r+0x5de>
 8007c0c:	461d      	mov	r5, r3
 8007c0e:	e7ea      	b.n	8007be6 <_dtoa_r+0x69e>
 8007c10:	2200      	movs	r2, #0
 8007c12:	4b9b      	ldr	r3, [pc, #620]	; (8007e80 <_dtoa_r+0x938>)
 8007c14:	f7f8 fc9c 	bl	8000550 <__aeabi_dmul>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	f7f8 fefe 	bl	8000a20 <__aeabi_dcmpeq>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d09a      	beq.n	8007b5e <_dtoa_r+0x616>
 8007c28:	e7cb      	b.n	8007bc2 <_dtoa_r+0x67a>
 8007c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	f000 808b 	beq.w	8007d48 <_dtoa_r+0x800>
 8007c32:	9a06      	ldr	r2, [sp, #24]
 8007c34:	2a01      	cmp	r2, #1
 8007c36:	dc6e      	bgt.n	8007d16 <_dtoa_r+0x7ce>
 8007c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	d067      	beq.n	8007d0e <_dtoa_r+0x7c6>
 8007c3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c42:	9f07      	ldr	r7, [sp, #28]
 8007c44:	9d05      	ldr	r5, [sp, #20]
 8007c46:	9a05      	ldr	r2, [sp, #20]
 8007c48:	2101      	movs	r1, #1
 8007c4a:	441a      	add	r2, r3
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	9205      	str	r2, [sp, #20]
 8007c50:	4498      	add	r8, r3
 8007c52:	f000 fb26 	bl	80082a2 <__i2b>
 8007c56:	4606      	mov	r6, r0
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	dd0c      	ble.n	8007c76 <_dtoa_r+0x72e>
 8007c5c:	f1b8 0f00 	cmp.w	r8, #0
 8007c60:	dd09      	ble.n	8007c76 <_dtoa_r+0x72e>
 8007c62:	4545      	cmp	r5, r8
 8007c64:	9a05      	ldr	r2, [sp, #20]
 8007c66:	462b      	mov	r3, r5
 8007c68:	bfa8      	it	ge
 8007c6a:	4643      	movge	r3, r8
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	9205      	str	r2, [sp, #20]
 8007c70:	1aed      	subs	r5, r5, r3
 8007c72:	eba8 0803 	sub.w	r8, r8, r3
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	b1eb      	cbz	r3, 8007cb6 <_dtoa_r+0x76e>
 8007c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d067      	beq.n	8007d50 <_dtoa_r+0x808>
 8007c80:	b18f      	cbz	r7, 8007ca6 <_dtoa_r+0x75e>
 8007c82:	4631      	mov	r1, r6
 8007c84:	463a      	mov	r2, r7
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fbaa 	bl	80083e0 <__pow5mult>
 8007c8c:	9a04      	ldr	r2, [sp, #16]
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4606      	mov	r6, r0
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 fb0e 	bl	80082b4 <__multiply>
 8007c98:	9904      	ldr	r1, [sp, #16]
 8007c9a:	9008      	str	r0, [sp, #32]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fa60 	bl	8008162 <_Bfree>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	9b07      	ldr	r3, [sp, #28]
 8007ca8:	1bda      	subs	r2, r3, r7
 8007caa:	d004      	beq.n	8007cb6 <_dtoa_r+0x76e>
 8007cac:	9904      	ldr	r1, [sp, #16]
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fb96 	bl	80083e0 <__pow5mult>
 8007cb4:	9004      	str	r0, [sp, #16]
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 faf2 	bl	80082a2 <__i2b>
 8007cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 81d0 	beq.w	8008068 <_dtoa_r+0xb20>
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fb87 	bl	80083e0 <__pow5mult>
 8007cd2:	9b06      	ldr	r3, [sp, #24]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	dc40      	bgt.n	8007d5c <_dtoa_r+0x814>
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d139      	bne.n	8007d54 <_dtoa_r+0x80c>
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d136      	bne.n	8007d58 <_dtoa_r+0x810>
 8007cea:	9b01      	ldr	r3, [sp, #4]
 8007cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cf0:	0d1b      	lsrs	r3, r3, #20
 8007cf2:	051b      	lsls	r3, r3, #20
 8007cf4:	b12b      	cbz	r3, 8007d02 <_dtoa_r+0x7ba>
 8007cf6:	9b05      	ldr	r3, [sp, #20]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f108 0801 	add.w	r8, r8, #1
 8007d00:	2301      	movs	r3, #1
 8007d02:	9307      	str	r3, [sp, #28]
 8007d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d12a      	bne.n	8007d60 <_dtoa_r+0x818>
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e030      	b.n	8007d70 <_dtoa_r+0x828>
 8007d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d14:	e795      	b.n	8007c42 <_dtoa_r+0x6fa>
 8007d16:	9b07      	ldr	r3, [sp, #28]
 8007d18:	f109 37ff 	add.w	r7, r9, #4294967295
 8007d1c:	42bb      	cmp	r3, r7
 8007d1e:	bfbf      	itttt	lt
 8007d20:	9b07      	ldrlt	r3, [sp, #28]
 8007d22:	9707      	strlt	r7, [sp, #28]
 8007d24:	1afa      	sublt	r2, r7, r3
 8007d26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007d28:	bfbb      	ittet	lt
 8007d2a:	189b      	addlt	r3, r3, r2
 8007d2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d2e:	1bdf      	subge	r7, r3, r7
 8007d30:	2700      	movlt	r7, #0
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	bfb5      	itete	lt
 8007d38:	9b05      	ldrlt	r3, [sp, #20]
 8007d3a:	9d05      	ldrge	r5, [sp, #20]
 8007d3c:	eba3 0509 	sublt.w	r5, r3, r9
 8007d40:	464b      	movge	r3, r9
 8007d42:	bfb8      	it	lt
 8007d44:	2300      	movlt	r3, #0
 8007d46:	e77e      	b.n	8007c46 <_dtoa_r+0x6fe>
 8007d48:	9f07      	ldr	r7, [sp, #28]
 8007d4a:	9d05      	ldr	r5, [sp, #20]
 8007d4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007d4e:	e783      	b.n	8007c58 <_dtoa_r+0x710>
 8007d50:	9a07      	ldr	r2, [sp, #28]
 8007d52:	e7ab      	b.n	8007cac <_dtoa_r+0x764>
 8007d54:	2300      	movs	r3, #0
 8007d56:	e7d4      	b.n	8007d02 <_dtoa_r+0x7ba>
 8007d58:	9b00      	ldr	r3, [sp, #0]
 8007d5a:	e7d2      	b.n	8007d02 <_dtoa_r+0x7ba>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007d66:	6918      	ldr	r0, [r3, #16]
 8007d68:	f000 fa4d 	bl	8008206 <__hi0bits>
 8007d6c:	f1c0 0020 	rsb	r0, r0, #32
 8007d70:	4440      	add	r0, r8
 8007d72:	f010 001f 	ands.w	r0, r0, #31
 8007d76:	d047      	beq.n	8007e08 <_dtoa_r+0x8c0>
 8007d78:	f1c0 0320 	rsb	r3, r0, #32
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	dd3b      	ble.n	8007df8 <_dtoa_r+0x8b0>
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	f1c0 001c 	rsb	r0, r0, #28
 8007d86:	4403      	add	r3, r0
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	4405      	add	r5, r0
 8007d8c:	4480      	add	r8, r0
 8007d8e:	9b05      	ldr	r3, [sp, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dd05      	ble.n	8007da0 <_dtoa_r+0x858>
 8007d94:	461a      	mov	r2, r3
 8007d96:	9904      	ldr	r1, [sp, #16]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 fb6f 	bl	800847c <__lshift>
 8007d9e:	9004      	str	r0, [sp, #16]
 8007da0:	f1b8 0f00 	cmp.w	r8, #0
 8007da4:	dd05      	ble.n	8007db2 <_dtoa_r+0x86a>
 8007da6:	4639      	mov	r1, r7
 8007da8:	4642      	mov	r2, r8
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fb66 	bl	800847c <__lshift>
 8007db0:	4607      	mov	r7, r0
 8007db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007db4:	b353      	cbz	r3, 8007e0c <_dtoa_r+0x8c4>
 8007db6:	4639      	mov	r1, r7
 8007db8:	9804      	ldr	r0, [sp, #16]
 8007dba:	f000 fbb3 	bl	8008524 <__mcmp>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	da24      	bge.n	8007e0c <_dtoa_r+0x8c4>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	9904      	ldr	r1, [sp, #16]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f9e1 	bl	8008190 <__multadd>
 8007dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd0:	9004      	str	r0, [sp, #16]
 8007dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 814d 	beq.w	8008076 <_dtoa_r+0xb2e>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4631      	mov	r1, r6
 8007de0:	220a      	movs	r2, #10
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 f9d4 	bl	8008190 <__multadd>
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	4606      	mov	r6, r0
 8007dee:	dc4f      	bgt.n	8007e90 <_dtoa_r+0x948>
 8007df0:	9b06      	ldr	r3, [sp, #24]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	dd4c      	ble.n	8007e90 <_dtoa_r+0x948>
 8007df6:	e011      	b.n	8007e1c <_dtoa_r+0x8d4>
 8007df8:	d0c9      	beq.n	8007d8e <_dtoa_r+0x846>
 8007dfa:	9a05      	ldr	r2, [sp, #20]
 8007dfc:	331c      	adds	r3, #28
 8007dfe:	441a      	add	r2, r3
 8007e00:	9205      	str	r2, [sp, #20]
 8007e02:	441d      	add	r5, r3
 8007e04:	4498      	add	r8, r3
 8007e06:	e7c2      	b.n	8007d8e <_dtoa_r+0x846>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	e7f6      	b.n	8007dfa <_dtoa_r+0x8b2>
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	dc38      	bgt.n	8007e84 <_dtoa_r+0x93c>
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	dd35      	ble.n	8007e84 <_dtoa_r+0x93c>
 8007e18:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e1c:	9b02      	ldr	r3, [sp, #8]
 8007e1e:	b963      	cbnz	r3, 8007e3a <_dtoa_r+0x8f2>
 8007e20:	4639      	mov	r1, r7
 8007e22:	2205      	movs	r2, #5
 8007e24:	4620      	mov	r0, r4
 8007e26:	f000 f9b3 	bl	8008190 <__multadd>
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	9804      	ldr	r0, [sp, #16]
 8007e30:	f000 fb78 	bl	8008524 <__mcmp>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f73f adcc 	bgt.w	80079d2 <_dtoa_r+0x48a>
 8007e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3c:	465d      	mov	r5, fp
 8007e3e:	ea6f 0a03 	mvn.w	sl, r3
 8007e42:	f04f 0900 	mov.w	r9, #0
 8007e46:	4639      	mov	r1, r7
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 f98a 	bl	8008162 <_Bfree>
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	f43f aeb7 	beq.w	8007bc2 <_dtoa_r+0x67a>
 8007e54:	f1b9 0f00 	cmp.w	r9, #0
 8007e58:	d005      	beq.n	8007e66 <_dtoa_r+0x91e>
 8007e5a:	45b1      	cmp	r9, r6
 8007e5c:	d003      	beq.n	8007e66 <_dtoa_r+0x91e>
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 f97e 	bl	8008162 <_Bfree>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f97a 	bl	8008162 <_Bfree>
 8007e6e:	e6a8      	b.n	8007bc2 <_dtoa_r+0x67a>
 8007e70:	2700      	movs	r7, #0
 8007e72:	463e      	mov	r6, r7
 8007e74:	e7e1      	b.n	8007e3a <_dtoa_r+0x8f2>
 8007e76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e7a:	463e      	mov	r6, r7
 8007e7c:	e5a9      	b.n	80079d2 <_dtoa_r+0x48a>
 8007e7e:	bf00      	nop
 8007e80:	40240000 	.word	0x40240000
 8007e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e86:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80fa 	beq.w	8008084 <_dtoa_r+0xb3c>
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	dd05      	ble.n	8007ea0 <_dtoa_r+0x958>
 8007e94:	4631      	mov	r1, r6
 8007e96:	462a      	mov	r2, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 faef 	bl	800847c <__lshift>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	9b07      	ldr	r3, [sp, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d04c      	beq.n	8007f40 <_dtoa_r+0x9f8>
 8007ea6:	6871      	ldr	r1, [r6, #4]
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 f926 	bl	80080fa <_Balloc>
 8007eae:	6932      	ldr	r2, [r6, #16]
 8007eb0:	3202      	adds	r2, #2
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	f106 010c 	add.w	r1, r6, #12
 8007eba:	300c      	adds	r0, #12
 8007ebc:	f000 f912 	bl	80080e4 <memcpy>
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fad9 	bl	800847c <__lshift>
 8007eca:	9b00      	ldr	r3, [sp, #0]
 8007ecc:	f8cd b014 	str.w	fp, [sp, #20]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	46b1      	mov	r9, r6
 8007ed6:	9307      	str	r3, [sp, #28]
 8007ed8:	4606      	mov	r6, r0
 8007eda:	4639      	mov	r1, r7
 8007edc:	9804      	ldr	r0, [sp, #16]
 8007ede:	f7ff faa4 	bl	800742a <quorem>
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eea:	9804      	ldr	r0, [sp, #16]
 8007eec:	f000 fb1a 	bl	8008524 <__mcmp>
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	9000      	str	r0, [sp, #0]
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fb2e 	bl	8008558 <__mdiff>
 8007efc:	68c3      	ldr	r3, [r0, #12]
 8007efe:	4602      	mov	r2, r0
 8007f00:	bb03      	cbnz	r3, 8007f44 <_dtoa_r+0x9fc>
 8007f02:	4601      	mov	r1, r0
 8007f04:	9008      	str	r0, [sp, #32]
 8007f06:	9804      	ldr	r0, [sp, #16]
 8007f08:	f000 fb0c 	bl	8008524 <__mcmp>
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4611      	mov	r1, r2
 8007f12:	4620      	mov	r0, r4
 8007f14:	9308      	str	r3, [sp, #32]
 8007f16:	f000 f924 	bl	8008162 <_Bfree>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	b9a3      	cbnz	r3, 8007f48 <_dtoa_r+0xa00>
 8007f1e:	9a06      	ldr	r2, [sp, #24]
 8007f20:	b992      	cbnz	r2, 8007f48 <_dtoa_r+0xa00>
 8007f22:	9a07      	ldr	r2, [sp, #28]
 8007f24:	b982      	cbnz	r2, 8007f48 <_dtoa_r+0xa00>
 8007f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f2a:	d029      	beq.n	8007f80 <_dtoa_r+0xa38>
 8007f2c:	9b00      	ldr	r3, [sp, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd01      	ble.n	8007f36 <_dtoa_r+0x9ee>
 8007f32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007f36:	9b05      	ldr	r3, [sp, #20]
 8007f38:	1c5d      	adds	r5, r3, #1
 8007f3a:	f883 8000 	strb.w	r8, [r3]
 8007f3e:	e782      	b.n	8007e46 <_dtoa_r+0x8fe>
 8007f40:	4630      	mov	r0, r6
 8007f42:	e7c2      	b.n	8007eca <_dtoa_r+0x982>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7e3      	b.n	8007f10 <_dtoa_r+0x9c8>
 8007f48:	9a00      	ldr	r2, [sp, #0]
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	db04      	blt.n	8007f58 <_dtoa_r+0xa10>
 8007f4e:	d125      	bne.n	8007f9c <_dtoa_r+0xa54>
 8007f50:	9a06      	ldr	r2, [sp, #24]
 8007f52:	bb1a      	cbnz	r2, 8007f9c <_dtoa_r+0xa54>
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	bb0a      	cbnz	r2, 8007f9c <_dtoa_r+0xa54>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	ddec      	ble.n	8007f36 <_dtoa_r+0x9ee>
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	9904      	ldr	r1, [sp, #16]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fa8b 	bl	800847c <__lshift>
 8007f66:	4639      	mov	r1, r7
 8007f68:	9004      	str	r0, [sp, #16]
 8007f6a:	f000 fadb 	bl	8008524 <__mcmp>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	dc03      	bgt.n	8007f7a <_dtoa_r+0xa32>
 8007f72:	d1e0      	bne.n	8007f36 <_dtoa_r+0x9ee>
 8007f74:	f018 0f01 	tst.w	r8, #1
 8007f78:	d0dd      	beq.n	8007f36 <_dtoa_r+0x9ee>
 8007f7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f7e:	d1d8      	bne.n	8007f32 <_dtoa_r+0x9ea>
 8007f80:	9b05      	ldr	r3, [sp, #20]
 8007f82:	9a05      	ldr	r2, [sp, #20]
 8007f84:	1c5d      	adds	r5, r3, #1
 8007f86:	2339      	movs	r3, #57	; 0x39
 8007f88:	7013      	strb	r3, [r2, #0]
 8007f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f8e:	2b39      	cmp	r3, #57	; 0x39
 8007f90:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f94:	d04f      	beq.n	8008036 <_dtoa_r+0xaee>
 8007f96:	3301      	adds	r3, #1
 8007f98:	7013      	strb	r3, [r2, #0]
 8007f9a:	e754      	b.n	8007e46 <_dtoa_r+0x8fe>
 8007f9c:	9a05      	ldr	r2, [sp, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f102 0501 	add.w	r5, r2, #1
 8007fa4:	dd06      	ble.n	8007fb4 <_dtoa_r+0xa6c>
 8007fa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007faa:	d0e9      	beq.n	8007f80 <_dtoa_r+0xa38>
 8007fac:	f108 0801 	add.w	r8, r8, #1
 8007fb0:	9b05      	ldr	r3, [sp, #20]
 8007fb2:	e7c2      	b.n	8007f3a <_dtoa_r+0x9f2>
 8007fb4:	9a02      	ldr	r2, [sp, #8]
 8007fb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007fba:	eba5 030b 	sub.w	r3, r5, fp
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d021      	beq.n	8008006 <_dtoa_r+0xabe>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	9904      	ldr	r1, [sp, #16]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 f8e1 	bl	8008190 <__multadd>
 8007fce:	45b1      	cmp	r9, r6
 8007fd0:	9004      	str	r0, [sp, #16]
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	f04f 020a 	mov.w	r2, #10
 8007fda:	4649      	mov	r1, r9
 8007fdc:	4620      	mov	r0, r4
 8007fde:	d105      	bne.n	8007fec <_dtoa_r+0xaa4>
 8007fe0:	f000 f8d6 	bl	8008190 <__multadd>
 8007fe4:	4681      	mov	r9, r0
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	9505      	str	r5, [sp, #20]
 8007fea:	e776      	b.n	8007eda <_dtoa_r+0x992>
 8007fec:	f000 f8d0 	bl	8008190 <__multadd>
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 f8c9 	bl	8008190 <__multadd>
 8007ffe:	4606      	mov	r6, r0
 8008000:	e7f2      	b.n	8007fe8 <_dtoa_r+0xaa0>
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	2201      	movs	r2, #1
 8008008:	9904      	ldr	r1, [sp, #16]
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fa36 	bl	800847c <__lshift>
 8008010:	4639      	mov	r1, r7
 8008012:	9004      	str	r0, [sp, #16]
 8008014:	f000 fa86 	bl	8008524 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	dcb6      	bgt.n	8007f8a <_dtoa_r+0xa42>
 800801c:	d102      	bne.n	8008024 <_dtoa_r+0xadc>
 800801e:	f018 0f01 	tst.w	r8, #1
 8008022:	d1b2      	bne.n	8007f8a <_dtoa_r+0xa42>
 8008024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008028:	2b30      	cmp	r3, #48	; 0x30
 800802a:	f105 32ff 	add.w	r2, r5, #4294967295
 800802e:	f47f af0a 	bne.w	8007e46 <_dtoa_r+0x8fe>
 8008032:	4615      	mov	r5, r2
 8008034:	e7f6      	b.n	8008024 <_dtoa_r+0xadc>
 8008036:	4593      	cmp	fp, r2
 8008038:	d105      	bne.n	8008046 <_dtoa_r+0xafe>
 800803a:	2331      	movs	r3, #49	; 0x31
 800803c:	f10a 0a01 	add.w	sl, sl, #1
 8008040:	f88b 3000 	strb.w	r3, [fp]
 8008044:	e6ff      	b.n	8007e46 <_dtoa_r+0x8fe>
 8008046:	4615      	mov	r5, r2
 8008048:	e79f      	b.n	8007f8a <_dtoa_r+0xa42>
 800804a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80080b0 <_dtoa_r+0xb68>
 800804e:	e007      	b.n	8008060 <_dtoa_r+0xb18>
 8008050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008052:	f8df b060 	ldr.w	fp, [pc, #96]	; 80080b4 <_dtoa_r+0xb6c>
 8008056:	b11b      	cbz	r3, 8008060 <_dtoa_r+0xb18>
 8008058:	f10b 0308 	add.w	r3, fp, #8
 800805c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	4658      	mov	r0, fp
 8008062:	b017      	add	sp, #92	; 0x5c
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	9b06      	ldr	r3, [sp, #24]
 800806a:	2b01      	cmp	r3, #1
 800806c:	f77f ae35 	ble.w	8007cda <_dtoa_r+0x792>
 8008070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	e649      	b.n	8007d0a <_dtoa_r+0x7c2>
 8008076:	9b02      	ldr	r3, [sp, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc03      	bgt.n	8008084 <_dtoa_r+0xb3c>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	2b02      	cmp	r3, #2
 8008080:	f73f aecc 	bgt.w	8007e1c <_dtoa_r+0x8d4>
 8008084:	465d      	mov	r5, fp
 8008086:	4639      	mov	r1, r7
 8008088:	9804      	ldr	r0, [sp, #16]
 800808a:	f7ff f9ce 	bl	800742a <quorem>
 800808e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008092:	f805 8b01 	strb.w	r8, [r5], #1
 8008096:	9a02      	ldr	r2, [sp, #8]
 8008098:	eba5 030b 	sub.w	r3, r5, fp
 800809c:	429a      	cmp	r2, r3
 800809e:	ddb0      	ble.n	8008002 <_dtoa_r+0xaba>
 80080a0:	2300      	movs	r3, #0
 80080a2:	220a      	movs	r2, #10
 80080a4:	9904      	ldr	r1, [sp, #16]
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f872 	bl	8008190 <__multadd>
 80080ac:	9004      	str	r0, [sp, #16]
 80080ae:	e7ea      	b.n	8008086 <_dtoa_r+0xb3e>
 80080b0:	08008830 	.word	0x08008830
 80080b4:	08008832 	.word	0x08008832

080080b8 <_localeconv_r>:
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <_localeconv_r+0x14>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a18      	ldr	r0, [r3, #32]
 80080be:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <_localeconv_r+0x18>)
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bf08      	it	eq
 80080c4:	4618      	moveq	r0, r3
 80080c6:	30f0      	adds	r0, #240	; 0xf0
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	20000070 	.word	0x20000070

080080d4 <malloc>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <malloc+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f000 baf7 	b.w	80086cc <_malloc_r>
 80080de:	bf00      	nop
 80080e0:	2000000c 	.word	0x2000000c

080080e4 <memcpy>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	1e43      	subs	r3, r0, #1
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	d100      	bne.n	80080f0 <memcpy+0xc>
 80080ee:	bd10      	pop	{r4, pc}
 80080f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080f8:	e7f7      	b.n	80080ea <memcpy+0x6>

080080fa <_Balloc>:
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080fe:	4604      	mov	r4, r0
 8008100:	460e      	mov	r6, r1
 8008102:	b93d      	cbnz	r5, 8008114 <_Balloc+0x1a>
 8008104:	2010      	movs	r0, #16
 8008106:	f7ff ffe5 	bl	80080d4 <malloc>
 800810a:	6260      	str	r0, [r4, #36]	; 0x24
 800810c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008110:	6005      	str	r5, [r0, #0]
 8008112:	60c5      	str	r5, [r0, #12]
 8008114:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008116:	68eb      	ldr	r3, [r5, #12]
 8008118:	b183      	cbz	r3, 800813c <_Balloc+0x42>
 800811a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008122:	b9b8      	cbnz	r0, 8008154 <_Balloc+0x5a>
 8008124:	2101      	movs	r1, #1
 8008126:	fa01 f506 	lsl.w	r5, r1, r6
 800812a:	1d6a      	adds	r2, r5, #5
 800812c:	0092      	lsls	r2, r2, #2
 800812e:	4620      	mov	r0, r4
 8008130:	f000 fabe 	bl	80086b0 <_calloc_r>
 8008134:	b160      	cbz	r0, 8008150 <_Balloc+0x56>
 8008136:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800813a:	e00e      	b.n	800815a <_Balloc+0x60>
 800813c:	2221      	movs	r2, #33	; 0x21
 800813e:	2104      	movs	r1, #4
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fab5 	bl	80086b0 <_calloc_r>
 8008146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008148:	60e8      	str	r0, [r5, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e4      	bne.n	800811a <_Balloc+0x20>
 8008150:	2000      	movs	r0, #0
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	6802      	ldr	r2, [r0, #0]
 8008156:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800815a:	2300      	movs	r3, #0
 800815c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008160:	e7f7      	b.n	8008152 <_Balloc+0x58>

08008162 <_Bfree>:
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008166:	4606      	mov	r6, r0
 8008168:	460d      	mov	r5, r1
 800816a:	b93c      	cbnz	r4, 800817c <_Bfree+0x1a>
 800816c:	2010      	movs	r0, #16
 800816e:	f7ff ffb1 	bl	80080d4 <malloc>
 8008172:	6270      	str	r0, [r6, #36]	; 0x24
 8008174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008178:	6004      	str	r4, [r0, #0]
 800817a:	60c4      	str	r4, [r0, #12]
 800817c:	b13d      	cbz	r5, 800818e <_Bfree+0x2c>
 800817e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008180:	686a      	ldr	r2, [r5, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008188:	6029      	str	r1, [r5, #0]
 800818a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800818e:	bd70      	pop	{r4, r5, r6, pc}

08008190 <__multadd>:
 8008190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008194:	690d      	ldr	r5, [r1, #16]
 8008196:	461f      	mov	r7, r3
 8008198:	4606      	mov	r6, r0
 800819a:	460c      	mov	r4, r1
 800819c:	f101 0c14 	add.w	ip, r1, #20
 80081a0:	2300      	movs	r3, #0
 80081a2:	f8dc 0000 	ldr.w	r0, [ip]
 80081a6:	b281      	uxth	r1, r0
 80081a8:	fb02 7101 	mla	r1, r2, r1, r7
 80081ac:	0c0f      	lsrs	r7, r1, #16
 80081ae:	0c00      	lsrs	r0, r0, #16
 80081b0:	fb02 7000 	mla	r0, r2, r0, r7
 80081b4:	b289      	uxth	r1, r1
 80081b6:	3301      	adds	r3, #1
 80081b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80081bc:	429d      	cmp	r5, r3
 80081be:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80081c2:	f84c 1b04 	str.w	r1, [ip], #4
 80081c6:	dcec      	bgt.n	80081a2 <__multadd+0x12>
 80081c8:	b1d7      	cbz	r7, 8008200 <__multadd+0x70>
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dc12      	bgt.n	80081f6 <__multadd+0x66>
 80081d0:	6861      	ldr	r1, [r4, #4]
 80081d2:	4630      	mov	r0, r6
 80081d4:	3101      	adds	r1, #1
 80081d6:	f7ff ff90 	bl	80080fa <_Balloc>
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	3202      	adds	r2, #2
 80081de:	f104 010c 	add.w	r1, r4, #12
 80081e2:	4680      	mov	r8, r0
 80081e4:	0092      	lsls	r2, r2, #2
 80081e6:	300c      	adds	r0, #12
 80081e8:	f7ff ff7c 	bl	80080e4 <memcpy>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ffb7 	bl	8008162 <_Bfree>
 80081f4:	4644      	mov	r4, r8
 80081f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081fa:	3501      	adds	r5, #1
 80081fc:	615f      	str	r7, [r3, #20]
 80081fe:	6125      	str	r5, [r4, #16]
 8008200:	4620      	mov	r0, r4
 8008202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008206 <__hi0bits>:
 8008206:	0c02      	lsrs	r2, r0, #16
 8008208:	0412      	lsls	r2, r2, #16
 800820a:	4603      	mov	r3, r0
 800820c:	b9b2      	cbnz	r2, 800823c <__hi0bits+0x36>
 800820e:	0403      	lsls	r3, r0, #16
 8008210:	2010      	movs	r0, #16
 8008212:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008216:	bf04      	itt	eq
 8008218:	021b      	lsleq	r3, r3, #8
 800821a:	3008      	addeq	r0, #8
 800821c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008220:	bf04      	itt	eq
 8008222:	011b      	lsleq	r3, r3, #4
 8008224:	3004      	addeq	r0, #4
 8008226:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800822a:	bf04      	itt	eq
 800822c:	009b      	lsleq	r3, r3, #2
 800822e:	3002      	addeq	r0, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	db06      	blt.n	8008242 <__hi0bits+0x3c>
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	d503      	bpl.n	8008240 <__hi0bits+0x3a>
 8008238:	3001      	adds	r0, #1
 800823a:	4770      	bx	lr
 800823c:	2000      	movs	r0, #0
 800823e:	e7e8      	b.n	8008212 <__hi0bits+0xc>
 8008240:	2020      	movs	r0, #32
 8008242:	4770      	bx	lr

08008244 <__lo0bits>:
 8008244:	6803      	ldr	r3, [r0, #0]
 8008246:	f013 0207 	ands.w	r2, r3, #7
 800824a:	4601      	mov	r1, r0
 800824c:	d00b      	beq.n	8008266 <__lo0bits+0x22>
 800824e:	07da      	lsls	r2, r3, #31
 8008250:	d423      	bmi.n	800829a <__lo0bits+0x56>
 8008252:	0798      	lsls	r0, r3, #30
 8008254:	bf49      	itett	mi
 8008256:	085b      	lsrmi	r3, r3, #1
 8008258:	089b      	lsrpl	r3, r3, #2
 800825a:	2001      	movmi	r0, #1
 800825c:	600b      	strmi	r3, [r1, #0]
 800825e:	bf5c      	itt	pl
 8008260:	600b      	strpl	r3, [r1, #0]
 8008262:	2002      	movpl	r0, #2
 8008264:	4770      	bx	lr
 8008266:	b298      	uxth	r0, r3
 8008268:	b9a8      	cbnz	r0, 8008296 <__lo0bits+0x52>
 800826a:	0c1b      	lsrs	r3, r3, #16
 800826c:	2010      	movs	r0, #16
 800826e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008272:	bf04      	itt	eq
 8008274:	0a1b      	lsreq	r3, r3, #8
 8008276:	3008      	addeq	r0, #8
 8008278:	071a      	lsls	r2, r3, #28
 800827a:	bf04      	itt	eq
 800827c:	091b      	lsreq	r3, r3, #4
 800827e:	3004      	addeq	r0, #4
 8008280:	079a      	lsls	r2, r3, #30
 8008282:	bf04      	itt	eq
 8008284:	089b      	lsreq	r3, r3, #2
 8008286:	3002      	addeq	r0, #2
 8008288:	07da      	lsls	r2, r3, #31
 800828a:	d402      	bmi.n	8008292 <__lo0bits+0x4e>
 800828c:	085b      	lsrs	r3, r3, #1
 800828e:	d006      	beq.n	800829e <__lo0bits+0x5a>
 8008290:	3001      	adds	r0, #1
 8008292:	600b      	str	r3, [r1, #0]
 8008294:	4770      	bx	lr
 8008296:	4610      	mov	r0, r2
 8008298:	e7e9      	b.n	800826e <__lo0bits+0x2a>
 800829a:	2000      	movs	r0, #0
 800829c:	4770      	bx	lr
 800829e:	2020      	movs	r0, #32
 80082a0:	4770      	bx	lr

080082a2 <__i2b>:
 80082a2:	b510      	push	{r4, lr}
 80082a4:	460c      	mov	r4, r1
 80082a6:	2101      	movs	r1, #1
 80082a8:	f7ff ff27 	bl	80080fa <_Balloc>
 80082ac:	2201      	movs	r2, #1
 80082ae:	6144      	str	r4, [r0, #20]
 80082b0:	6102      	str	r2, [r0, #16]
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <__multiply>:
 80082b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4614      	mov	r4, r2
 80082ba:	690a      	ldr	r2, [r1, #16]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	429a      	cmp	r2, r3
 80082c0:	bfb8      	it	lt
 80082c2:	460b      	movlt	r3, r1
 80082c4:	4688      	mov	r8, r1
 80082c6:	bfbc      	itt	lt
 80082c8:	46a0      	movlt	r8, r4
 80082ca:	461c      	movlt	r4, r3
 80082cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80082d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082dc:	eb07 0609 	add.w	r6, r7, r9
 80082e0:	42b3      	cmp	r3, r6
 80082e2:	bfb8      	it	lt
 80082e4:	3101      	addlt	r1, #1
 80082e6:	f7ff ff08 	bl	80080fa <_Balloc>
 80082ea:	f100 0514 	add.w	r5, r0, #20
 80082ee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082f2:	462b      	mov	r3, r5
 80082f4:	2200      	movs	r2, #0
 80082f6:	4573      	cmp	r3, lr
 80082f8:	d316      	bcc.n	8008328 <__multiply+0x74>
 80082fa:	f104 0214 	add.w	r2, r4, #20
 80082fe:	f108 0114 	add.w	r1, r8, #20
 8008302:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008306:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	9b00      	ldr	r3, [sp, #0]
 800830e:	9201      	str	r2, [sp, #4]
 8008310:	4293      	cmp	r3, r2
 8008312:	d80c      	bhi.n	800832e <__multiply+0x7a>
 8008314:	2e00      	cmp	r6, #0
 8008316:	dd03      	ble.n	8008320 <__multiply+0x6c>
 8008318:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05d      	beq.n	80083dc <__multiply+0x128>
 8008320:	6106      	str	r6, [r0, #16]
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	f843 2b04 	str.w	r2, [r3], #4
 800832c:	e7e3      	b.n	80082f6 <__multiply+0x42>
 800832e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008332:	f1bb 0f00 	cmp.w	fp, #0
 8008336:	d023      	beq.n	8008380 <__multiply+0xcc>
 8008338:	4689      	mov	r9, r1
 800833a:	46ac      	mov	ip, r5
 800833c:	f04f 0800 	mov.w	r8, #0
 8008340:	f859 4b04 	ldr.w	r4, [r9], #4
 8008344:	f8dc a000 	ldr.w	sl, [ip]
 8008348:	b2a3      	uxth	r3, r4
 800834a:	fa1f fa8a 	uxth.w	sl, sl
 800834e:	fb0b a303 	mla	r3, fp, r3, sl
 8008352:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008356:	f8dc 4000 	ldr.w	r4, [ip]
 800835a:	4443      	add	r3, r8
 800835c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008360:	fb0b 840a 	mla	r4, fp, sl, r8
 8008364:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008368:	46e2      	mov	sl, ip
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008370:	454f      	cmp	r7, r9
 8008372:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008376:	f84a 3b04 	str.w	r3, [sl], #4
 800837a:	d82b      	bhi.n	80083d4 <__multiply+0x120>
 800837c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008386:	3204      	adds	r2, #4
 8008388:	f1ba 0f00 	cmp.w	sl, #0
 800838c:	d020      	beq.n	80083d0 <__multiply+0x11c>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	4689      	mov	r9, r1
 8008392:	46a8      	mov	r8, r5
 8008394:	f04f 0b00 	mov.w	fp, #0
 8008398:	f8b9 c000 	ldrh.w	ip, [r9]
 800839c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80083a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80083a4:	445c      	add	r4, fp
 80083a6:	46c4      	mov	ip, r8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083ae:	f84c 3b04 	str.w	r3, [ip], #4
 80083b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80083ba:	0c1b      	lsrs	r3, r3, #16
 80083bc:	fb0a b303 	mla	r3, sl, r3, fp
 80083c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80083c4:	454f      	cmp	r7, r9
 80083c6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80083ca:	d805      	bhi.n	80083d8 <__multiply+0x124>
 80083cc:	f8c8 3004 	str.w	r3, [r8, #4]
 80083d0:	3504      	adds	r5, #4
 80083d2:	e79b      	b.n	800830c <__multiply+0x58>
 80083d4:	46d4      	mov	ip, sl
 80083d6:	e7b3      	b.n	8008340 <__multiply+0x8c>
 80083d8:	46e0      	mov	r8, ip
 80083da:	e7dd      	b.n	8008398 <__multiply+0xe4>
 80083dc:	3e01      	subs	r6, #1
 80083de:	e799      	b.n	8008314 <__multiply+0x60>

080083e0 <__pow5mult>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
 80083e6:	f012 0203 	ands.w	r2, r2, #3
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	d007      	beq.n	8008400 <__pow5mult+0x20>
 80083f0:	3a01      	subs	r2, #1
 80083f2:	4c21      	ldr	r4, [pc, #132]	; (8008478 <__pow5mult+0x98>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fa:	f7ff fec9 	bl	8008190 <__multadd>
 80083fe:	4607      	mov	r7, r0
 8008400:	10ad      	asrs	r5, r5, #2
 8008402:	d035      	beq.n	8008470 <__pow5mult+0x90>
 8008404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008406:	b93c      	cbnz	r4, 8008418 <__pow5mult+0x38>
 8008408:	2010      	movs	r0, #16
 800840a:	f7ff fe63 	bl	80080d4 <malloc>
 800840e:	6270      	str	r0, [r6, #36]	; 0x24
 8008410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008414:	6004      	str	r4, [r0, #0]
 8008416:	60c4      	str	r4, [r0, #12]
 8008418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800841c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008420:	b94c      	cbnz	r4, 8008436 <__pow5mult+0x56>
 8008422:	f240 2171 	movw	r1, #625	; 0x271
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ff3b 	bl	80082a2 <__i2b>
 800842c:	2300      	movs	r3, #0
 800842e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008432:	4604      	mov	r4, r0
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	07eb      	lsls	r3, r5, #31
 800843c:	d50a      	bpl.n	8008454 <__pow5mult+0x74>
 800843e:	4639      	mov	r1, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4630      	mov	r0, r6
 8008444:	f7ff ff36 	bl	80082b4 <__multiply>
 8008448:	4639      	mov	r1, r7
 800844a:	4681      	mov	r9, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff fe88 	bl	8008162 <_Bfree>
 8008452:	464f      	mov	r7, r9
 8008454:	106d      	asrs	r5, r5, #1
 8008456:	d00b      	beq.n	8008470 <__pow5mult+0x90>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	b938      	cbnz	r0, 800846c <__pow5mult+0x8c>
 800845c:	4622      	mov	r2, r4
 800845e:	4621      	mov	r1, r4
 8008460:	4630      	mov	r0, r6
 8008462:	f7ff ff27 	bl	80082b4 <__multiply>
 8008466:	6020      	str	r0, [r4, #0]
 8008468:	f8c0 8000 	str.w	r8, [r0]
 800846c:	4604      	mov	r4, r0
 800846e:	e7e4      	b.n	800843a <__pow5mult+0x5a>
 8008470:	4638      	mov	r0, r7
 8008472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008476:	bf00      	nop
 8008478:	08008930 	.word	0x08008930

0800847c <__lshift>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	6849      	ldr	r1, [r1, #4]
 800848a:	eb0a 0903 	add.w	r9, sl, r3
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	4607      	mov	r7, r0
 8008492:	4616      	mov	r6, r2
 8008494:	f109 0501 	add.w	r5, r9, #1
 8008498:	42ab      	cmp	r3, r5
 800849a:	db32      	blt.n	8008502 <__lshift+0x86>
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff fe2c 	bl	80080fa <_Balloc>
 80084a2:	2300      	movs	r3, #0
 80084a4:	4680      	mov	r8, r0
 80084a6:	f100 0114 	add.w	r1, r0, #20
 80084aa:	461a      	mov	r2, r3
 80084ac:	4553      	cmp	r3, sl
 80084ae:	db2b      	blt.n	8008508 <__lshift+0x8c>
 80084b0:	6920      	ldr	r0, [r4, #16]
 80084b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084b6:	f104 0314 	add.w	r3, r4, #20
 80084ba:	f016 021f 	ands.w	r2, r6, #31
 80084be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084c6:	d025      	beq.n	8008514 <__lshift+0x98>
 80084c8:	f1c2 0e20 	rsb	lr, r2, #32
 80084cc:	2000      	movs	r0, #0
 80084ce:	681e      	ldr	r6, [r3, #0]
 80084d0:	468a      	mov	sl, r1
 80084d2:	4096      	lsls	r6, r2
 80084d4:	4330      	orrs	r0, r6
 80084d6:	f84a 0b04 	str.w	r0, [sl], #4
 80084da:	f853 0b04 	ldr.w	r0, [r3], #4
 80084de:	459c      	cmp	ip, r3
 80084e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80084e4:	d814      	bhi.n	8008510 <__lshift+0x94>
 80084e6:	6048      	str	r0, [r1, #4]
 80084e8:	b108      	cbz	r0, 80084ee <__lshift+0x72>
 80084ea:	f109 0502 	add.w	r5, r9, #2
 80084ee:	3d01      	subs	r5, #1
 80084f0:	4638      	mov	r0, r7
 80084f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80084f6:	4621      	mov	r1, r4
 80084f8:	f7ff fe33 	bl	8008162 <_Bfree>
 80084fc:	4640      	mov	r0, r8
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	3101      	adds	r1, #1
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	e7c7      	b.n	8008498 <__lshift+0x1c>
 8008508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800850c:	3301      	adds	r3, #1
 800850e:	e7cd      	b.n	80084ac <__lshift+0x30>
 8008510:	4651      	mov	r1, sl
 8008512:	e7dc      	b.n	80084ce <__lshift+0x52>
 8008514:	3904      	subs	r1, #4
 8008516:	f853 2b04 	ldr.w	r2, [r3], #4
 800851a:	f841 2f04 	str.w	r2, [r1, #4]!
 800851e:	459c      	cmp	ip, r3
 8008520:	d8f9      	bhi.n	8008516 <__lshift+0x9a>
 8008522:	e7e4      	b.n	80084ee <__lshift+0x72>

08008524 <__mcmp>:
 8008524:	6903      	ldr	r3, [r0, #16]
 8008526:	690a      	ldr	r2, [r1, #16]
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	b530      	push	{r4, r5, lr}
 800852c:	d10c      	bne.n	8008548 <__mcmp+0x24>
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	3014      	adds	r0, #20
 8008532:	3114      	adds	r1, #20
 8008534:	1884      	adds	r4, r0, r2
 8008536:	4411      	add	r1, r2
 8008538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800853c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008540:	4295      	cmp	r5, r2
 8008542:	d003      	beq.n	800854c <__mcmp+0x28>
 8008544:	d305      	bcc.n	8008552 <__mcmp+0x2e>
 8008546:	2301      	movs	r3, #1
 8008548:	4618      	mov	r0, r3
 800854a:	bd30      	pop	{r4, r5, pc}
 800854c:	42a0      	cmp	r0, r4
 800854e:	d3f3      	bcc.n	8008538 <__mcmp+0x14>
 8008550:	e7fa      	b.n	8008548 <__mcmp+0x24>
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	e7f7      	b.n	8008548 <__mcmp+0x24>

08008558 <__mdiff>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	460d      	mov	r5, r1
 800855e:	4607      	mov	r7, r0
 8008560:	4611      	mov	r1, r2
 8008562:	4628      	mov	r0, r5
 8008564:	4614      	mov	r4, r2
 8008566:	f7ff ffdd 	bl	8008524 <__mcmp>
 800856a:	1e06      	subs	r6, r0, #0
 800856c:	d108      	bne.n	8008580 <__mdiff+0x28>
 800856e:	4631      	mov	r1, r6
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff fdc2 	bl	80080fa <_Balloc>
 8008576:	2301      	movs	r3, #1
 8008578:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800857c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008580:	bfa4      	itt	ge
 8008582:	4623      	movge	r3, r4
 8008584:	462c      	movge	r4, r5
 8008586:	4638      	mov	r0, r7
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	bfa6      	itte	ge
 800858c:	461d      	movge	r5, r3
 800858e:	2600      	movge	r6, #0
 8008590:	2601      	movlt	r6, #1
 8008592:	f7ff fdb2 	bl	80080fa <_Balloc>
 8008596:	692b      	ldr	r3, [r5, #16]
 8008598:	60c6      	str	r6, [r0, #12]
 800859a:	6926      	ldr	r6, [r4, #16]
 800859c:	f105 0914 	add.w	r9, r5, #20
 80085a0:	f104 0214 	add.w	r2, r4, #20
 80085a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80085a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80085ac:	f100 0514 	add.w	r5, r0, #20
 80085b0:	f04f 0e00 	mov.w	lr, #0
 80085b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80085b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80085bc:	fa1e f18a 	uxtah	r1, lr, sl
 80085c0:	b2a3      	uxth	r3, r4
 80085c2:	1ac9      	subs	r1, r1, r3
 80085c4:	0c23      	lsrs	r3, r4, #16
 80085c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80085ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085ce:	b289      	uxth	r1, r1
 80085d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80085d4:	45c8      	cmp	r8, r9
 80085d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80085da:	4694      	mov	ip, r2
 80085dc:	f845 3b04 	str.w	r3, [r5], #4
 80085e0:	d8e8      	bhi.n	80085b4 <__mdiff+0x5c>
 80085e2:	45bc      	cmp	ip, r7
 80085e4:	d304      	bcc.n	80085f0 <__mdiff+0x98>
 80085e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80085ea:	b183      	cbz	r3, 800860e <__mdiff+0xb6>
 80085ec:	6106      	str	r6, [r0, #16]
 80085ee:	e7c5      	b.n	800857c <__mdiff+0x24>
 80085f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085f4:	fa1e f381 	uxtah	r3, lr, r1
 80085f8:	141a      	asrs	r2, r3, #16
 80085fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008604:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008608:	f845 3b04 	str.w	r3, [r5], #4
 800860c:	e7e9      	b.n	80085e2 <__mdiff+0x8a>
 800860e:	3e01      	subs	r6, #1
 8008610:	e7e9      	b.n	80085e6 <__mdiff+0x8e>

08008612 <__d2b>:
 8008612:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008616:	460e      	mov	r6, r1
 8008618:	2101      	movs	r1, #1
 800861a:	ec59 8b10 	vmov	r8, r9, d0
 800861e:	4615      	mov	r5, r2
 8008620:	f7ff fd6b 	bl	80080fa <_Balloc>
 8008624:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008628:	4607      	mov	r7, r0
 800862a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800862e:	bb34      	cbnz	r4, 800867e <__d2b+0x6c>
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	f1b8 0300 	subs.w	r3, r8, #0
 8008636:	d027      	beq.n	8008688 <__d2b+0x76>
 8008638:	a802      	add	r0, sp, #8
 800863a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800863e:	f7ff fe01 	bl	8008244 <__lo0bits>
 8008642:	9900      	ldr	r1, [sp, #0]
 8008644:	b1f0      	cbz	r0, 8008684 <__d2b+0x72>
 8008646:	9a01      	ldr	r2, [sp, #4]
 8008648:	f1c0 0320 	rsb	r3, r0, #32
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	430b      	orrs	r3, r1
 8008652:	40c2      	lsrs	r2, r0
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	9201      	str	r2, [sp, #4]
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	bf14      	ite	ne
 8008660:	2102      	movne	r1, #2
 8008662:	2101      	moveq	r1, #1
 8008664:	6139      	str	r1, [r7, #16]
 8008666:	b1c4      	cbz	r4, 800869a <__d2b+0x88>
 8008668:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800866c:	4404      	add	r4, r0
 800866e:	6034      	str	r4, [r6, #0]
 8008670:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008674:	6028      	str	r0, [r5, #0]
 8008676:	4638      	mov	r0, r7
 8008678:	b003      	add	sp, #12
 800867a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800867e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008682:	e7d5      	b.n	8008630 <__d2b+0x1e>
 8008684:	6179      	str	r1, [r7, #20]
 8008686:	e7e7      	b.n	8008658 <__d2b+0x46>
 8008688:	a801      	add	r0, sp, #4
 800868a:	f7ff fddb 	bl	8008244 <__lo0bits>
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	2101      	movs	r1, #1
 8008694:	6139      	str	r1, [r7, #16]
 8008696:	3020      	adds	r0, #32
 8008698:	e7e5      	b.n	8008666 <__d2b+0x54>
 800869a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800869e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086a2:	6030      	str	r0, [r6, #0]
 80086a4:	6918      	ldr	r0, [r3, #16]
 80086a6:	f7ff fdae 	bl	8008206 <__hi0bits>
 80086aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80086ae:	e7e1      	b.n	8008674 <__d2b+0x62>

080086b0 <_calloc_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	fb02 f401 	mul.w	r4, r2, r1
 80086b6:	4621      	mov	r1, r4
 80086b8:	f000 f808 	bl	80086cc <_malloc_r>
 80086bc:	4605      	mov	r5, r0
 80086be:	b118      	cbz	r0, 80086c8 <_calloc_r+0x18>
 80086c0:	4622      	mov	r2, r4
 80086c2:	2100      	movs	r1, #0
 80086c4:	f7fe fb60 	bl	8006d88 <memset>
 80086c8:	4628      	mov	r0, r5
 80086ca:	bd38      	pop	{r3, r4, r5, pc}

080086cc <_malloc_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	1ccd      	adds	r5, r1, #3
 80086d0:	f025 0503 	bic.w	r5, r5, #3
 80086d4:	3508      	adds	r5, #8
 80086d6:	2d0c      	cmp	r5, #12
 80086d8:	bf38      	it	cc
 80086da:	250c      	movcc	r5, #12
 80086dc:	2d00      	cmp	r5, #0
 80086de:	4606      	mov	r6, r0
 80086e0:	db01      	blt.n	80086e6 <_malloc_r+0x1a>
 80086e2:	42a9      	cmp	r1, r5
 80086e4:	d903      	bls.n	80086ee <_malloc_r+0x22>
 80086e6:	230c      	movs	r3, #12
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
 80086ee:	f000 f869 	bl	80087c4 <__malloc_lock>
 80086f2:	4a21      	ldr	r2, [pc, #132]	; (8008778 <_malloc_r+0xac>)
 80086f4:	6814      	ldr	r4, [r2, #0]
 80086f6:	4621      	mov	r1, r4
 80086f8:	b991      	cbnz	r1, 8008720 <_malloc_r+0x54>
 80086fa:	4c20      	ldr	r4, [pc, #128]	; (800877c <_malloc_r+0xb0>)
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	b91b      	cbnz	r3, 8008708 <_malloc_r+0x3c>
 8008700:	4630      	mov	r0, r6
 8008702:	f000 f83d 	bl	8008780 <_sbrk_r>
 8008706:	6020      	str	r0, [r4, #0]
 8008708:	4629      	mov	r1, r5
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f838 	bl	8008780 <_sbrk_r>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d124      	bne.n	800875e <_malloc_r+0x92>
 8008714:	230c      	movs	r3, #12
 8008716:	6033      	str	r3, [r6, #0]
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f854 	bl	80087c6 <__malloc_unlock>
 800871e:	e7e4      	b.n	80086ea <_malloc_r+0x1e>
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	1b5b      	subs	r3, r3, r5
 8008724:	d418      	bmi.n	8008758 <_malloc_r+0x8c>
 8008726:	2b0b      	cmp	r3, #11
 8008728:	d90f      	bls.n	800874a <_malloc_r+0x7e>
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	50cd      	str	r5, [r1, r3]
 800872e:	18cc      	adds	r4, r1, r3
 8008730:	4630      	mov	r0, r6
 8008732:	f000 f848 	bl	80087c6 <__malloc_unlock>
 8008736:	f104 000b 	add.w	r0, r4, #11
 800873a:	1d23      	adds	r3, r4, #4
 800873c:	f020 0007 	bic.w	r0, r0, #7
 8008740:	1ac3      	subs	r3, r0, r3
 8008742:	d0d3      	beq.n	80086ec <_malloc_r+0x20>
 8008744:	425a      	negs	r2, r3
 8008746:	50e2      	str	r2, [r4, r3]
 8008748:	e7d0      	b.n	80086ec <_malloc_r+0x20>
 800874a:	428c      	cmp	r4, r1
 800874c:	684b      	ldr	r3, [r1, #4]
 800874e:	bf16      	itet	ne
 8008750:	6063      	strne	r3, [r4, #4]
 8008752:	6013      	streq	r3, [r2, #0]
 8008754:	460c      	movne	r4, r1
 8008756:	e7eb      	b.n	8008730 <_malloc_r+0x64>
 8008758:	460c      	mov	r4, r1
 800875a:	6849      	ldr	r1, [r1, #4]
 800875c:	e7cc      	b.n	80086f8 <_malloc_r+0x2c>
 800875e:	1cc4      	adds	r4, r0, #3
 8008760:	f024 0403 	bic.w	r4, r4, #3
 8008764:	42a0      	cmp	r0, r4
 8008766:	d005      	beq.n	8008774 <_malloc_r+0xa8>
 8008768:	1a21      	subs	r1, r4, r0
 800876a:	4630      	mov	r0, r6
 800876c:	f000 f808 	bl	8008780 <_sbrk_r>
 8008770:	3001      	adds	r0, #1
 8008772:	d0cf      	beq.n	8008714 <_malloc_r+0x48>
 8008774:	6025      	str	r5, [r4, #0]
 8008776:	e7db      	b.n	8008730 <_malloc_r+0x64>
 8008778:	20000220 	.word	0x20000220
 800877c:	20000224 	.word	0x20000224

08008780 <_sbrk_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4c06      	ldr	r4, [pc, #24]	; (800879c <_sbrk_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4605      	mov	r5, r0
 8008788:	4608      	mov	r0, r1
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	f7f9 fad0 	bl	8001d30 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_sbrk_r+0x1a>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	b103      	cbz	r3, 800879a <_sbrk_r+0x1a>
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	2000075c 	.word	0x2000075c

080087a0 <__ascii_mbtowc>:
 80087a0:	b082      	sub	sp, #8
 80087a2:	b901      	cbnz	r1, 80087a6 <__ascii_mbtowc+0x6>
 80087a4:	a901      	add	r1, sp, #4
 80087a6:	b142      	cbz	r2, 80087ba <__ascii_mbtowc+0x1a>
 80087a8:	b14b      	cbz	r3, 80087be <__ascii_mbtowc+0x1e>
 80087aa:	7813      	ldrb	r3, [r2, #0]
 80087ac:	600b      	str	r3, [r1, #0]
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	1c10      	adds	r0, r2, #0
 80087b2:	bf18      	it	ne
 80087b4:	2001      	movne	r0, #1
 80087b6:	b002      	add	sp, #8
 80087b8:	4770      	bx	lr
 80087ba:	4610      	mov	r0, r2
 80087bc:	e7fb      	b.n	80087b6 <__ascii_mbtowc+0x16>
 80087be:	f06f 0001 	mvn.w	r0, #1
 80087c2:	e7f8      	b.n	80087b6 <__ascii_mbtowc+0x16>

080087c4 <__malloc_lock>:
 80087c4:	4770      	bx	lr

080087c6 <__malloc_unlock>:
 80087c6:	4770      	bx	lr

080087c8 <__ascii_wctomb>:
 80087c8:	b149      	cbz	r1, 80087de <__ascii_wctomb+0x16>
 80087ca:	2aff      	cmp	r2, #255	; 0xff
 80087cc:	bf85      	ittet	hi
 80087ce:	238a      	movhi	r3, #138	; 0x8a
 80087d0:	6003      	strhi	r3, [r0, #0]
 80087d2:	700a      	strbls	r2, [r1, #0]
 80087d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80087d8:	bf98      	it	ls
 80087da:	2001      	movls	r0, #1
 80087dc:	4770      	bx	lr
 80087de:	4608      	mov	r0, r1
 80087e0:	4770      	bx	lr
	...

080087e4 <_init>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr

080087f0 <_fini>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr
