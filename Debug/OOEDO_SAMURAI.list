
OOEDO_SAMURAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c4c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008dd8  08008dd8  00018dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009020  08009020  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009028  08009028  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001dc  0800920c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800920c  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001262a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac3  00000000  00000000  00032836  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001140  00000000  00000000  00035300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205ef  00000000  00000000  00037408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e417  00000000  00000000  000579f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4492  00000000  00000000  00065e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  0012a31c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008dbc 	.word	0x08008dbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08008dbc 	.word	0x08008dbc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <MX_CAN1_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e52:	f002 f849 	bl	8002ee8 <HAL_CAN_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 fdb2 	bl	80019c4 <Error_Handler>
  }

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000250 	.word	0x20000250
 8000e68:	40006400 	.word	0x40006400

08000e6c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_CAN2_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8-1;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e96:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_CAN2_Init+0x64>)
 8000ebe:	f002 f813 	bl	8002ee8 <HAL_CAN_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 fd7c 	bl	80019c4 <Error_Handler>
  }

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000228 	.word	0x20000228
 8000ed4:	40006800 	.word	0x40006800

08000ed8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a53      	ldr	r2, [pc, #332]	; (8001044 <HAL_CAN_MspInit+0x16c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d146      	bne.n	8000f88 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f04:	4b50      	ldr	r3, [pc, #320]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	4b4e      	ldr	r3, [pc, #312]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f56:	2309      	movs	r3, #9
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	483b      	ldr	r0, [pc, #236]	; (8001050 <HAL_CAN_MspInit+0x178>)
 8000f62:	f003 fa39 	bl	80043d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f002 fef3 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f70:	2014      	movs	r0, #20
 8000f72:	f002 ff0c 	bl	8003d8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f002 feeb 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f80:	2015      	movs	r0, #21
 8000f82:	f002 ff04 	bl	8003d8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000f86:	e058      	b.n	800103a <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_CAN_MspInit+0x17c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d153      	bne.n	800103a <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_CAN_MspInit+0x170>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_CAN_MspInit+0x174>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800100a:	2309      	movs	r3, #9
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_CAN_MspInit+0x180>)
 8001016:	f003 f9df 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	f002 fe99 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f002 feb2 	bl	8003d8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	2041      	movs	r0, #65	; 0x41
 8001030:	f002 fe91 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001034:	2041      	movs	r0, #65	; 0x41
 8001036:	f002 feaa 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	; 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40006400 	.word	0x40006400
 8001048:	200001f8 	.word	0x200001f8
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40006800 	.word	0x40006800
 8001058:	40020400 	.word	0x40020400

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x4c>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x4c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f002 fe67 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001088:	200d      	movs	r0, #13
 800108a:	f002 fe80 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200f      	movs	r0, #15
 8001094:	f002 fe5f 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001098:	200f      	movs	r0, #15
 800109a:	f002 fe78 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <MX_GPIO_Init+0x178>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <MX_GPIO_Init+0x178>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <MX_GPIO_Init+0x178>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b50      	ldr	r3, [pc, #320]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <MX_GPIO_Init+0x178>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_GPIO_Init+0x178>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_GPIO_Init+0x178>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_GPIO_Init+0x178>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_GPIO_Init+0x178>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <MX_GPIO_Init+0x178>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a41      	ldr	r2, [pc, #260]	; (8001224 <MX_GPIO_Init+0x178>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_GPIO_Init+0x178>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x178>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <MX_GPIO_Init+0x178>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_GPIO_Init+0x178>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 800114e:	2200      	movs	r2, #0
 8001150:	f64e 4113 	movw	r1, #60435	; 0xec13
 8001154:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_GPIO_Init+0x17c>)
 8001156:	f003 fad9 	bl	800470c <HAL_GPIO_WritePin>
                          |LED2_Pin|GYRO_CS_Pin|LED8_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4832      	ldr	r0, [pc, #200]	; (800122c <MX_GPIO_Init+0x180>)
 8001162:	f003 fad3 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x184>)
 800116e:	f003 facd 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED5_Pin|LED6_Pin|LED7_Pin|LED3_Pin
 8001172:	f64e 4311 	movw	r3, #60433	; 0xec11
 8001176:	617b      	str	r3, [r7, #20]
                          |GYRO_CS_Pin|LED8_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4827      	ldr	r0, [pc, #156]	; (8001228 <MX_GPIO_Init+0x17c>)
 800118c:	f003 f924 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <MX_GPIO_Init+0x17c>)
 80011a8:	f003 f916 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SWL_Pin|TOUCH_Pin|SWR_Pin;
 80011ac:	f248 4310 	movw	r3, #33808	; 0x8410
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	; (800122c <MX_GPIO_Init+0x180>)
 80011c2:	f003 f909 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_GPIO_Init+0x180>)
 80011e0:	f003 f8fa 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWE_Pin;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWE_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0x184>)
 80011fa:	f003 f8ed 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x184>)
 8001218:	f003 f8de 	bl	80043d8 <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <ReadByte>:
#include "spi.h"

#define TIME_STEP 0.001f

uint8_t ReadByte(uint8_t addres)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af02      	add	r7, sp, #8
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_addres[2];
	uint8_t receive_data[2];

	trans_addres[0] = addres | 0x80;
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001244:	b2db      	uxtb	r3, r3
 8001246:	733b      	strb	r3, [r7, #12]
	trans_addres[1] = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <ReadByte+0x50>)
 8001254:	f003 fa5a 	bl	800470c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_addres,receive_data,2,1);
 8001258:	f107 0208 	add.w	r2, r7, #8
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2302      	movs	r3, #2
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <ReadByte+0x54>)
 8001268:	f003 ff24 	bl	80050b4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <ReadByte+0x50>)
 8001274:	f003 fa4a 	bl	800470c <HAL_GPIO_WritePin>
	return receive_data[1];
 8001278:	7a7b      	ldrb	r3, [r7, #9]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020000 	.word	0x40020000
 8001288:	20000300 	.word	0x20000300

0800128c <WriteByte>:

void WriteByte(uint8_t addres,uint8_t data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres & 0x7f;
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	733b      	strb	r3, [r7, #12]
	trans_data[1] = data;
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <WriteByte+0x54>)
 80012b2:	f003 fa2b 	bl	800470c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,trans_data,receive_data,2,1);
 80012b6:	f107 0208 	add.w	r2, r7, #8
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	2301      	movs	r3, #1
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2302      	movs	r3, #2
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <WriteByte+0x58>)
 80012c6:	f003 fef5 	bl	80050b4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <WriteByte+0x54>)
 80012d2:	f003 fa1b 	bl	800470c <HAL_GPIO_WritePin>

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000
 80012e4:	20000300 	.word	0x20000300

080012e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d105      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x20>
		time_count++;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001306:	701a      	strb	r2, [r3, #0]
	}
	if(time_count == 0)	{
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	4807      	ldr	r0, [pc, #28]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001316:	f003 fa12 	bl	800473e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800131a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001320:	f003 fa0d 	bl	800473e <HAL_GPIO_TogglePin>
	}

}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200003d8 	.word	0x200003d8
 8001330:	20000216 	.word	0x20000216
 8001334:	40020800 	.word	0x40020800

08001338 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	all_uart_count++;
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_UART_RxCpltCallback+0x120>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_UART_RxCpltCallback+0x120>)
 800134a:	801a      	strh	r2, [r3, #0]

	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <HAL_UART_RxCpltCallback+0x124>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d10b      	bne.n	8001370 <HAL_UART_RxCpltCallback+0x38>
		uart1_count++;
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_UART_RxCpltCallback+0x128>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <HAL_UART_RxCpltCallback+0x128>)
 8001362:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, rx_uart, 2);
 8001364:	2202      	movs	r2, #2
 8001366:	493f      	ldr	r1, [pc, #252]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 8001368:	483c      	ldr	r0, [pc, #240]	; (800145c <HAL_UART_RxCpltCallback+0x124>)
 800136a:	f005 f987 	bl	800667c <HAL_UART_Receive_IT>
 800136e:	e058      	b.n	8001422 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart2.Instance) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <HAL_UART_RxCpltCallback+0x130>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d10b      	bne.n	8001394 <HAL_UART_RxCpltCallback+0x5c>
		uart2_count++;
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_UART_RxCpltCallback+0x134>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_UART_RxCpltCallback+0x134>)
 8001386:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_uart, 2);
 8001388:	2202      	movs	r2, #2
 800138a:	4936      	ldr	r1, [pc, #216]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 800138c:	4836      	ldr	r0, [pc, #216]	; (8001468 <HAL_UART_RxCpltCallback+0x130>)
 800138e:	f005 f975 	bl	800667c <HAL_UART_Receive_IT>
 8001392:	e046      	b.n	8001422 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart3.Instance) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_UART_RxCpltCallback+0x138>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d10b      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0x80>
		uart3_count++;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_UART_RxCpltCallback+0x13c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <HAL_UART_RxCpltCallback+0x13c>)
 80013aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, rx_uart, 2);
 80013ac:	2202      	movs	r2, #2
 80013ae:	492d      	ldr	r1, [pc, #180]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 80013b0:	482f      	ldr	r0, [pc, #188]	; (8001470 <HAL_UART_RxCpltCallback+0x138>)
 80013b2:	f005 f963 	bl	800667c <HAL_UART_Receive_IT>
 80013b6:	e034      	b.n	8001422 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart4.Instance) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_UART_RxCpltCallback+0x140>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10b      	bne.n	80013dc <HAL_UART_RxCpltCallback+0xa4>
		uart4_count++;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_UART_RxCpltCallback+0x144>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_UART_RxCpltCallback+0x144>)
 80013ce:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, rx_uart, 2);
 80013d0:	2202      	movs	r2, #2
 80013d2:	4924      	ldr	r1, [pc, #144]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 80013d4:	4828      	ldr	r0, [pc, #160]	; (8001478 <HAL_UART_RxCpltCallback+0x140>)
 80013d6:	f005 f951 	bl	800667c <HAL_UART_Receive_IT>
 80013da:	e022      	b.n	8001422 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart5.Instance) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_UART_RxCpltCallback+0x148>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d10b      	bne.n	8001400 <HAL_UART_RxCpltCallback+0xc8>
		uart5_count++;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_UART_RxCpltCallback+0x14c>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_UART_RxCpltCallback+0x14c>)
 80013f2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, rx_uart, 2);
 80013f4:	2202      	movs	r2, #2
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 80013f8:	4821      	ldr	r0, [pc, #132]	; (8001480 <HAL_UART_RxCpltCallback+0x148>)
 80013fa:	f005 f93f 	bl	800667c <HAL_UART_Receive_IT>
 80013fe:	e010      	b.n	8001422 <HAL_UART_RxCpltCallback+0xea>
	}
	else if (UartHandle->Instance == huart6.Instance) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_UART_RxCpltCallback+0x150>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d10a      	bne.n	8001422 <HAL_UART_RxCpltCallback+0xea>
		uart6_count++;
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_UART_RxCpltCallback+0x154>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_UART_RxCpltCallback+0x154>)
 8001416:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, rx_uart, 2);
 8001418:	2202      	movs	r2, #2
 800141a:	4912      	ldr	r1, [pc, #72]	; (8001464 <HAL_UART_RxCpltCallback+0x12c>)
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <HAL_UART_RxCpltCallback+0x150>)
 800141e:	f005 f92d 	bl	800667c <HAL_UART_Receive_IT>
	}
	if(all_uart_count % 5 == 0){
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_UART_RxCpltCallback+0x120>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_UART_RxCpltCallback+0x158>)
 8001428:	fba3 1302 	umull	r1, r3, r3, r2
 800142c:	0899      	lsrs	r1, r3, #2
 800142e:	460b      	mov	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <HAL_UART_RxCpltCallback+0x116>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800143c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <HAL_UART_RxCpltCallback+0x15c>)
 8001442:	f003 f97c 	bl	800473e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001446:	2102      	movs	r1, #2
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_UART_RxCpltCallback+0x15c>)
 800144a:	f003 f978 	bl	800473e <HAL_GPIO_TogglePin>

	}
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000210 	.word	0x20000210
 800145c:	200005f8 	.word	0x200005f8
 8001460:	20000204 	.word	0x20000204
 8001464:	2000029c 	.word	0x2000029c
 8001468:	200006b8 	.word	0x200006b8
 800146c:	20000206 	.word	0x20000206
 8001470:	20000578 	.word	0x20000578
 8001474:	20000208 	.word	0x20000208
 8001478:	20000678 	.word	0x20000678
 800147c:	2000020a 	.word	0x2000020a
 8001480:	200005b8 	.word	0x200005b8
 8001484:	2000020c 	.word	0x2000020c
 8001488:	20000638 	.word	0x20000638
 800148c:	2000020e 	.word	0x2000020e
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	40020800 	.word	0x40020800

08001498 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart3.Instance) {
		//Custom_data_Transmit
	}
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d117      	bne.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
	{// can2 bus receive interrupt
		can2_count++;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014ca:	801a      	strh	r2, [r3, #0]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, rx_data);
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f002 f803 	bl	80034de <HAL_CAN_GetRxMessage>
		//check ESC identifier
		if(canRxHeader.StdId == 0x1ff){
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d105      	bne.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			can2_clear++;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80014ee:	801a      	strh	r2, [r3, #0]
		}
	}
	if (hcan->Instance == hcan1.Instance)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d105      	bne.n	8001508 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{// can1 bus receive interrupt
		can1_count++;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001506:	801a      	strh	r2, [r3, #0]
	}

	if(can2_clear % 5 == 0){
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800150e:	fba3 1302 	umull	r1, r3, r3, r2
 8001512:	0899      	lsrs	r1, r3, #2
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001522:	2101      	movs	r1, #1
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001526:	f003 f90a 	bl	800473e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800152a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001530:	f003 f905 	bl	800473e <HAL_GPIO_TogglePin>

	}
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000228 	.word	0x20000228
 8001540:	200001fe 	.word	0x200001fe
 8001544:	20000294 	.word	0x20000294
 8001548:	20000278 	.word	0x20000278
 800154c:	20000200 	.word	0x20000200
 8001550:	20000250 	.word	0x20000250
 8001554:	200001fc 	.word	0x200001fc
 8001558:	cccccccd 	.word	0xcccccccd
 800155c:	40020800 	.word	0x40020800
 8001560:	40020400 	.word	0x40020400

08001564 <initCanFilter>:

void initCanFilter() {
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800158a:	2301      	movs	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001592:	463b      	mov	r3, r7
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <initCanFilter+0x54>)
 8001598:	f001 fda2 	bl	80030e0 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <initCanFilter+0x58>)
 80015aa:	f001 fd99 	bl	80030e0 <HAL_CAN_ConfigFilter>
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000250 	.word	0x20000250
 80015bc:	20000228 	.word	0x20000228

080015c0 <initGyro>:

void initGyro(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_am_i = ReadByte(ADDRESS_WHO_AM_I);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fe34 	bl	8001234 <ReadByte>
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]

	if(who_am_i != VALUE_WHO_AM_I)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2bea      	cmp	r3, #234	; 0xea
 80015d4:	d019      	beq.n	800160a <initGyro+0x4a>
	{
		who_am_i = ReadByte(ADDRESS_WHO_AM_I);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fe2c 	bl	8001234 <ReadByte>
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
		check_who_am_i = who_am_i;
 80015e0:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <initGyro+0xf4>)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	7013      	strb	r3, [r2, #0]
		while(who_am_i != VALUE_WHO_AM_I){
 80015e6:	e00d      	b.n	8001604 <initGyro+0x44>
			who_am_i = ReadByte(ADDRESS_WHO_AM_I);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fe23 	bl	8001234 <ReadByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f001 fc56 	bl	8002ea4 <HAL_Delay>
			check_count++;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <initGyro+0xf8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <initGyro+0xf8>)
 8001602:	701a      	strb	r2, [r3, #0]
		while(who_am_i != VALUE_WHO_AM_I){
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2bea      	cmp	r3, #234	; 0xea
 8001608:	d1ee      	bne.n	80015e8 <initGyro+0x28>
		}
	}

	check_who_am_i = who_am_i;
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <initGyro+0xf4>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	7013      	strb	r3, [r2, #0]
	WriteByte(ADDRESS_REG_BANK_SEL,VALUE_USER_BANK_0);
 8001610:	2100      	movs	r1, #0
 8001612:	207f      	movs	r0, #127	; 0x7f
 8001614:	f7ff fe3a 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f001 fc43 	bl	8002ea4 <HAL_Delay>
/*
 	WriteByte(0x03,0x78);
	HAL_Delay(10);
*/
  	WriteByte(ADDRESS_PWR_MGMT_1,RESET_PWR_MGMT_1);
 800161e:	2181      	movs	r1, #129	; 0x81
 8001620:	2006      	movs	r0, #6
 8001622:	f7ff fe33 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001626:	200a      	movs	r0, #10
 8001628:	f001 fc3c 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_PWR_MGMT_1,VALUE_PWR_MGMT_1);
 800162c:	2101      	movs	r1, #1
 800162e:	2006      	movs	r0, #6
 8001630:	f7ff fe2c 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001634:	200a      	movs	r0, #10
 8001636:	f001 fc35 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_PWR_MGMT_2,VALUE_PWR_MGMT_2);
 800163a:	2100      	movs	r1, #0
 800163c:	2007      	movs	r0, #7
 800163e:	f7ff fe25 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001642:	200a      	movs	r0, #10
 8001644:	f001 fc2e 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_CONFIG,VALUE_CONFIG);
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	2005      	movs	r0, #5
 800164c:	f7ff fe1e 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001650:	200a      	movs	r0, #10
 8001652:	f001 fc27 	bl	8002ea4 <HAL_Delay>

	WriteByte(ADDRESS_REG_BANK_SEL,VALUE_USER_BANK_2);
 8001656:	2120      	movs	r1, #32
 8001658:	207f      	movs	r0, #127	; 0x7f
 800165a:	f7ff fe17 	bl	800128c <WriteByte>
	HAL_Delay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f001 fc20 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_GYRO_CONFIG1,VALUE_GYRO_CONFIG1);
 8001664:	2107      	movs	r1, #7
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff fe10 	bl	800128c <WriteByte>
	HAL_Delay(10);
 800166c:	200a      	movs	r0, #10
 800166e:	f001 fc19 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_GYRO_SMPLRT_DIV,VALUE_GYRO_SMPLRT_DIV);
 8001672:	210f      	movs	r1, #15
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fe09 	bl	800128c <WriteByte>
	HAL_Delay(10);
 800167a:	200a      	movs	r0, #10
 800167c:	f001 fc12 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_GYRO_CONFIG2,VALUE_GYRO_CONFIG2);
 8001680:	2100      	movs	r1, #0
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff fe02 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001688:	200a      	movs	r0, #10
 800168a:	f001 fc0b 	bl	8002ea4 <HAL_Delay>

	WriteByte(ADDRESS_REG_BANK_SEL,VALUE_USER_BANK_0);
 800168e:	2100      	movs	r1, #0
 8001690:	207f      	movs	r0, #127	; 0x7f
 8001692:	f7ff fdfb 	bl	800128c <WriteByte>
	HAL_Delay(10);
 8001696:	200a      	movs	r0, #10
 8001698:	f001 fc04 	bl	8002ea4 <HAL_Delay>
	WriteByte(ADDRESS_PWR_MGMT_1,VALUE_LOW_POWER);
 800169c:	2101      	movs	r1, #1
 800169e:	2006      	movs	r0, #6
 80016a0:	f7ff fdf4 	bl	800128c <WriteByte>
	HAL_Delay(10);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f001 fbfd 	bl	8002ea4 <HAL_Delay>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000202 	.word	0x20000202
 80016b8:	20000203 	.word	0x20000203

080016bc <transCAN>:

void transCAN()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef header;
	uint32_t TxMailbox;
	uint8_t i;

	header.StdId = 0x1ff;
 80016c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80016c6:	607b      	str	r3, [r7, #4]
	header.RTR = CAN_RTR_DATA;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
	header.IDE = CAN_ID_STD;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
	header.DLC = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	617b      	str	r3, [r7, #20]
	for(i=0;i<8;i++){
 80016d4:	2300      	movs	r3, #0
 80016d6:	77fb      	strb	r3, [r7, #31]
 80016d8:	e008      	b.n	80016ec <transCAN+0x30>
		tx_data[i] = 2*i;
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	7ffa      	ldrb	r2, [r7, #31]
 80016de:	0052      	lsls	r2, r2, #1
 80016e0:	b2d1      	uxtb	r1, r2
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <transCAN+0x4c>)
 80016e4:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<8;i++){
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	3301      	adds	r3, #1
 80016ea:	77fb      	strb	r3, [r7, #31]
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d9f3      	bls.n	80016da <transCAN+0x1e>
	}
	HAL_CAN_AddTxMessage(&hcan1, &header, tx_data, &TxMailbox);
 80016f2:	463b      	mov	r3, r7
 80016f4:	1d39      	adds	r1, r7, #4
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <transCAN+0x4c>)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <transCAN+0x50>)
 80016fa:	f001 fe15 	bl	8003328 <HAL_CAN_AddTxMessage>
}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002a0 	.word	0x200002a0
 800170c:	20000250 	.word	0x20000250

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f001 fb54 	bl	8002dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 f8ea 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f7ff fcc6 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001720:	f7ff fc9c 	bl	800105c <MX_DMA_Init>
  MX_CAN1_Init();
 8001724:	f7ff fb6c 	bl	8000e00 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001728:	f7ff fba0 	bl	8000e6c <MX_CAN2_Init>
  MX_TIM1_Init();
 800172c:	f000 fbe0 	bl	8001ef0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001730:	f000 fc7e 	bl	8002030 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001734:	f000 fcc8 	bl	80020c8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001738:	f000 fd48 	bl	80021cc <MX_TIM6_Init>
  MX_TIM8_Init();
 800173c:	f000 fdb2 	bl	80022a4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001740:	f000 fe32 	bl	80023a8 <MX_TIM12_Init>
  MX_UART4_Init();
 8001744:	f001 f80e 	bl	8002764 <MX_UART4_Init>
  MX_UART5_Init();
 8001748:	f001 f836 	bl	80027b8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800174c:	f001 f85e 	bl	800280c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001750:	f001 f886 	bl	8002860 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001754:	f001 f8ae 	bl	80028b4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001758:	f001 f8d6 	bl	8002908 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800175c:	f000 f9fa 	bl	8001b54 <MX_SPI3_Init>
  MX_TIM7_Init();
 8001760:	f000 fd6a 	bl	8002238 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001764:	f000 f9c0 	bl	8001ae8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176e:	4852      	ldr	r0, [pc, #328]	; (80018b8 <main+0x1a8>)
 8001770:	f002 ffcc 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177a:	484f      	ldr	r0, [pc, #316]	; (80018b8 <main+0x1a8>)
 800177c:	f002 ffc6 	bl	800470c <HAL_GPIO_WritePin>

  initCanFilter();
 8001780:	f7ff fef0 	bl	8001564 <initCanFilter>
  initGyro();
 8001784:	f7ff ff1c 	bl	80015c0 <initGyro>

  HAL_Delay(100);
 8001788:	2064      	movs	r0, #100	; 0x64
 800178a:	f001 fb8b 	bl	8002ea4 <HAL_Delay>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001794:	4848      	ldr	r0, [pc, #288]	; (80018b8 <main+0x1a8>)
 8001796:	f002 ffb9 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	4845      	ldr	r0, [pc, #276]	; (80018b8 <main+0x1a8>)
 80017a2:	f002 ffb3 	bl	800470c <HAL_GPIO_WritePin>

  HAL_CAN_Start(&hcan1);
 80017a6:	4845      	ldr	r0, [pc, #276]	; (80018bc <main+0x1ac>)
 80017a8:	f001 fd7a 	bl	80032a0 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80017ac:	4844      	ldr	r0, [pc, #272]	; (80018c0 <main+0x1b0>)
 80017ae:	f001 fd77 	bl	80032a0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80017b2:	2102      	movs	r1, #2
 80017b4:	4841      	ldr	r0, [pc, #260]	; (80018bc <main+0x1ac>)
 80017b6:	f001 ffa4 	bl	8003702 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80017ba:	2102      	movs	r1, #2
 80017bc:	4840      	ldr	r0, [pc, #256]	; (80018c0 <main+0x1b0>)
 80017be:	f001 ffa0 	bl	8003702 <HAL_CAN_ActivateNotification>

  HAL_Delay(100);
 80017c2:	2064      	movs	r0, #100	; 0x64
 80017c4:	f001 fb6e 	bl	8002ea4 <HAL_Delay>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ce:	483d      	ldr	r0, [pc, #244]	; (80018c4 <main+0x1b4>)
 80017d0:	f002 ff9c 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2101      	movs	r1, #1
 80017d8:	4837      	ldr	r0, [pc, #220]	; (80018b8 <main+0x1a8>)
 80017da:	f002 ff97 	bl	800470c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 80017de:	483a      	ldr	r0, [pc, #232]	; (80018c8 <main+0x1b8>)
 80017e0:	f003 fee1 	bl	80055a6 <HAL_TIM_Base_Start_IT>

  HAL_Delay(100);
 80017e4:	2064      	movs	r0, #100	; 0x64
 80017e6:	f001 fb5d 	bl	8002ea4 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2102      	movs	r1, #2
 80017ee:	4832      	ldr	r0, [pc, #200]	; (80018b8 <main+0x1a8>)
 80017f0:	f002 ff8c 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fa:	482f      	ldr	r0, [pc, #188]	; (80018b8 <main+0x1a8>)
 80017fc:	f002 ff86 	bl	800470c <HAL_GPIO_WritePin>

//	HAL_UART_Receive_DMA(&huart4, rx_uart, 2);
//printf("OOEDO_SAMURAI_BEGINNING\n");

  HAL_UART_Receive_IT(&huart1, rx_uart, 2);
 8001800:	2202      	movs	r2, #2
 8001802:	4932      	ldr	r1, [pc, #200]	; (80018cc <main+0x1bc>)
 8001804:	4832      	ldr	r0, [pc, #200]	; (80018d0 <main+0x1c0>)
 8001806:	f004 ff39 	bl	800667c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_uart, 2);
 800180a:	2202      	movs	r2, #2
 800180c:	492f      	ldr	r1, [pc, #188]	; (80018cc <main+0x1bc>)
 800180e:	4831      	ldr	r0, [pc, #196]	; (80018d4 <main+0x1c4>)
 8001810:	f004 ff34 	bl	800667c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx_uart, 2);
 8001814:	2202      	movs	r2, #2
 8001816:	492d      	ldr	r1, [pc, #180]	; (80018cc <main+0x1bc>)
 8001818:	482f      	ldr	r0, [pc, #188]	; (80018d8 <main+0x1c8>)
 800181a:	f004 ff2f 	bl	800667c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rx_uart, 2);
 800181e:	2202      	movs	r2, #2
 8001820:	492a      	ldr	r1, [pc, #168]	; (80018cc <main+0x1bc>)
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <main+0x1cc>)
 8001824:	f004 ff2a 	bl	800667c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, rx_uart, 2);
 8001828:	2202      	movs	r2, #2
 800182a:	4928      	ldr	r1, [pc, #160]	; (80018cc <main+0x1bc>)
 800182c:	482c      	ldr	r0, [pc, #176]	; (80018e0 <main+0x1d0>)
 800182e:	f004 ff25 	bl	800667c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rx_uart, 2);
 8001832:	2202      	movs	r2, #2
 8001834:	4925      	ldr	r1, [pc, #148]	; (80018cc <main+0x1bc>)
 8001836:	482b      	ldr	r0, [pc, #172]	; (80018e4 <main+0x1d4>)
 8001838:	f004 ff20 	bl	800667c <HAL_UART_Receive_IT>

  MelodySummer();
 800183c:	f000 f8c9 	bl	80019d2 <MelodySummer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  main_loop++;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <main+0x1d8>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <main+0x1d8>)
 800184a:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,tx_uart,2,1);
 800184c:	2301      	movs	r3, #1
 800184e:	2202      	movs	r2, #2
 8001850:	4926      	ldr	r1, [pc, #152]	; (80018ec <main+0x1dc>)
 8001852:	481f      	ldr	r0, [pc, #124]	; (80018d0 <main+0x1c0>)
 8001854:	f004 fe79 	bl	800654a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,tx_uart,2,1);
 8001858:	2301      	movs	r3, #1
 800185a:	2202      	movs	r2, #2
 800185c:	4923      	ldr	r1, [pc, #140]	; (80018ec <main+0x1dc>)
 800185e:	481d      	ldr	r0, [pc, #116]	; (80018d4 <main+0x1c4>)
 8001860:	f004 fe73 	bl	800654a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,tx_uart,2,1);
 8001864:	2301      	movs	r3, #1
 8001866:	2202      	movs	r2, #2
 8001868:	4920      	ldr	r1, [pc, #128]	; (80018ec <main+0x1dc>)
 800186a:	481b      	ldr	r0, [pc, #108]	; (80018d8 <main+0x1c8>)
 800186c:	f004 fe6d 	bl	800654a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4,tx_uart,2,1);
 8001870:	2301      	movs	r3, #1
 8001872:	2202      	movs	r2, #2
 8001874:	491d      	ldr	r1, [pc, #116]	; (80018ec <main+0x1dc>)
 8001876:	4819      	ldr	r0, [pc, #100]	; (80018dc <main+0x1cc>)
 8001878:	f004 fe67 	bl	800654a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart5,tx_uart,2,1);
 800187c:	2301      	movs	r3, #1
 800187e:	2202      	movs	r2, #2
 8001880:	491a      	ldr	r1, [pc, #104]	; (80018ec <main+0x1dc>)
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <main+0x1d0>)
 8001884:	f004 fe61 	bl	800654a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart6,tx_uart,2,1);
 8001888:	2301      	movs	r3, #1
 800188a:	2202      	movs	r2, #2
 800188c:	4917      	ldr	r1, [pc, #92]	; (80018ec <main+0x1dc>)
 800188e:	4815      	ldr	r0, [pc, #84]	; (80018e4 <main+0x1d4>)
 8001890:	f004 fe5b 	bl	800654a <HAL_UART_Transmit>

		  transCAN();
 8001894:	f7ff ff12 	bl	80016bc <transCAN>
		  HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <main+0x1a8>)
 800189e:	f002 ff4e 	bl	800473e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 80018a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <main+0x1a8>)
 80018a8:	f002 ff49 	bl	800473e <HAL_GPIO_TogglePin>

		  HAL_Delay(500);
 80018ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b0:	f001 faf8 	bl	8002ea4 <HAL_Delay>
		  main_loop++;
 80018b4:	e7c4      	b.n	8001840 <main+0x130>
 80018b6:	bf00      	nop
 80018b8:	40020800 	.word	0x40020800
 80018bc:	20000250 	.word	0x20000250
 80018c0:	20000228 	.word	0x20000228
 80018c4:	40020400 	.word	0x40020400
 80018c8:	200003d8 	.word	0x200003d8
 80018cc:	2000029c 	.word	0x2000029c
 80018d0:	200005f8 	.word	0x200005f8
 80018d4:	200006b8 	.word	0x200006b8
 80018d8:	20000578 	.word	0x20000578
 80018dc:	20000678 	.word	0x20000678
 80018e0:	200005b8 	.word	0x200005b8
 80018e4:	20000638 	.word	0x20000638
 80018e8:	20000218 	.word	0x20000218
 80018ec:	20000214 	.word	0x20000214

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	; 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2230      	movs	r2, #48	; 0x30
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fd2e 	bl	8007360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <SystemClock_Config+0xcc>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <SystemClock_Config+0xd0>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001950:	2301      	movs	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001954:	2310      	movs	r3, #16
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2302      	movs	r3, #2
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800195c:	2300      	movs	r3, #0
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001964:	23a8      	movs	r3, #168	; 0xa8
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800196c:	2304      	movs	r3, #4
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001970:	f107 0320 	add.w	r3, r7, #32
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fefd 	bl	8004774 <HAL_RCC_OscConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001980:	f000 f820 	bl	80019c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001984:	230f      	movs	r3, #15
 8001986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001988:	2302      	movs	r3, #2
 800198a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2105      	movs	r1, #5
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f956 	bl	8004c54 <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ae:	f000 f809 	bl	80019c4 <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3750      	adds	r7, #80	; 0x50
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <MelodySummer>:

#include"tim.h"
#include"music.h"

void MelodySummer(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
	Melody(g6,100);
 80019d6:	2164      	movs	r1, #100	; 0x64
 80019d8:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80019dc:	f000 f826 	bl	8001a2c <Melody>
	Melody(c7,100);
 80019e0:	2164      	movs	r1, #100	; 0x64
 80019e2:	f640 002d 	movw	r0, #2093	; 0x82d
 80019e6:	f000 f821 	bl	8001a2c <Melody>
	Melody(d7,100);
 80019ea:	2164      	movs	r1, #100	; 0x64
 80019ec:	f640 102d 	movw	r0, #2349	; 0x92d
 80019f0:	f000 f81c 	bl	8001a2c <Melody>
	Melody(e7,100);
 80019f4:	2164      	movs	r1, #100	; 0x64
 80019f6:	f640 204d 	movw	r0, #2637	; 0xa4d
 80019fa:	f000 f817 	bl	8001a2c <Melody>
	Melody(d7,100);
 80019fe:	2164      	movs	r1, #100	; 0x64
 8001a00:	f640 102d 	movw	r0, #2349	; 0x92d
 8001a04:	f000 f812 	bl	8001a2c <Melody>
	HAL_Delay(50);
 8001a08:	2032      	movs	r0, #50	; 0x32
 8001a0a:	f001 fa4b 	bl	8002ea4 <HAL_Delay>
	Melody(c7,50);
 8001a0e:	2132      	movs	r1, #50	; 0x32
 8001a10:	f640 002d 	movw	r0, #2093	; 0x82d
 8001a14:	f000 f80a 	bl	8001a2c <Melody>
	HAL_Delay(50);
 8001a18:	2032      	movs	r0, #50	; 0x32
 8001a1a:	f001 fa43 	bl	8002ea4 <HAL_Delay>
	Melody(c7,200);
 8001a1e:	21c8      	movs	r1, #200	; 0xc8
 8001a20:	f640 002d 	movw	r0, #2093	; 0x82d
 8001a24:	f000 f802 	bl	8001a2c <Melody>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <Melody>:
	Melody(e6,400);
	Melody(d6,400);
}

void Melody(uint32_t hz, uint32_t ms)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC;
//TIM8 Setting
	htim3.Instance = TIM3;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <Melody+0xac>)
 8001a38:	4a28      	ldr	r2, [pc, #160]	; (8001adc <Melody+0xb0>)
 8001a3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 840-1;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <Melody+0xac>)
 8001a3e:	f240 3247 	movw	r2, #839	; 0x347
 8001a42:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <Melody+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100000 / hz;
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <Melody+0xb4>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <Melody+0xac>)
 8001a54:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <Melody+0xac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
	htim3.Init.RepetitionCounter = 0;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <Melody+0xac>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <Melody+0xac>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
//Config Setting
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a68:	2360      	movs	r3, #96	; 0x60
 8001a6a:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse =  95000 / hz ;
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <Melody+0xb8>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
//TIM8 OUTPUT
	if(HAL_TIM_PWM_Init(&htim3) != HAL_OK){
 8001a7e:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <Melody+0xac>)
 8001a80:	f003 fdb5 	bl	80055ee <HAL_TIM_PWM_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <Melody+0x62>
		Error_Handler();
 8001a8a:	f7ff ff9b 	bl	80019c4 <Error_Handler>
	}
	if(HAL_TIM_PWM_ConfigChannel(&htim3,&sConfigOC,TIM_CHANNEL_3) != HAL_OK){
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <Melody+0xac>)
 8001a98:	f003 ff72 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <Melody+0x7a>
		Error_Handler();
 8001aa2:	f7ff ff8f 	bl	80019c4 <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3) != HAL_OK){
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <Melody+0xac>)
 8001aaa:	f003 fdcb 	bl	8005644 <HAL_TIM_PWM_Start>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <Melody+0x8c>
		Error_Handler();
 8001ab4:	f7ff ff86 	bl	80019c4 <Error_Handler>
	}
	HAL_Delay(ms);
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f001 f9f3 	bl	8002ea4 <HAL_Delay>
	if(HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3) != HAL_OK){
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <Melody+0xac>)
 8001ac2:	f003 fdfd 	bl	80056c0 <HAL_TIM_PWM_Stop>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <Melody+0xa4>
		Error_Handler();
 8001acc:	f7ff ff7a 	bl	80019c4 <Error_Handler>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000398 	.word	0x20000398
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	000186a0 	.word	0x000186a0
 8001ae4:	00017318 	.word	0x00017318

08001ae8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <MX_SPI1_Init+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_SPI1_Init+0x64>)
 8001b3a:	f003 fa57 	bl	8004fec <HAL_SPI_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b44:	f7ff ff3e 	bl	80019c4 <Error_Handler>
  }

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000300 	.word	0x20000300
 8001b50:	40013000 	.word	0x40013000

08001b54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <MX_SPI3_Init+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b88:	2218      	movs	r2, #24
 8001b8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_SPI3_Init+0x64>)
 8001ba6:	f003 fa21 	bl	8004fec <HAL_SPI_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001bb0:	f7ff ff08 	bl	80019c4 <Error_Handler>
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200002a8 	.word	0x200002a8
 8001bbc:	40003c00 	.word	0x40003c00

08001bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_SPI_MspInit+0xe8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12c      	bne.n	8001c3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c1a:	23e0      	movs	r3, #224	; 0xe0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	481e      	ldr	r0, [pc, #120]	; (8001cb0 <HAL_SPI_MspInit+0xf0>)
 8001c36:	f002 fbcf 	bl	80043d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c3a:	e030      	b.n	8001c9e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_SPI_MspInit+0xf4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12b      	bne.n	8001c9e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_SPI_MspInit+0xec>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c7e:	2338      	movs	r3, #56	; 0x38
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <HAL_SPI_MspInit+0xf8>)
 8001c9a:	f002 fb9d 	bl	80043d8 <HAL_GPIO_Init>
}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40003c00 	.word	0x40003c00
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f001 f880 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <DMA1_Stream2_IRQHandler+0x10>)
 8001d6e:	f002 f8f9 	bl	8003f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000518 	.word	0x20000518

08001d7c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA1_Stream4_IRQHandler+0x10>)
 8001d82:	f002 f8ef 	bl	8003f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200006f8 	.word	0x200006f8

08001d90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <CAN1_RX0_IRQHandler+0x10>)
 8001d96:	f001 fcda 	bl	800374e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000250 	.word	0x20000250

08001da4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <CAN1_RX1_IRQHandler+0x10>)
 8001daa:	f001 fcd0 	bl	800374e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000250 	.word	0x20000250

08001db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART1_IRQHandler+0x10>)
 8001dbe:	f004 fcb3 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200005f8 	.word	0x200005f8

08001dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USART2_IRQHandler+0x10>)
 8001dd2:	f004 fca9 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200006b8 	.word	0x200006b8

08001de0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <USART3_IRQHandler+0x10>)
 8001de6:	f004 fc9f 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000578 	.word	0x20000578

08001df4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <UART5_IRQHandler+0x10>)
 8001dfa:	f004 fc95 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200005b8 	.word	0x200005b8

08001e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM6_DAC_IRQHandler+0x10>)
 8001e0e:	f003 fcaf 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200003d8 	.word	0x200003d8

08001e1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM7_IRQHandler+0x10>)
 8001e22:	f003 fca5 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200004d8 	.word	0x200004d8

08001e30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <CAN2_RX0_IRQHandler+0x10>)
 8001e36:	f001 fc8a 	bl	800374e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000228 	.word	0x20000228

08001e44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <CAN2_RX1_IRQHandler+0x10>)
 8001e4a:	f001 fc80 	bl	800374e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000228 	.word	0x20000228

08001e58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <USART6_IRQHandler+0x10>)
 8001e5e:	f004 fc63 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000638 	.word	0x20000638

08001e6c <_sbrk>:
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_sbrk+0x50>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x16>
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <_sbrk+0x50>)
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <_sbrk+0x54>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <_sbrk+0x50>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <_sbrk+0x50>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	466a      	mov	r2, sp
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d907      	bls.n	8001ea6 <_sbrk+0x3a>
 8001e96:	f005 fa39 	bl	800730c <__errno>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	e006      	b.n	8001eb4 <_sbrk+0x48>
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <_sbrk+0x50>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <_sbrk+0x50>)
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000021c 	.word	0x2000021c
 8001ec0:	20000760 	.word	0x20000760

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <SystemInit+0x28>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <SystemInit+0x28>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SystemInit+0x28>)
 8001eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ede:	609a      	str	r2, [r3, #8]
#endif
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b096      	sub	sp, #88	; 0x58
 8001ef4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fa19 	bl	8007360 <memset>

  htim1.Instance = TIM1;
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f30:	4a3e      	ldr	r2, [pc, #248]	; (800202c <MX_TIM1_Init+0x13c>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f36:	22a7      	movs	r2, #167	; 0xa7
 8001f38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f5a:	4833      	ldr	r0, [pc, #204]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f5c:	f003 faf8 	bl	8005550 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f66:	f7ff fd2d 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f74:	4619      	mov	r1, r3
 8001f76:	482c      	ldr	r0, [pc, #176]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f78:	f003 fdc8 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f82:	f7ff fd1f 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f86:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM1_Init+0x138>)
 8001f88:	f003 fb31 	bl	80055ee <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f92:	f7ff fd17 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4820      	ldr	r0, [pc, #128]	; (8002028 <MX_TIM1_Init+0x138>)
 8001fa6:	f004 f9a1 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001fb0:	f7ff fd08 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <MX_TIM1_Init+0x138>)
 8001fda:	f003 fcd1 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fe4:	f7ff fcee 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002000:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM1_Init+0x138>)
 800200c:	f004 f9ea 	bl	80063e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002016:	f7ff fcd5 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM1_Init+0x138>)
 800201c:	f000 faf0 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3758      	adds	r7, #88	; 0x58
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000418 	.word	0x20000418
 800202c:	40010000 	.word	0x40010000

08002030 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_TIM2_Init+0x94>)
 800204e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002056:	2253      	movs	r2, #83	; 0x53
 8002058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_TIM2_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_TIM2_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002076:	f003 fa6b 	bl	8005550 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002080:	f7ff fca0 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002092:	f003 fd3b 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800209c:	f7ff fc92 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_TIM2_Init+0x94>)
 80020ae:	f004 f91d 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f7ff fc84 	bl	80019c4 <Error_Handler>
  }

}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000458 	.word	0x20000458

080020c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08e      	sub	sp, #56	; 0x38
 80020cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <MX_TIM3_Init+0xfc>)
 80020fa:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <MX_TIM3_Init+0x100>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <MX_TIM3_Init+0xfc>)
 8002100:	2253      	movs	r2, #83	; 0x53
 8002102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <MX_TIM3_Init+0xfc>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <MX_TIM3_Init+0xfc>)
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MX_TIM3_Init+0xfc>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <MX_TIM3_Init+0xfc>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800211e:	4829      	ldr	r0, [pc, #164]	; (80021c4 <MX_TIM3_Init+0xfc>)
 8002120:	f003 fa16 	bl	8005550 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800212a:	f7ff fc4b 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002138:	4619      	mov	r1, r3
 800213a:	4822      	ldr	r0, [pc, #136]	; (80021c4 <MX_TIM3_Init+0xfc>)
 800213c:	f003 fce6 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002146:	f7ff fc3d 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800214a:	481e      	ldr	r0, [pc, #120]	; (80021c4 <MX_TIM3_Init+0xfc>)
 800214c:	f003 fa4f 	bl	80055ee <HAL_TIM_PWM_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002156:	f7ff fc35 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	4619      	mov	r1, r3
 8002168:	4816      	ldr	r0, [pc, #88]	; (80021c4 <MX_TIM3_Init+0xfc>)
 800216a:	f004 f8bf 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002174:	f7ff fc26 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	2360      	movs	r3, #96	; 0x60
 800217a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0xfc>)
 8002190:	f003 fbf6 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800219a:	f7ff fc13 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	220c      	movs	r2, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <MX_TIM3_Init+0xfc>)
 80021a6:	f003 fbeb 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80021b0:	f7ff fc08 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <MX_TIM3_Init+0xfc>)
 80021b6:	f000 fa23 	bl	8002600 <HAL_TIM_MspPostInit>

}
 80021ba:	bf00      	nop
 80021bc:	3738      	adds	r7, #56	; 0x38
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000398 	.word	0x20000398
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	463b      	mov	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_TIM6_Init+0x64>)
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <MX_TIM6_Init+0x68>)
 80021de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840-1;
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_TIM6_Init+0x64>)
 80021e2:	f240 3247 	movw	r2, #839	; 0x347
 80021e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_TIM6_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_TIM6_Init+0x64>)
 80021f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_TIM6_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <MX_TIM6_Init+0x64>)
 80021fe:	f003 f9a7 	bl	8005550 <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002208:	f7ff fbdc 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002214:	463b      	mov	r3, r7
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_TIM6_Init+0x64>)
 800221a:	f004 f867 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002224:	f7ff fbce 	bl	80019c4 <Error_Handler>
  }

}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200003d8 	.word	0x200003d8
 8002234:	40001000 	.word	0x40001000

08002238 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223e:	463b      	mov	r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_TIM7_Init+0x64>)
 8002248:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <MX_TIM7_Init+0x68>)
 800224a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_TIM7_Init+0x64>)
 800224e:	2253      	movs	r2, #83	; 0x53
 8002250:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_TIM7_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_TIM7_Init+0x64>)
 800225a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_TIM7_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_TIM7_Init+0x64>)
 8002268:	f003 f972 	bl	8005550 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002272:	f7ff fba7 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800227e:	463b      	mov	r3, r7
 8002280:	4619      	mov	r1, r3
 8002282:	4806      	ldr	r0, [pc, #24]	; (800229c <MX_TIM7_Init+0x64>)
 8002284:	f004 f832 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800228e:	f7ff fb99 	bl	80019c4 <Error_Handler>
  }

}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200004d8 	.word	0x200004d8
 80022a0:	40001400 	.word	0x40001400

080022a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	615a      	str	r2, [r3, #20]
 80022c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2220      	movs	r2, #32
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 f846 	bl	8007360 <memset>

  htim8.Instance = TIM8;
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <MX_TIM8_Init+0x100>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022dc:	22a7      	movs	r2, #167	; 0xa7
 80022de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <MX_TIM8_Init+0xfc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002300:	4827      	ldr	r0, [pc, #156]	; (80023a0 <MX_TIM8_Init+0xfc>)
 8002302:	f003 f974 	bl	80055ee <HAL_TIM_PWM_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800230c:	f7ff fb5a 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800231c:	4619      	mov	r1, r3
 800231e:	4820      	ldr	r0, [pc, #128]	; (80023a0 <MX_TIM8_Init+0xfc>)
 8002320:	f003 ffe4 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800232a:	f7ff fb4b 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232e:	2360      	movs	r3, #96	; 0x60
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	220c      	movs	r2, #12
 800234c:	4619      	mov	r1, r3
 800234e:	4814      	ldr	r0, [pc, #80]	; (80023a0 <MX_TIM8_Init+0xfc>)
 8002350:	f003 fb16 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800235a:	f7ff fb33 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002376:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <MX_TIM8_Init+0xfc>)
 8002382:	f004 f82f 	bl	80063e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 800238c:	f7ff fb1a 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <MX_TIM8_Init+0xfc>)
 8002392:	f000 f935 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8002396:	bf00      	nop
 8002398:	3748      	adds	r7, #72	; 0x48
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000358 	.word	0x20000358
 80023a4:	40010400 	.word	0x40010400

080023a8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ae:	f107 0320 	add.w	r3, r7, #32
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <MX_TIM12_Init+0xd4>)
 80023d0:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <MX_TIM12_Init+0xd8>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <MX_TIM12_Init+0xd4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <MX_TIM12_Init+0xd4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <MX_TIM12_Init+0xd4>)
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <MX_TIM12_Init+0xd4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <MX_TIM12_Init+0xd4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80023f4:	4821      	ldr	r0, [pc, #132]	; (800247c <MX_TIM12_Init+0xd4>)
 80023f6:	f003 f8ab 	bl	8005550 <HAL_TIM_Base_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002400:	f7ff fae0 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002408:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800240a:	f107 0320 	add.w	r3, r7, #32
 800240e:	4619      	mov	r1, r3
 8002410:	481a      	ldr	r0, [pc, #104]	; (800247c <MX_TIM12_Init+0xd4>)
 8002412:	f003 fb7b 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800241c:	f7ff fad2 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002420:	4816      	ldr	r0, [pc, #88]	; (800247c <MX_TIM12_Init+0xd4>)
 8002422:	f003 f8e4 	bl	80055ee <HAL_TIM_PWM_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800242c:	f7ff faca 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002430:	2360      	movs	r3, #96	; 0x60
 8002432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	2200      	movs	r2, #0
 8002444:	4619      	mov	r1, r3
 8002446:	480d      	ldr	r0, [pc, #52]	; (800247c <MX_TIM12_Init+0xd4>)
 8002448:	f003 fa9a 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002452:	f7ff fab7 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2204      	movs	r2, #4
 800245a:	4619      	mov	r1, r3
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_TIM12_Init+0xd4>)
 800245e:	f003 fa8f 	bl	8005980 <HAL_TIM_PWM_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8002468:	f7ff faac 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <MX_TIM12_Init+0xd4>)
 800246e:	f000 f8c7 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8002472:	bf00      	nop
 8002474:	3730      	adds	r7, #48	; 0x30
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000498 	.word	0x20000498
 8002480:	40001800 	.word	0x40001800

08002484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <HAL_TIM_Base_MspInit+0x120>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80024b2:	e072      	b.n	800259a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]
}
 80024da:	e05e      	b.n	800259a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_TIM_Base_MspInit+0x128>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
}
 8002502:	e04a      	b.n	800259a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM6)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_TIM_Base_MspInit+0x12c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d116      	bne.n	800253c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2101      	movs	r1, #1
 800252e:	2036      	movs	r0, #54	; 0x36
 8002530:	f001 fc11 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002534:	2036      	movs	r0, #54	; 0x36
 8002536:	f001 fc2a 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 800253a:	e02e      	b.n	800259a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_TIM_Base_MspInit+0x130>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d116      	bne.n	8002574 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	2037      	movs	r0, #55	; 0x37
 8002568:	f001 fbf5 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800256c:	2037      	movs	r0, #55	; 0x37
 800256e:	f001 fc0e 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002572:	e012      	b.n	800259a <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM12)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_TIM_Base_MspInit+0x134>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10d      	bne.n	800259a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_TIM_Base_MspInit+0x124>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
}
 800259a:	bf00      	nop
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40001000 	.word	0x40001000
 80025b4:	40001400 	.word	0x40001400
 80025b8:	40001800 	.word	0x40001800

080025bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10d      	bne.n	80025ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_TIM_PWM_MspInit+0x40>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_TIM_PWM_MspInit+0x40>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_TIM_PWM_MspInit+0x40>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40010400 	.word	0x40010400
 80025fc:	40023800 	.word	0x40023800

08002600 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_TIM_MspPostInit+0x144>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11f      	bne.n	8002662 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	4b48      	ldr	r3, [pc, #288]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a47      	ldr	r2, [pc, #284]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b45      	ldr	r3, [pc, #276]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO5_Pin;
 800263e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO5_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	4619      	mov	r1, r3
 800265a:	483c      	ldr	r0, [pc, #240]	; (800274c <HAL_TIM_MspPostInit+0x14c>)
 800265c:	f001 febc 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002660:	e06c      	b.n	800273c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <HAL_TIM_MspPostInit+0x150>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d11e      	bne.n	80026aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin|SERVO1_Pin;
 8002688:	2303      	movs	r3, #3
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002698:	2302      	movs	r3, #2
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	482c      	ldr	r0, [pc, #176]	; (8002754 <HAL_TIM_MspPostInit+0x154>)
 80026a4:	f001 fe98 	bl	80043d8 <HAL_GPIO_Init>
}
 80026a8:	e048      	b.n	800273c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_TIM_MspPostInit+0x158>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d11f      	bne.n	80026f4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6313      	str	r3, [r2, #48]	; 0x30
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO4_Pin;
 80026d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026e2:	2303      	movs	r3, #3
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO4_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	481b      	ldr	r0, [pc, #108]	; (800275c <HAL_TIM_MspPostInit+0x15c>)
 80026ee:	f001 fe73 	bl	80043d8 <HAL_GPIO_Init>
}
 80026f2:	e023      	b.n	800273c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_TIM_MspPostInit+0x160>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d11e      	bne.n	800273c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_Pin|SERVO3_Pin;
 800271a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800272c:	2309      	movs	r3, #9
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4807      	ldr	r0, [pc, #28]	; (8002754 <HAL_TIM_MspPostInit+0x154>)
 8002738:	f001 fe4e 	bl	80043d8 <HAL_GPIO_Init>
}
 800273c:	bf00      	nop
 800273e:	3730      	adds	r7, #48	; 0x30
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010000 	.word	0x40010000
 8002748:	40023800 	.word	0x40023800
 800274c:	40020000 	.word	0x40020000
 8002750:	40000400 	.word	0x40000400
 8002754:	40020400 	.word	0x40020400
 8002758:	40010400 	.word	0x40010400
 800275c:	40020800 	.word	0x40020800
 8002760:	40001800 	.word	0x40001800

08002764 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_UART4_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_UART4_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_UART4_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_UART4_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_UART4_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_UART4_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_UART4_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_UART4_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_UART4_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_UART4_Init+0x4c>)
 800279c:	f003 fe88 	bl	80064b0 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027a6:	f7ff f90d 	bl	80019c4 <Error_Handler>
  }

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000678 	.word	0x20000678
 80027b4:	40004c00 	.word	0x40004c00

080027b8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_UART5_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <MX_UART5_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_UART5_Init+0x4c>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_UART5_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_UART5_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_UART5_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_UART5_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_UART5_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_UART5_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_UART5_Init+0x4c>)
 80027f0:	f003 fe5e 	bl	80064b0 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80027fa:	f7ff f8e3 	bl	80019c4 <Error_Handler>
  }

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200005b8 	.word	0x200005b8
 8002808:	40005000 	.word	0x40005000

0800280c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <MX_USART1_UART_Init+0x50>)
 8002814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800281c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_USART1_UART_Init+0x4c>)
 8002844:	f003 fe34 	bl	80064b0 <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800284e:	f7ff f8b9 	bl	80019c4 <Error_Handler>
  }

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200005f8 	.word	0x200005f8
 800285c:	40011000 	.word	0x40011000

08002860 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <MX_USART2_UART_Init+0x50>)
 8002868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 800286c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_USART2_UART_Init+0x4c>)
 8002898:	f003 fe0a 	bl	80064b0 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028a2:	f7ff f88f 	bl	80019c4 <Error_Handler>
  }

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200006b8 	.word	0x200006b8
 80028b0:	40004400 	.word	0x40004400

080028b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <MX_USART3_UART_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ec:	f003 fde0 	bl	80064b0 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028f6:	f7ff f865 	bl	80019c4 <Error_Handler>
  }

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000578 	.word	0x20000578
 8002904:	40004800 	.word	0x40004800

08002908 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <MX_USART6_UART_Init+0x50>)
 8002910:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 8002914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002918:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <MX_USART6_UART_Init+0x4c>)
 8002940:	f003 fdb6 	bl	80064b0 <HAL_UART_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800294a:	f7ff f83b 	bl	80019c4 <Error_Handler>
  }

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000638 	.word	0x20000638
 8002958:	40011400 	.word	0x40011400

0800295c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b094      	sub	sp, #80	; 0x50
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a90      	ldr	r2, [pc, #576]	; (8002bbc <HAL_UART_MspInit+0x260>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f040 808b 	bne.w	8002a96 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
 8002984:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	4a8d      	ldr	r2, [pc, #564]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 800298a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800298e:	6413      	str	r3, [r2, #64]	; 0x40
 8002990:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a86      	ldr	r2, [pc, #536]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029b8:	2303      	movs	r3, #3
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029c8:	2308      	movs	r3, #8
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029d0:	4619      	mov	r1, r3
 80029d2:	487c      	ldr	r0, [pc, #496]	; (8002bc4 <HAL_UART_MspInit+0x268>)
 80029d4:	f001 fd00 	bl	80043d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80029d8:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029da:	4a7c      	ldr	r2, [pc, #496]	; (8002bcc <HAL_UART_MspInit+0x270>)
 80029dc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80029de:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e6:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ec:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f2:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a00:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002a06:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a0c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a14:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a16:	4b6c      	ldr	r3, [pc, #432]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a1c:	486a      	ldr	r0, [pc, #424]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a1e:	f001 f9d1 	bl	8003dc4 <HAL_DMA_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a28:	f7fe ffcc 	bl	80019c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a66      	ldr	r2, [pc, #408]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_UART_MspInit+0x26c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002a38:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a3a:	4a66      	ldr	r2, [pc, #408]	; (8002bd4 <HAL_UART_MspInit+0x278>)
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002a3e:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a60:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002a66:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a6c:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a78:	4855      	ldr	r0, [pc, #340]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a7a:	f001 f9a3 	bl	8003dc4 <HAL_DMA_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002a84:	f7fe ff9e 	bl	80019c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a51      	ldr	r2, [pc, #324]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8e:	4a50      	ldr	r2, [pc, #320]	; (8002bd0 <HAL_UART_MspInit+0x274>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a94:	e158      	b.n	8002d48 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==UART5)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <HAL_UART_MspInit+0x27c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d153      	bne.n	8002b48 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a45      	ldr	r2, [pc, #276]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b06:	2308      	movs	r3, #8
 8002b08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4832      	ldr	r0, [pc, #200]	; (8002bdc <HAL_UART_MspInit+0x280>)
 8002b12:	f001 fc61 	bl	80043d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b16:	2304      	movs	r3, #4
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b26:	2308      	movs	r3, #8
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	482b      	ldr	r0, [pc, #172]	; (8002be0 <HAL_UART_MspInit+0x284>)
 8002b32:	f001 fc51 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2035      	movs	r0, #53	; 0x35
 8002b3c:	f001 f90b 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b40:	2035      	movs	r0, #53	; 0x35
 8002b42:	f001 f924 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002b46:	e0ff      	b.n	8002d48 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <HAL_UART_MspInit+0x288>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d14c      	bne.n	8002bec <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_UART_MspInit+0x264>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b8a:	23c0      	movs	r3, #192	; 0xc0
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4810      	ldr	r0, [pc, #64]	; (8002be8 <HAL_UART_MspInit+0x28c>)
 8002ba6:	f001 fc17 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2025      	movs	r0, #37	; 0x25
 8002bb0:	f001 f8d1 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb4:	2025      	movs	r0, #37	; 0x25
 8002bb6:	f001 f8ea 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002bba:	e0c5      	b.n	8002d48 <HAL_UART_MspInit+0x3ec>
 8002bbc:	40004c00 	.word	0x40004c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	20000518 	.word	0x20000518
 8002bcc:	40026040 	.word	0x40026040
 8002bd0:	200006f8 	.word	0x200006f8
 8002bd4:	40026070 	.word	0x40026070
 8002bd8:	40005000 	.word	0x40005000
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_UART_MspInit+0x3f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d134      	bne.n	8002c60 <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	4b4f      	ldr	r3, [pc, #316]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a4e      	ldr	r2, [pc, #312]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c3e:	2307      	movs	r3, #7
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c46:	4619      	mov	r1, r3
 8002c48:	4843      	ldr	r0, [pc, #268]	; (8002d58 <HAL_UART_MspInit+0x3fc>)
 8002c4a:	f001 fbc5 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2026      	movs	r0, #38	; 0x26
 8002c54:	f001 f87f 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c58:	2026      	movs	r0, #38	; 0x26
 8002c5a:	f001 f898 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002c5e:	e073      	b.n	8002d48 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <HAL_UART_MspInit+0x400>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d135      	bne.n	8002cd6 <HAL_UART_MspInit+0x37a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a38      	ldr	r2, [pc, #224]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a31      	ldr	r2, [pc, #196]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ca2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4828      	ldr	r0, [pc, #160]	; (8002d60 <HAL_UART_MspInit+0x404>)
 8002cc0:	f001 fb8a 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2027      	movs	r0, #39	; 0x27
 8002cca:	f001 f844 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cce:	2027      	movs	r0, #39	; 0x27
 8002cd0:	f001 f85d 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002cd4:	e038      	b.n	8002d48 <HAL_UART_MspInit+0x3ec>
  else if(uartHandle->Instance==USART6)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_UART_MspInit+0x408>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d133      	bne.n	8002d48 <HAL_UART_MspInit+0x3ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002cea:	f043 0320 	orr.w	r3, r3, #32
 8002cee:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_UART_MspInit+0x3f8>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d18:	23c0      	movs	r3, #192	; 0xc0
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d30:	4619      	mov	r1, r3
 8002d32:	480d      	ldr	r0, [pc, #52]	; (8002d68 <HAL_UART_MspInit+0x40c>)
 8002d34:	f001 fb50 	bl	80043d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2047      	movs	r0, #71	; 0x47
 8002d3e:	f001 f80a 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d42:	2047      	movs	r0, #71	; 0x47
 8002d44:	f001 f823 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 8002d48:	bf00      	nop
 8002d4a:	3750      	adds	r7, #80	; 0x50
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40011400 	.word	0x40011400
 8002d68:	40020800 	.word	0x40020800

08002d6c <Reset_Handler>:
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da4 <LoopFillZerobss+0x14>
 8002d70:	2100      	movs	r1, #0
 8002d72:	e003      	b.n	8002d7c <LoopCopyDataInit>

08002d74 <CopyDataInit>:
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <LoopFillZerobss+0x18>)
 8002d76:	585b      	ldr	r3, [r3, r1]
 8002d78:	5043      	str	r3, [r0, r1]
 8002d7a:	3104      	adds	r1, #4

08002d7c <LoopCopyDataInit>:
 8002d7c:	480b      	ldr	r0, [pc, #44]	; (8002dac <LoopFillZerobss+0x1c>)
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <LoopFillZerobss+0x20>)
 8002d80:	1842      	adds	r2, r0, r1
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3f6      	bcc.n	8002d74 <CopyDataInit>
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <LoopFillZerobss+0x24>)
 8002d88:	e002      	b.n	8002d90 <LoopFillZerobss>

08002d8a <FillZerobss>:
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f842 3b04 	str.w	r3, [r2], #4

08002d90 <LoopFillZerobss>:
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <LoopFillZerobss+0x28>)
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3f9      	bcc.n	8002d8a <FillZerobss>
 8002d96:	f7ff f895 	bl	8001ec4 <SystemInit>
 8002d9a:	f004 fabd 	bl	8007318 <__libc_init_array>
 8002d9e:	f7fe fcb7 	bl	8001710 <main>
 8002da2:	4770      	bx	lr
 8002da4:	20020000 	.word	0x20020000
 8002da8:	08009030 	.word	0x08009030
 8002dac:	20000000 	.word	0x20000000
 8002db0:	200001dc 	.word	0x200001dc
 8002db4:	200001dc 	.word	0x200001dc
 8002db8:	20000760 	.word	0x20000760

08002dbc <ADC_IRQHandler>:
 8002dbc:	e7fe      	b.n	8002dbc <ADC_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_Init+0x40>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_Init+0x40>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_Init+0x40>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f000 ffa9 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7fe ff62 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 ffc1 	bl	8003daa <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f000 ff89 	bl	8003d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000008 	.word	0x20000008
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x20>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_IncTick+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <HAL_IncTick+0x24>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000008 	.word	0x20000008
 8002e88:	20000758 	.word	0x20000758

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_GetTick+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000758 	.word	0x20000758

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff ffee 	bl	8002e8c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_Delay+0x40>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000008 	.word	0x20000008

08002ee8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0ed      	b.n	80030d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd ffe6 	bl	8000ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0202 	bic.w	r2, r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1c:	f7ff ffb6 	bl	8002e8c <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f22:	e012      	b.n	8002f4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f24:	f7ff ffb2 	bl	8002e8c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b0a      	cmp	r3, #10
 8002f30:	d90b      	bls.n	8002f4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2205      	movs	r2, #5
 8002f42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0c5      	b.n	80030d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f68:	f7ff ff90 	bl	8002e8c <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f6e:	e012      	b.n	8002f96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f70:	f7ff ff8c 	bl	8002e8c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b0a      	cmp	r3, #10
 8002f7c:	d90b      	bls.n	8002f96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e09f      	b.n	80030d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0e5      	beq.n	8002f70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e1b      	ldrb	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d108      	bne.n	8002fbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e007      	b.n	8002fce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7e5b      	ldrb	r3, [r3, #25]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e007      	b.n	8002ff8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e9b      	ldrb	r3, [r3, #26]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0220 	orr.w	r2, r2, #32
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e007      	b.n	8003022 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0220 	bic.w	r2, r2, #32
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7edb      	ldrb	r3, [r3, #27]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0210 	bic.w	r2, r2, #16
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e007      	b.n	800304c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0210 	orr.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7f1b      	ldrb	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d108      	bne.n	8003066 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e007      	b.n	8003076 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0208 	bic.w	r2, r2, #8
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7f5b      	ldrb	r3, [r3, #29]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d108      	bne.n	8003090 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e007      	b.n	80030a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	ea42 0103 	orr.w	r1, r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d003      	beq.n	8003106 <HAL_CAN_ConfigFilter+0x26>
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 80be 	bne.w	8003282 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003106:	4b65      	ldr	r3, [pc, #404]	; (800329c <HAL_CAN_ConfigFilter+0x1bc>)
 8003108:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003120:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	431a      	orrs	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	401a      	ands	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d123      	bne.n	80031b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800318a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3248      	adds	r2, #72	; 0x48
 8003190:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	3348      	adds	r3, #72	; 0x48
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d122      	bne.n	80031fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3248      	adds	r2, #72	; 0x48
 80031de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	3348      	adds	r3, #72	; 0x48
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003218:	e007      	b.n	800322a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003244:	e007      	b.n	8003256 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	431a      	orrs	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	431a      	orrs	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003274:	f023 0201 	bic.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e006      	b.n	8003290 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40006400 	.word	0x40006400

080032a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d12e      	bne.n	8003312 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032cc:	f7ff fdde 	bl	8002e8c <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032d2:	e012      	b.n	80032fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032d4:	f7ff fdda 	bl	8002e8c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b0a      	cmp	r3, #10
 80032e0:	d90b      	bls.n	80032fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e012      	b.n	8003320 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e006      	b.n	8003320 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
  }
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d003      	beq.n	8003354 <HAL_CAN_AddTxMessage+0x2c>
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	2b02      	cmp	r3, #2
 8003350:	f040 80b8 	bne.w	80034c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80a0 	beq.w	80034b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	0e1b      	lsrs	r3, r3, #24
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d907      	bls.n	8003394 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e09e      	b.n	80034d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003394:	2201      	movs	r2, #1
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	409a      	lsls	r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	6809      	ldr	r1, [r1, #0]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3318      	adds	r3, #24
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	440b      	add	r3, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e00f      	b.n	80033e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3318      	adds	r3, #24
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	440b      	add	r3, r1
 80033e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3318      	adds	r3, #24
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	440b      	add	r3, r1
 80033f2:	3304      	adds	r3, #4
 80033f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d111      	bne.n	8003422 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3318      	adds	r3, #24
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	4413      	add	r3, r2
 800340a:	3304      	adds	r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	6811      	ldr	r1, [r2, #0]
 8003412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3318      	adds	r3, #24
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	440b      	add	r3, r1
 800341e:	3304      	adds	r3, #4
 8003420:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3307      	adds	r3, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	061a      	lsls	r2, r3, #24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3306      	adds	r3, #6
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3305      	adds	r3, #5
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	4313      	orrs	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	3204      	adds	r2, #4
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	4610      	mov	r0, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	ea43 0200 	orr.w	r2, r3, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	440b      	add	r3, r1
 8003454:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003458:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3303      	adds	r3, #3
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	061a      	lsls	r2, r3, #24
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3302      	adds	r3, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	4610      	mov	r0, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6811      	ldr	r1, [r2, #0]
 8003480:	ea43 0200 	orr.w	r2, r3, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	440b      	add	r3, r1
 800348a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800348e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3318      	adds	r3, #24
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4413      	add	r3, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6811      	ldr	r1, [r2, #0]
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3318      	adds	r3, #24
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	440b      	add	r3, r1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e00e      	b.n	80034d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e006      	b.n	80034d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034de:	b480      	push	{r7}
 80034e0:	b087      	sub	sp, #28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d003      	beq.n	8003502 <HAL_CAN_GetRxMessage+0x24>
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f040 80f3 	bne.w	80036e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0e7      	b.n	80036f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d8      	b.n	80036f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	331b      	adds	r3, #27
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	4413      	add	r3, r2
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0204 	and.w	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	331b      	adds	r3, #27
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0d5b      	lsrs	r3, r3, #21
 8003572:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e00b      	b.n	8003594 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	331b      	adds	r3, #27
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	331b      	adds	r3, #27
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4413      	add	r3, r2
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0202 	and.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	331b      	adds	r3, #27
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	331b      	adds	r3, #27
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	331b      	adds	r3, #27
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0a1a      	lsrs	r2, r3, #8
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	4413      	add	r3, r2
 800362c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0c1a      	lsrs	r2, r3, #16
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	3302      	adds	r3, #2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0e1a      	lsrs	r2, r3, #24
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	3303      	adds	r3, #3
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4413      	add	r3, r2
 8003660:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	3304      	adds	r3, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4413      	add	r3, r2
 8003678:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0a1a      	lsrs	r2, r3, #8
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	3305      	adds	r3, #5
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	4413      	add	r3, r2
 8003692:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0c1a      	lsrs	r2, r3, #16
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	3306      	adds	r3, #6
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e1a      	lsrs	r2, r3, #24
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	3307      	adds	r3, #7
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	e007      	b.n	80036e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e006      	b.n	80036f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003712:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d002      	beq.n	8003720 <HAL_CAN_ActivateNotification+0x1e>
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d109      	bne.n	8003734 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e006      	b.n	8003742 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	; 0x28
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d07c      	beq.n	800388e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d023      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2201      	movs	r2, #1
 80037a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f97d 	bl	8003ab0 <HAL_CAN_TxMailbox0CompleteCallback>
 80037b6:	e016      	b.n	80037e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e00c      	b.n	80037e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e002      	b.n	80037e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f983 	bl	8003aec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d024      	beq.n	800383a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f95d 	bl	8003ac4 <HAL_CAN_TxMailbox1CompleteCallback>
 800380a:	e016      	b.n	800383a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e00c      	b.n	800383a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	e002      	b.n	800383a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f963 	bl	8003b00 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d024      	beq.n	800388e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800384c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f93d 	bl	8003ad8 <HAL_CAN_TxMailbox2CompleteCallback>
 800385e:	e016      	b.n	800388e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e00c      	b.n	800388e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	e002      	b.n	800388e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f943 	bl	8003b14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2210      	movs	r2, #16
 80038b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2208      	movs	r2, #8
 80038cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f92a 	bl	8003b28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd fddd 	bl	80014ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800390c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2210      	movs	r2, #16
 8003914:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2208      	movs	r2, #8
 8003930:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f90c 	bl	8003b50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8f3 	bl	8003b3c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8f6 	bl	8003b64 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2208      	movs	r2, #8
 8003992:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8ef 	bl	8003b78 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d075      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d06c      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d03d      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d038      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a1c:	2b30      	cmp	r3, #48	; 0x30
 8003a1e:	d017      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x302>
 8003a20:	2b30      	cmp	r3, #48	; 0x30
 8003a22:	d804      	bhi.n	8003a2e <HAL_CAN_IRQHandler+0x2e0>
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d009      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x2ee>
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d00c      	beq.n	8003a46 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a2c:	e024      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003a2e:	2b50      	cmp	r3, #80	; 0x50
 8003a30:	d018      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x316>
 8003a32:	2b60      	cmp	r3, #96	; 0x60
 8003a34:	d01b      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x320>
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d00f      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x30c>
            break;
 8003a3a:	e01d      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a44:	e018      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f043 0310 	orr.w	r3, r3, #16
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4e:	e013      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0320 	orr.w	r3, r3, #32
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a58:	e00e      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a62:	e009      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6c:	e004      	b.n	8003a78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f872 	bl	8003b8c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f7ff ff8e 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff29 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff3e 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff8e 	bl	8003c94 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5d 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff31 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa2 	bl	8003cfc <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff f85c 	bl	8002e8c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e099      	b.n	8003f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e00:	e00f      	b.n	8003e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e02:	f7ff f843 	bl	8002e8c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d908      	bls.n	8003e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e078      	b.n	8003f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e8      	bne.n	8003e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_DMA_Init+0x158>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d117      	bne.n	8003ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa0b 	bl	80042e4 <DMA_CheckFifoParam>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e016      	b.n	8003f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9c2 	bl	8004278 <DMA_CalcBaseAndBitshift>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	223f      	movs	r2, #63	; 0x3f
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	f010803f 	.word	0xf010803f

08003f20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d004      	beq.n	8003f3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e00c      	b.n	8003f58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2205      	movs	r2, #5
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_DMA_IRQHandler+0x258>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a92      	ldr	r2, [pc, #584]	; (80041c0 <HAL_DMA_IRQHandler+0x25c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	2208      	movs	r2, #8
 8003f90:	409a      	lsls	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01a      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	2204      	movs	r2, #4
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	2210      	movs	r2, #16
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d043      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d03c      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2210      	movs	r2, #16
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d018      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d024      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
 8004092:	e01f      	b.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01b      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e016      	b.n	80040d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0208 	bic.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2220      	movs	r2, #32
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 808e 	beq.w	8004202 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8086 	beq.w	8004202 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	2220      	movs	r2, #32
 80040fc:	409a      	lsls	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b05      	cmp	r3, #5
 800410c:	d136      	bne.n	800417c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0216 	bic.w	r2, r2, #22
 800411c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <HAL_DMA_IRQHandler+0x1da>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0208 	bic.w	r2, r2, #8
 800414c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	223f      	movs	r2, #63	; 0x3f
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	2b00      	cmp	r3, #0
 8004170:	d07d      	beq.n	800426e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
        }
        return;
 800417a:	e078      	b.n	800426e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	2b00      	cmp	r3, #0
 800419e:	d030      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e02b      	b.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e022      	b.n	8004202 <HAL_DMA_IRQHandler+0x29e>
 80041bc:	20000000 	.word	0x20000000
 80041c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0210 	bic.w	r2, r2, #16
 80041e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d032      	beq.n	8004270 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2205      	movs	r2, #5
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3301      	adds	r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	429a      	cmp	r2, r3
 8004238:	d307      	bcc.n	800424a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f2      	bne.n	800422e <HAL_DMA_IRQHandler+0x2ca>
 8004248:	e000      	b.n	800424c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800424a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
 800426c:	e000      	b.n	8004270 <HAL_DMA_IRQHandler+0x30c>
        return;
 800426e:	bf00      	nop
    }
  }
}
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	3b10      	subs	r3, #16
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <DMA_CalcBaseAndBitshift+0x64>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d909      	bls.n	80042ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	; 0x58
 80042b8:	e007      	b.n	80042ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	aaaaaaab 	.word	0xaaaaaaab
 80042e0:	08008df0 	.word	0x08008df0

080042e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d11f      	bne.n	800433e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d855      	bhi.n	80043b0 <DMA_CheckFifoParam+0xcc>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <DMA_CheckFifoParam+0x28>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800432f 	.word	0x0800432f
 8004314:	0800431d 	.word	0x0800431d
 8004318:	080043b1 	.word	0x080043b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d045      	beq.n	80043b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800432c:	e042      	b.n	80043b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004336:	d13f      	bne.n	80043b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433c:	e03c      	b.n	80043b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d121      	bne.n	800438c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d836      	bhi.n	80043bc <DMA_CheckFifoParam+0xd8>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <DMA_CheckFifoParam+0x70>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004365 	.word	0x08004365
 8004358:	0800436b 	.word	0x0800436b
 800435c:	08004365 	.word	0x08004365
 8004360:	0800437d 	.word	0x0800437d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e02f      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d024      	beq.n	80043c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437a:	e021      	b.n	80043c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004384:	d11e      	bne.n	80043c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800438a:	e01b      	b.n	80043c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d902      	bls.n	8004398 <DMA_CheckFifoParam+0xb4>
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004396:	e018      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e015      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      break;
 80043ae:	e00b      	b.n	80043c8 <DMA_CheckFifoParam+0xe4>
      break;
 80043b0:	bf00      	nop
 80043b2:	e00a      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;
 80043b4:	bf00      	nop
 80043b6:	e008      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;
 80043b8:	bf00      	nop
 80043ba:	e006      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;
 80043bc:	bf00      	nop
 80043be:	e004      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;   
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <DMA_CheckFifoParam+0xe6>
      break;
 80043c8:	bf00      	nop
    }
  } 
  
  return status; 
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e16b      	b.n	80046cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043f4:	2201      	movs	r2, #1
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4013      	ands	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	f040 815a 	bne.w	80046c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d00b      	beq.n	8004432 <HAL_GPIO_Init+0x5a>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004426:	2b11      	cmp	r3, #17
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b12      	cmp	r3, #18
 8004430:	d130      	bne.n	8004494 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004468:	2201      	movs	r2, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 0201 	and.w	r2, r3, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0xfc>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b12      	cmp	r3, #18
 80044d2:	d123      	bne.n	800451c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	08da      	lsrs	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3208      	adds	r2, #8
 80044dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	220f      	movs	r2, #15
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	08da      	lsrs	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3208      	adds	r2, #8
 8004516:	69b9      	ldr	r1, [r7, #24]
 8004518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2203      	movs	r2, #3
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0203 	and.w	r2, r3, #3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80b4 	beq.w	80046c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_GPIO_Init+0x308>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	4a5e      	ldr	r2, [pc, #376]	; (80046e0 <HAL_GPIO_Init+0x308>)
 8004568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456c:	6453      	str	r3, [r2, #68]	; 0x44
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_GPIO_Init+0x308>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800457a:	4a5a      	ldr	r2, [pc, #360]	; (80046e4 <HAL_GPIO_Init+0x30c>)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	3302      	adds	r3, #2
 8004582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	220f      	movs	r2, #15
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <HAL_GPIO_Init+0x310>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02b      	beq.n	80045fe <HAL_GPIO_Init+0x226>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_GPIO_Init+0x314>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d025      	beq.n	80045fa <HAL_GPIO_Init+0x222>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a4f      	ldr	r2, [pc, #316]	; (80046f0 <HAL_GPIO_Init+0x318>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <HAL_GPIO_Init+0x21e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a4e      	ldr	r2, [pc, #312]	; (80046f4 <HAL_GPIO_Init+0x31c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d019      	beq.n	80045f2 <HAL_GPIO_Init+0x21a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a4d      	ldr	r2, [pc, #308]	; (80046f8 <HAL_GPIO_Init+0x320>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_GPIO_Init+0x216>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4c      	ldr	r2, [pc, #304]	; (80046fc <HAL_GPIO_Init+0x324>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00d      	beq.n	80045ea <HAL_GPIO_Init+0x212>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4b      	ldr	r2, [pc, #300]	; (8004700 <HAL_GPIO_Init+0x328>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <HAL_GPIO_Init+0x20e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4a      	ldr	r2, [pc, #296]	; (8004704 <HAL_GPIO_Init+0x32c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_GPIO_Init+0x20a>
 80045de:	2307      	movs	r3, #7
 80045e0:	e00e      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045e2:	2308      	movs	r3, #8
 80045e4:	e00c      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045e6:	2306      	movs	r3, #6
 80045e8:	e00a      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045ea:	2305      	movs	r3, #5
 80045ec:	e008      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e006      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045f2:	2303      	movs	r3, #3
 80045f4:	e004      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e002      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_GPIO_Init+0x228>
 80045fe:	2300      	movs	r3, #0
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	f002 0203 	and.w	r2, r2, #3
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	4093      	lsls	r3, r2
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004610:	4934      	ldr	r1, [pc, #208]	; (80046e4 <HAL_GPIO_Init+0x30c>)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	3302      	adds	r3, #2
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800461e:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <HAL_GPIO_Init+0x330>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004642:	4a31      	ldr	r2, [pc, #196]	; (8004708 <HAL_GPIO_Init+0x330>)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004648:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_GPIO_Init+0x330>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_GPIO_Init+0x330>)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004672:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_GPIO_Init+0x330>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <HAL_GPIO_Init+0x330>)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_GPIO_Init+0x330>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <HAL_GPIO_Init+0x330>)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	f67f ae90 	bls.w	80043f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3724      	adds	r7, #36	; 0x24
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40013800 	.word	0x40013800
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020800 	.word	0x40020800
 80046f4:	40020c00 	.word	0x40020c00
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021400 	.word	0x40021400
 8004700:	40021800 	.word	0x40021800
 8004704:	40021c00 	.word	0x40021c00
 8004708:	40013c00 	.word	0x40013c00

0800470c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800471c:	787b      	ldrb	r3, [r7, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004728:	e003      	b.n	8004732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	041a      	lsls	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	619a      	str	r2, [r3, #24]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	887b      	ldrh	r3, [r7, #2]
 8004750:	401a      	ands	r2, r3
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	429a      	cmp	r2, r3
 8004756:	d104      	bne.n	8004762 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	041a      	lsls	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004760:	e002      	b.n	8004768 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	619a      	str	r2, [r3, #24]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e25b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d075      	beq.n	800487e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004792:	4ba3      	ldr	r3, [pc, #652]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b04      	cmp	r3, #4
 800479c:	d00c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479e:	4ba0      	ldr	r3, [pc, #640]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d112      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4b9d      	ldr	r3, [pc, #628]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b6:	d10b      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	4b99      	ldr	r3, [pc, #612]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d05b      	beq.n	800487c <HAL_RCC_OscConfig+0x108>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d157      	bne.n	800487c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e236      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d8:	d106      	bne.n	80047e8 <HAL_RCC_OscConfig+0x74>
 80047da:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a90      	ldr	r2, [pc, #576]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e01d      	b.n	8004824 <HAL_RCC_OscConfig+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0x98>
 80047f2:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a8a      	ldr	r2, [pc, #552]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b88      	ldr	r3, [pc, #544]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a87      	ldr	r2, [pc, #540]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e00b      	b.n	8004824 <HAL_RCC_OscConfig+0xb0>
 800480c:	4b84      	ldr	r3, [pc, #528]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a83      	ldr	r2, [pc, #524]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a80      	ldr	r2, [pc, #512]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe fb2e 	bl	8002e8c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe fb2a 	bl	8002e8c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1fb      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0xc0>
 8004852:	e014      	b.n	800487e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fe fb1a 	bl	8002e8c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485c:	f7fe fb16 	bl	8002e8c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1e7      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0xe8>
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d063      	beq.n	8004952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004896:	4b62      	ldr	r3, [pc, #392]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d11c      	bne.n	80048dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b5f      	ldr	r3, [pc, #380]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x152>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1bb      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4952      	ldr	r1, [pc, #328]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	e03a      	b.n	8004952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e4:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCC_OscConfig+0x2b0>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fe facf 	bl	8002e8c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fe facb 	bl	8002e8c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e19c      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4940      	ldr	r1, [pc, #256]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x2b0>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fe faae 	bl	8002e8c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004934:	f7fe faaa 	bl	8002e8c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e17b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d030      	beq.n	80049c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCC_OscConfig+0x2b4>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fa8e 	bl	8002e8c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe fa8a 	bl	8002e8c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e15b      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x200>
 8004992:	e015      	b.n	80049c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004994:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x2b4>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499a:	f7fe fa77 	bl	8002e8c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a2:	f7fe fa73 	bl	8002e8c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e144      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a0 	beq.w	8004b0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6413      	str	r3, [r2, #64]	; 0x40
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d121      	bne.n	8004a4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <HAL_RCC_OscConfig+0x2b8>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a16:	f7fe fa39 	bl	8002e8c <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	e011      	b.n	8004a42 <HAL_RCC_OscConfig+0x2ce>
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470000 	.word	0x42470000
 8004a28:	42470e80 	.word	0x42470e80
 8004a2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fe fa2c 	bl	8002e8c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0fd      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x4d4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d106      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a7c      	ldr	r2, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e01c      	b.n	8004a9e <HAL_RCC_OscConfig+0x32a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x312>
 8004a6c:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a76      	ldr	r2, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	4b74      	ldr	r3, [pc, #464]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a73      	ldr	r2, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0x32a>
 8004a86:	4b71      	ldr	r3, [pc, #452]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a70      	ldr	r2, [pc, #448]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b6e      	ldr	r3, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a6d      	ldr	r2, [pc, #436]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d015      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f9f1 	bl	8002e8c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe f9ed 	bl	8002e8c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0bc      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ee      	beq.n	8004aae <HAL_RCC_OscConfig+0x33a>
 8004ad0:	e014      	b.n	8004afc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fe f9db 	bl	8002e8c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fe f9d7 	bl	8002e8c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0a6      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	4b56      	ldr	r3, [pc, #344]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b02:	4b52      	ldr	r3, [pc, #328]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a51      	ldr	r2, [pc, #324]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8092 	beq.w	8004c3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d05c      	beq.n	8004bde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d141      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fe f9ab 	bl	8002e8c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fe f9a7 	bl	8002e8c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e078      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	019b      	lsls	r3, r3, #6
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	3b01      	subs	r3, #1
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	4933      	ldr	r1, [pc, #204]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b82:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fe f980 	bl	8002e8c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fe f97c 	bl	8002e8c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e04d      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x41c>
 8004bae:	e045      	b.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_RCC_OscConfig+0x4dc>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fe f969 	bl	8002e8c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fe f965 	bl	8002e8c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e036      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x44a>
 8004bdc:	e02e      	b.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e029      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <HAL_RCC_OscConfig+0x4d8>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d115      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c12:	4013      	ands	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10d      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	42470060 	.word	0x42470060

08004c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0cc      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c68:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d90c      	bls.n	8004c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b63      	ldr	r3, [pc, #396]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0b8      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca8:	4b59      	ldr	r3, [pc, #356]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a58      	ldr	r2, [pc, #352]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cc0:	4b53      	ldr	r3, [pc, #332]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a52      	ldr	r2, [pc, #328]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	494d      	ldr	r1, [pc, #308]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d044      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf2:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d119      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e07f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d12:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e06f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e067      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d32:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 0203 	bic.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4934      	ldr	r1, [pc, #208]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d44:	f7fe f8a2 	bl	8002e8c <HAL_GetTick>
 8004d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4c:	f7fe f89e 	bl	8002e8c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e04f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 020c 	and.w	r2, r3, #12
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d1eb      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d20c      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e032      	b.n	8004e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4916      	ldr	r1, [pc, #88]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	490e      	ldr	r1, [pc, #56]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dda:	f000 f821 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004dde:	4601      	mov	r1, r0
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <HAL_RCC_ClockConfig+0x1c0>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	fa21 f303 	lsr.w	r3, r1, r3
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCC_ClockConfig+0x1c8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe f802 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023c00 	.word	0x40023c00
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08008dd8 	.word	0x08008dd8
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	20000004 	.word	0x20000004

08004e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e36:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d007      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0x32>
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d008      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0x38>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 808d 	bne.w	8004f66 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e4e:	60bb      	str	r3, [r7, #8]
       break;
 8004e50:	e08c      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e52:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e089      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e58:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e62:	4b45      	ldr	r3, [pc, #276]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d023      	beq.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	f04f 0400 	mov.w	r4, #0
 8004e78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	ea03 0501 	and.w	r5, r3, r1
 8004e84:	ea04 0602 	and.w	r6, r4, r2
 8004e88:	4a3d      	ldr	r2, [pc, #244]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e8a:	fb02 f106 	mul.w	r1, r2, r6
 8004e8e:	2200      	movs	r2, #0
 8004e90:	fb02 f205 	mul.w	r2, r2, r5
 8004e94:	440a      	add	r2, r1
 8004e96:	493a      	ldr	r1, [pc, #232]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e98:	fba5 0101 	umull	r0, r1, r5, r1
 8004e9c:	1853      	adds	r3, r2, r1
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f04f 0400 	mov.w	r4, #0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	f7fb fe29 	bl	8000b00 <__aeabi_uldivmod>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e049      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb6:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	099b      	lsrs	r3, r3, #6
 8004ebc:	f04f 0400 	mov.w	r4, #0
 8004ec0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	ea03 0501 	and.w	r5, r3, r1
 8004ecc:	ea04 0602 	and.w	r6, r4, r2
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	f04f 0400 	mov.w	r4, #0
 8004edc:	0154      	lsls	r4, r2, #5
 8004ede:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ee2:	014b      	lsls	r3, r1, #5
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	1b49      	subs	r1, r1, r5
 8004eea:	eb62 0206 	sbc.w	r2, r2, r6
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	f04f 0400 	mov.w	r4, #0
 8004ef6:	0194      	lsls	r4, r2, #6
 8004ef8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004efc:	018b      	lsls	r3, r1, #6
 8004efe:	1a5b      	subs	r3, r3, r1
 8004f00:	eb64 0402 	sbc.w	r4, r4, r2
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	00e2      	lsls	r2, r4, #3
 8004f0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f12:	00d9      	lsls	r1, r3, #3
 8004f14:	460b      	mov	r3, r1
 8004f16:	4614      	mov	r4, r2
 8004f18:	195b      	adds	r3, r3, r5
 8004f1a:	eb44 0406 	adc.w	r4, r4, r6
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	02a2      	lsls	r2, r4, #10
 8004f28:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f2c:	0299      	lsls	r1, r3, #10
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	4621      	mov	r1, r4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f04f 0400 	mov.w	r4, #0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4623      	mov	r3, r4
 8004f40:	f7fb fdde 	bl	8000b00 <__aeabi_uldivmod>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	3301      	adds	r3, #1
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	60bb      	str	r3, [r7, #8]
      break;
 8004f64:	e002      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f68:	60bb      	str	r3, [r7, #8]
      break;
 8004f6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	00f42400 	.word	0x00f42400
 8004f80:	00b71b00 	.word	0x00b71b00

08004f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000000 	.word	0x20000000

08004f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fa0:	f7ff fff0 	bl	8004f84 <HAL_RCC_GetHCLKFreq>
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	0a9b      	lsrs	r3, r3, #10
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4a03      	ldr	r2, [pc, #12]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb2:	5cd3      	ldrb	r3, [r2, r3]
 8004fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	08008de8 	.word	0x08008de8

08004fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fc8:	f7ff ffdc 	bl	8004f84 <HAL_RCC_GetHCLKFreq>
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0b5b      	lsrs	r3, r3, #13
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	08008de8 	.word	0x08008de8

08004fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e056      	b.n	80050ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fc fdd1 	bl	8001bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005034:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	ea42 0103 	orr.w	r1, r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	f003 0104 	and.w	r1, r3, #4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_SPI_TransmitReceive+0x26>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e18a      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x33c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e2:	f7fd fed3 	bl	8002e8c <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050f8:	887b      	ldrh	r3, [r7, #2]
 80050fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00f      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x70>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d107      	bne.n	800511c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d103      	bne.n	800511c <HAL_SPI_TransmitReceive+0x68>
 8005114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005118:	2b04      	cmp	r3, #4
 800511a:	d003      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800511c:	2302      	movs	r3, #2
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005122:	e15b      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x82>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x82>
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800513c:	e14e      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b04      	cmp	r3, #4
 8005148:	d003      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2205      	movs	r2, #5
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	887a      	ldrh	r2, [r7, #2]
 8005174:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d007      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ae:	d178      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_TransmitReceive+0x10a>
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d166      	bne.n	800528c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	e053      	b.n	800528c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d11b      	bne.n	800522a <HAL_SPI_TransmitReceive+0x176>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d016      	beq.n	800522a <HAL_SPI_TransmitReceive+0x176>
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d113      	bne.n	800522a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d119      	bne.n	800526c <HAL_SPI_TransmitReceive+0x1b8>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d014      	beq.n	800526c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	b292      	uxth	r2, r2
 800524e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005268:	2301      	movs	r3, #1
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800526c:	f7fd fe0e 	bl	8002e8c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005278:	429a      	cmp	r2, r3
 800527a:	d807      	bhi.n	800528c <HAL_SPI_TransmitReceive+0x1d8>
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d003      	beq.n	800528c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800528a:	e0a7      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1a6      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x130>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1a1      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x130>
 80052a0:	e07c      	b.n	800539c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x1fc>
 80052aa:	8b7b      	ldrh	r3, [r7, #26]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d16b      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052d6:	e057      	b.n	8005388 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d11c      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x26c>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x26c>
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d114      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d119      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x2ae>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d014      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800535e:	2301      	movs	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005362:	f7fd fd93 	bl	8002e8c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800536e:	429a      	cmp	r2, r3
 8005370:	d803      	bhi.n	800537a <HAL_SPI_TransmitReceive+0x2c6>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d102      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x2cc>
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005386:	e029      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1a2      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x224>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d19d      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f893 	bl	80054cc <SPI_EndRxTxTransaction>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053b8:	e010      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	e000      	b.n	80053dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	; 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005408:	e04c      	b.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d048      	beq.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005412:	f7fd fd3b 	bl	8002e8c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d902      	bls.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d13d      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005436:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005440:	d111      	bne.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544a:	d004      	beq.n	8005456 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d107      	bne.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005464:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d10f      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800548e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e00f      	b.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4013      	ands	r3, r2
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1a3      	bne.n	800540a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <SPI_EndRxTxTransaction+0x7c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <SPI_EndRxTxTransaction+0x80>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0d5b      	lsrs	r3, r3, #21
 80054e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f6:	d112      	bne.n	800551e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff ff78 	bl	80053f8 <SPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e00f      	b.n	800553e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3b01      	subs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d0f2      	beq.n	800551e <SPI_EndRxTxTransaction+0x52>
 8005538:	e000      	b.n	800553c <SPI_EndRxTxTransaction+0x70>
        break;
 800553a:	bf00      	nop
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000000 	.word	0x20000000
 800554c:	165e9f81 	.word	0x165e9f81

08005550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e01d      	b.n	800559e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc ff84 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 fb9c 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b06      	cmp	r3, #6
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01d      	b.n	800563c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fc ffd1 	bl	80025bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f000 fb4d 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fe22 	bl	80062a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <HAL_TIM_PWM_Start+0x74>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_PWM_Start+0x2c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a14      	ldr	r2, [pc, #80]	; (80056bc <HAL_TIM_PWM_Start+0x78>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <HAL_TIM_PWM_Start+0x30>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_TIM_PWM_Start+0x32>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d007      	beq.n	80056ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40010400 	.word	0x40010400

080056c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fde4 	bl	80062a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <HAL_TIM_PWM_Stop+0xa8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIM_PWM_Stop+0x2c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	; (800576c <HAL_TIM_PWM_Stop+0xac>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d101      	bne.n	80056f0 <HAL_TIM_PWM_Stop+0x30>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_TIM_PWM_Stop+0x32>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d017      	beq.n	8005726 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005700:	4013      	ands	r3, r2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <HAL_TIM_PWM_Stop+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	f240 4344 	movw	r3, #1092	; 0x444
 8005710:	4013      	ands	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <HAL_TIM_PWM_Stop+0x66>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_TIM_PWM_Stop+0x96>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	f240 4344 	movw	r3, #1092	; 0x444
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d107      	bne.n	8005756 <HAL_TIM_PWM_Stop+0x96>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b02      	cmp	r3, #2
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0202 	mvn.w	r2, #2
 800579c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa6b 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa5d 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa6e 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d122      	bne.n	8005820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0204 	mvn.w	r2, #4
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa41 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa33 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa44 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b08      	cmp	r3, #8
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b08      	cmp	r3, #8
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0208 	mvn.w	r2, #8
 8005844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2204      	movs	r2, #4
 800584a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa17 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa09 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fa1a 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b10      	cmp	r3, #16
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0210 	mvn.w	r2, #16
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2208      	movs	r2, #8
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9ed 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9df 	bl	8005c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f9f0 	bl	8005ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10e      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0201 	mvn.w	r2, #1
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb fcfa 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fdbe 	bl	800649c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d10e      	bne.n	800594c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d107      	bne.n	800594c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9b5 	bl	8005cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b20      	cmp	r3, #32
 8005958:	d10e      	bne.n	8005978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b20      	cmp	r3, #32
 8005966:	d107      	bne.n	8005978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0220 	mvn.w	r2, #32
 8005970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fd88 	bl	8006488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005996:	2302      	movs	r3, #2
 8005998:	e0b4      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x184>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	f200 809f 	bhi.w	8005af0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005af1 	.word	0x08005af1
 80059c0:	08005af1 	.word	0x08005af1
 80059c4:	08005af1 	.word	0x08005af1
 80059c8:	08005a2d 	.word	0x08005a2d
 80059cc:	08005af1 	.word	0x08005af1
 80059d0:	08005af1 	.word	0x08005af1
 80059d4:	08005af1 	.word	0x08005af1
 80059d8:	08005a6f 	.word	0x08005a6f
 80059dc:	08005af1 	.word	0x08005af1
 80059e0:	08005af1 	.word	0x08005af1
 80059e4:	08005af1 	.word	0x08005af1
 80059e8:	08005aaf 	.word	0x08005aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa0a 	bl	8005e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0208 	orr.w	r2, r2, #8
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0204 	bic.w	r2, r2, #4
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
      break;
 8005a2a:	e062      	b.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa5a 	bl	8005eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
      break;
 8005a6c:	e041      	b.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 faaf 	bl	8005fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0204 	bic.w	r2, r2, #4
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
      break;
 8005aac:	e021      	b.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fb03 	bl	80060c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	61da      	str	r2, [r3, #28]
      break;
 8005aee:	e000      	b.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005af0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_ConfigClockSource+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0a6      	b.n	8005c72 <HAL_TIM_ConfigClockSource+0x166>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d067      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0x120>
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d80b      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x6c>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d073      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0x140>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d802      	bhi.n	8005b6e <HAL_TIM_ConfigClockSource+0x62>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d06f      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b6c:	e078      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d06c      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0x140>
 8005b72:	2b30      	cmp	r3, #48	; 0x30
 8005b74:	d06a      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b76:	e073      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b78:	2b70      	cmp	r3, #112	; 0x70
 8005b7a:	d00d      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0x8c>
 8005b7c:	2b70      	cmp	r3, #112	; 0x70
 8005b7e:	d804      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x7e>
 8005b80:	2b50      	cmp	r3, #80	; 0x50
 8005b82:	d033      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0xe0>
 8005b84:	2b60      	cmp	r3, #96	; 0x60
 8005b86:	d041      	beq.n	8005c0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b88:	e06a      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d066      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x152>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d017      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b96:	e063      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f000 fb5a 	bl	8006260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e04c      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6899      	ldr	r1, [r3, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f000 fb43 	bl	8006260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005be8:	609a      	str	r2, [r3, #8]
      break;
 8005bea:	e039      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	6859      	ldr	r1, [r3, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f000 fab7 	bl	800616c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2150      	movs	r1, #80	; 0x50
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fb10 	bl	800622a <TIM_ITRx_SetConfig>
      break;
 8005c0a:	e029      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f000 fad6 	bl	80061ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2160      	movs	r1, #96	; 0x60
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb00 	bl	800622a <TIM_ITRx_SetConfig>
      break;
 8005c2a:	e019      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f000 fa97 	bl	800616c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2140      	movs	r1, #64	; 0x40
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 faf0 	bl	800622a <TIM_ITRx_SetConfig>
      break;
 8005c4a:	e009      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fae7 	bl	800622a <TIM_ITRx_SetConfig>
      break;
 8005c5c:	e000      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3a      	ldr	r2, [pc, #232]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d027      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d023      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01f      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d017      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <TIM_Base_SetConfig+0x134>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a24      	ldr	r2, [pc, #144]	; (8005e04 <TIM_Base_SetConfig+0x138>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <TIM_Base_SetConfig+0x13c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d108      	bne.n	8005d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800
 8005e00:	40001800 	.word	0x40001800
 8005e04:	40001c00 	.word	0x40001c00
 8005e08:	40002000 	.word	0x40002000

08005e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 0201 	bic.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 0302 	bic.w	r3, r3, #2
 8005e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <TIM_OC1_SetConfig+0xd8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC1_SetConfig+0x64>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <TIM_OC1_SetConfig+0xdc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10c      	bne.n	8005e8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0308 	bic.w	r3, r3, #8
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0304 	bic.w	r3, r3, #4
 8005e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <TIM_OC1_SetConfig+0xd8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC1_SetConfig+0x8e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <TIM_OC1_SetConfig+0xdc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d111      	bne.n	8005ebe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40010400 	.word	0x40010400

08005eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0210 	bic.w	r2, r3, #16
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0320 	bic.w	r3, r3, #32
 8005f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <TIM_OC2_SetConfig+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_OC2_SetConfig+0x68>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <TIM_OC2_SetConfig+0xe8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d10d      	bne.n	8005f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <TIM_OC2_SetConfig+0xe4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC2_SetConfig+0x94>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a16      	ldr	r2, [pc, #88]	; (8005fd4 <TIM_OC2_SetConfig+0xe8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d113      	bne.n	8005fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <TIM_OC3_SetConfig+0xe0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <TIM_OC3_SetConfig+0x66>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <TIM_OC3_SetConfig+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10d      	bne.n	800605a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <TIM_OC3_SetConfig+0xe0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC3_SetConfig+0x92>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a15      	ldr	r2, [pc, #84]	; (80060bc <TIM_OC3_SetConfig+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d113      	bne.n	8006092 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40010400 	.word	0x40010400

080060c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <TIM_OC4_SetConfig+0xa4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC4_SetConfig+0x68>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a11      	ldr	r2, [pc, #68]	; (8006168 <TIM_OC4_SetConfig+0xa8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d109      	bne.n	800613c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	019b      	lsls	r3, r3, #6
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400

0800616c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0201 	bic.w	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 030a 	bic.w	r3, r3, #10
 80061a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b087      	sub	sp, #28
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f023 0210 	bic.w	r2, r3, #16
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	031b      	lsls	r3, r3, #12
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	f043 0307 	orr.w	r3, r3, #7
 800624c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800627a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	021a      	lsls	r2, r3, #8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	431a      	orrs	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2201      	movs	r2, #1
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e05a      	b.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d022      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d01d      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10c      	bne.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4313      	orrs	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40010400 	.word	0x40010400
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40001800 	.word	0x40001800

080063e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e03d      	b.n	800647c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e03f      	b.n	8006542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fa40 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fb8d 	bl	8006c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b088      	sub	sp, #32
 800654e:	af02      	add	r7, sp, #8
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	f040 8083 	bne.w	8006672 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_UART_Transmit+0x2e>
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e07b      	b.n	8006674 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_UART_Transmit+0x40>
 8006586:	2302      	movs	r3, #2
 8006588:	e074      	b.n	8006674 <HAL_UART_Transmit+0x12a>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2221      	movs	r2, #33	; 0x21
 800659c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80065a0:	f7fc fc74 	bl	8002e8c <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80065ba:	e042      	b.n	8006642 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	d122      	bne.n	800661a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f9ac 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e042      	b.n	8006674 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006600:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	3302      	adds	r3, #2
 800660e:	60bb      	str	r3, [r7, #8]
 8006610:	e017      	b.n	8006642 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	3301      	adds	r3, #1
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	e013      	b.n	8006642 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2200      	movs	r2, #0
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f989 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e01f      	b.n	8006674 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	60ba      	str	r2, [r7, #8]
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1b7      	bne.n	80065bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	2140      	movs	r1, #64	; 0x40
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f970 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e006      	b.n	8006674 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b20      	cmp	r3, #32
 8006694:	d140      	bne.n	8006718 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_UART_Receive_IT+0x26>
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e039      	b.n	800671a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UART_Receive_IT+0x38>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e032      	b.n	800671a <HAL_UART_Receive_IT+0x9e>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2222      	movs	r2, #34	; 0x22
 80066d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0220 	orr.w	r2, r2, #32
 8006712:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10d      	bne.n	800677a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_UART_IRQHandler+0x52>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f9cc 	bl	8006b10 <UART_Receive_IT>
      return;
 8006778:	e0d1      	b.n	800691e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80b0 	beq.w	80068e2 <HAL_UART_IRQHandler+0x1ba>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <HAL_UART_IRQHandler+0x70>
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80a5 	beq.w	80068e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_UART_IRQHandler+0x90>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	f043 0201 	orr.w	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_UART_IRQHandler+0xb0>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	f043 0202 	orr.w	r2, r3, #2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <HAL_UART_IRQHandler+0xd0>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f0:	f043 0204 	orr.w	r2, r3, #4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00f      	beq.n	8006822 <HAL_UART_IRQHandler+0xfa>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <HAL_UART_IRQHandler+0xee>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d078      	beq.n	800691c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <HAL_UART_IRQHandler+0x11c>
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f966 	bl	8006b10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <HAL_UART_IRQHandler+0x144>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d031      	beq.n	80068d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f8af 	bl	80069d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d123      	bne.n	80068c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	4a21      	ldr	r2, [pc, #132]	; (8006924 <HAL_UART_IRQHandler+0x1fc>)
 800689e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd fb3b 	bl	8003f20 <HAL_DMA_Abort_IT>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d016      	beq.n	80068de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068be:	e00e      	b.n	80068de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f831 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	e00a      	b.n	80068de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f82d 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	e006      	b.n	80068de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f829 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068dc:	e01e      	b.n	800691c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068de:	bf00      	nop
    return;
 80068e0:	e01c      	b.n	800691c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_UART_IRQHandler+0x1d6>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f89c 	bl	8006a34 <UART_Transmit_IT>
    return;
 80068fc:	e00f      	b.n	800691e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_UART_IRQHandler+0x1f6>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e4 	bl	8006ae0 <UART_EndTransmit_IT>
    return;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_UART_IRQHandler+0x1f6>
    return;
 800691c:	bf00      	nop
  }
}
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	08006a0d 	.word	0x08006a0d

08006928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	e02c      	b.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d028      	beq.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x30>
 800695c:	f7fc fa96 	bl	8002e8c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	d21d      	bcs.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800697a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e00f      	b.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4013      	ands	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d0c3      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff ff7e 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b21      	cmp	r3, #33	; 0x21
 8006a46:	d144      	bne.n	8006ad2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a50:	d11a      	bne.n	8006a88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d105      	bne.n	8006a7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	621a      	str	r2, [r3, #32]
 8006a7a:	e00e      	b.n	8006a9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]
 8006a86:	e008      	b.n	8006a9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6211      	str	r1, [r2, #32]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10f      	bne.n	8006ace <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e000      	b.n	8006ad4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ad2:	2302      	movs	r3, #2
  }
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fa fcc9 	bl	8001498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b22      	cmp	r3, #34	; 0x22
 8006b22:	d171      	bne.n	8006c08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d123      	bne.n	8006b76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10e      	bne.n	8006b5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	1c9a      	adds	r2, r3, #2
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28
 8006b58:	e029      	b.n	8006bae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
 8006b74:	e01b      	b.n	8006bae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6858      	ldr	r0, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6291      	str	r1, [r2, #40]	; 0x28
 8006b8e:	b2c2      	uxtb	r2, r0
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e00c      	b.n	8006bae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	1c58      	adds	r0, r3, #1
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	6288      	str	r0, [r1, #40]	; 0x28
 8006ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d120      	bne.n	8006c04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0220 	bic.w	r2, r2, #32
 8006bd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695a      	ldr	r2, [r3, #20]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fa fb9c 	bl	8001338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e002      	b.n	8006c0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c56:	f023 030c 	bic.w	r3, r3, #12
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	430b      	orrs	r3, r1
 8006c62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c82:	f040 818b 	bne.w	8006f9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4ac1      	ldr	r2, [pc, #772]	; (8006f90 <UART_SetConfig+0x37c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d005      	beq.n	8006c9c <UART_SetConfig+0x88>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4abf      	ldr	r2, [pc, #764]	; (8006f94 <UART_SetConfig+0x380>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	f040 80bd 	bne.w	8006e16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fe f992 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	461d      	mov	r5, r3
 8006ca6:	f04f 0600 	mov.w	r6, #0
 8006caa:	46a8      	mov	r8, r5
 8006cac:	46b1      	mov	r9, r6
 8006cae:	eb18 0308 	adds.w	r3, r8, r8
 8006cb2:	eb49 0409 	adc.w	r4, r9, r9
 8006cb6:	4698      	mov	r8, r3
 8006cb8:	46a1      	mov	r9, r4
 8006cba:	eb18 0805 	adds.w	r8, r8, r5
 8006cbe:	eb49 0906 	adc.w	r9, r9, r6
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cd6:	4688      	mov	r8, r1
 8006cd8:	4691      	mov	r9, r2
 8006cda:	eb18 0005 	adds.w	r0, r8, r5
 8006cde:	eb49 0106 	adc.w	r1, r9, r6
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	f04f 0600 	mov.w	r6, #0
 8006cec:	196b      	adds	r3, r5, r5
 8006cee:	eb46 0406 	adc.w	r4, r6, r6
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	f7f9 ff03 	bl	8000b00 <__aeabi_uldivmod>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4ba5      	ldr	r3, [pc, #660]	; (8006f98 <UART_SetConfig+0x384>)
 8006d02:	fba3 2302 	umull	r2, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	461d      	mov	r5, r3
 8006d10:	f04f 0600 	mov.w	r6, #0
 8006d14:	46a9      	mov	r9, r5
 8006d16:	46b2      	mov	sl, r6
 8006d18:	eb19 0309 	adds.w	r3, r9, r9
 8006d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8006d20:	4699      	mov	r9, r3
 8006d22:	46a2      	mov	sl, r4
 8006d24:	eb19 0905 	adds.w	r9, r9, r5
 8006d28:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d40:	4689      	mov	r9, r1
 8006d42:	4692      	mov	sl, r2
 8006d44:	eb19 0005 	adds.w	r0, r9, r5
 8006d48:	eb4a 0106 	adc.w	r1, sl, r6
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	461d      	mov	r5, r3
 8006d52:	f04f 0600 	mov.w	r6, #0
 8006d56:	196b      	adds	r3, r5, r5
 8006d58:	eb46 0406 	adc.w	r4, r6, r6
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4623      	mov	r3, r4
 8006d60:	f7f9 fece 	bl	8000b00 <__aeabi_uldivmod>
 8006d64:	4603      	mov	r3, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b8b      	ldr	r3, [pc, #556]	; (8006f98 <UART_SetConfig+0x384>)
 8006d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	2164      	movs	r1, #100	; 0x64
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	3332      	adds	r3, #50	; 0x32
 8006d7e:	4a86      	ldr	r2, [pc, #536]	; (8006f98 <UART_SetConfig+0x384>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d8c:	4498      	add	r8, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	461d      	mov	r5, r3
 8006d92:	f04f 0600 	mov.w	r6, #0
 8006d96:	46a9      	mov	r9, r5
 8006d98:	46b2      	mov	sl, r6
 8006d9a:	eb19 0309 	adds.w	r3, r9, r9
 8006d9e:	eb4a 040a 	adc.w	r4, sl, sl
 8006da2:	4699      	mov	r9, r3
 8006da4:	46a2      	mov	sl, r4
 8006da6:	eb19 0905 	adds.w	r9, r9, r5
 8006daa:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dc2:	4689      	mov	r9, r1
 8006dc4:	4692      	mov	sl, r2
 8006dc6:	eb19 0005 	adds.w	r0, r9, r5
 8006dca:	eb4a 0106 	adc.w	r1, sl, r6
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	f04f 0600 	mov.w	r6, #0
 8006dd8:	196b      	adds	r3, r5, r5
 8006dda:	eb46 0406 	adc.w	r4, r6, r6
 8006dde:	461a      	mov	r2, r3
 8006de0:	4623      	mov	r3, r4
 8006de2:	f7f9 fe8d 	bl	8000b00 <__aeabi_uldivmod>
 8006de6:	4603      	mov	r3, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	461a      	mov	r2, r3
 8006dec:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <UART_SetConfig+0x384>)
 8006dee:	fba3 1302 	umull	r1, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	3332      	adds	r3, #50	; 0x32
 8006e00:	4a65      	ldr	r2, [pc, #404]	; (8006f98 <UART_SetConfig+0x384>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f003 0207 	and.w	r2, r3, #7
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4442      	add	r2, r8
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	e26f      	b.n	80072f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e16:	f7fe f8c1 	bl	8004f9c <HAL_RCC_GetPCLK1Freq>
 8006e1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	461d      	mov	r5, r3
 8006e20:	f04f 0600 	mov.w	r6, #0
 8006e24:	46a8      	mov	r8, r5
 8006e26:	46b1      	mov	r9, r6
 8006e28:	eb18 0308 	adds.w	r3, r8, r8
 8006e2c:	eb49 0409 	adc.w	r4, r9, r9
 8006e30:	4698      	mov	r8, r3
 8006e32:	46a1      	mov	r9, r4
 8006e34:	eb18 0805 	adds.w	r8, r8, r5
 8006e38:	eb49 0906 	adc.w	r9, r9, r6
 8006e3c:	f04f 0100 	mov.w	r1, #0
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e50:	4688      	mov	r8, r1
 8006e52:	4691      	mov	r9, r2
 8006e54:	eb18 0005 	adds.w	r0, r8, r5
 8006e58:	eb49 0106 	adc.w	r1, r9, r6
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	461d      	mov	r5, r3
 8006e62:	f04f 0600 	mov.w	r6, #0
 8006e66:	196b      	adds	r3, r5, r5
 8006e68:	eb46 0406 	adc.w	r4, r6, r6
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4623      	mov	r3, r4
 8006e70:	f7f9 fe46 	bl	8000b00 <__aeabi_uldivmod>
 8006e74:	4603      	mov	r3, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4b47      	ldr	r3, [pc, #284]	; (8006f98 <UART_SetConfig+0x384>)
 8006e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	461d      	mov	r5, r3
 8006e8a:	f04f 0600 	mov.w	r6, #0
 8006e8e:	46a9      	mov	r9, r5
 8006e90:	46b2      	mov	sl, r6
 8006e92:	eb19 0309 	adds.w	r3, r9, r9
 8006e96:	eb4a 040a 	adc.w	r4, sl, sl
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	46a2      	mov	sl, r4
 8006e9e:	eb19 0905 	adds.w	r9, r9, r5
 8006ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eba:	4689      	mov	r9, r1
 8006ebc:	4692      	mov	sl, r2
 8006ebe:	eb19 0005 	adds.w	r0, r9, r5
 8006ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	461d      	mov	r5, r3
 8006ecc:	f04f 0600 	mov.w	r6, #0
 8006ed0:	196b      	adds	r3, r5, r5
 8006ed2:	eb46 0406 	adc.w	r4, r6, r6
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4623      	mov	r3, r4
 8006eda:	f7f9 fe11 	bl	8000b00 <__aeabi_uldivmod>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <UART_SetConfig+0x384>)
 8006ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	2164      	movs	r1, #100	; 0x64
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	3332      	adds	r3, #50	; 0x32
 8006ef8:	4a27      	ldr	r2, [pc, #156]	; (8006f98 <UART_SetConfig+0x384>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f06:	4498      	add	r8, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	f04f 0600 	mov.w	r6, #0
 8006f10:	46a9      	mov	r9, r5
 8006f12:	46b2      	mov	sl, r6
 8006f14:	eb19 0309 	adds.w	r3, r9, r9
 8006f18:	eb4a 040a 	adc.w	r4, sl, sl
 8006f1c:	4699      	mov	r9, r3
 8006f1e:	46a2      	mov	sl, r4
 8006f20:	eb19 0905 	adds.w	r9, r9, r5
 8006f24:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f28:	f04f 0100 	mov.w	r1, #0
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f3c:	4689      	mov	r9, r1
 8006f3e:	4692      	mov	sl, r2
 8006f40:	eb19 0005 	adds.w	r0, r9, r5
 8006f44:	eb4a 0106 	adc.w	r1, sl, r6
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	461d      	mov	r5, r3
 8006f4e:	f04f 0600 	mov.w	r6, #0
 8006f52:	196b      	adds	r3, r5, r5
 8006f54:	eb46 0406 	adc.w	r4, r6, r6
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	f7f9 fdd0 	bl	8000b00 <__aeabi_uldivmod>
 8006f60:	4603      	mov	r3, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <UART_SetConfig+0x384>)
 8006f68:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	2164      	movs	r1, #100	; 0x64
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	3332      	adds	r3, #50	; 0x32
 8006f7a:	4a07      	ldr	r2, [pc, #28]	; (8006f98 <UART_SetConfig+0x384>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f003 0207 	and.w	r2, r3, #7
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4442      	add	r2, r8
 8006f8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f8e:	e1b2      	b.n	80072f6 <UART_SetConfig+0x6e2>
 8006f90:	40011000 	.word	0x40011000
 8006f94:	40011400 	.word	0x40011400
 8006f98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4ad7      	ldr	r2, [pc, #860]	; (8007300 <UART_SetConfig+0x6ec>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d005      	beq.n	8006fb2 <UART_SetConfig+0x39e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4ad6      	ldr	r2, [pc, #856]	; (8007304 <UART_SetConfig+0x6f0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	f040 80d1 	bne.w	8007154 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fb2:	f7fe f807 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 8006fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	469a      	mov	sl, r3
 8006fbc:	f04f 0b00 	mov.w	fp, #0
 8006fc0:	46d0      	mov	r8, sl
 8006fc2:	46d9      	mov	r9, fp
 8006fc4:	eb18 0308 	adds.w	r3, r8, r8
 8006fc8:	eb49 0409 	adc.w	r4, r9, r9
 8006fcc:	4698      	mov	r8, r3
 8006fce:	46a1      	mov	r9, r4
 8006fd0:	eb18 080a 	adds.w	r8, r8, sl
 8006fd4:	eb49 090b 	adc.w	r9, r9, fp
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fec:	4688      	mov	r8, r1
 8006fee:	4691      	mov	r9, r2
 8006ff0:	eb1a 0508 	adds.w	r5, sl, r8
 8006ff4:	eb4b 0609 	adc.w	r6, fp, r9
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	0094      	lsls	r4, r2, #2
 800700c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007010:	008b      	lsls	r3, r1, #2
 8007012:	461a      	mov	r2, r3
 8007014:	4623      	mov	r3, r4
 8007016:	4628      	mov	r0, r5
 8007018:	4631      	mov	r1, r6
 800701a:	f7f9 fd71 	bl	8000b00 <__aeabi_uldivmod>
 800701e:	4603      	mov	r3, r0
 8007020:	460c      	mov	r4, r1
 8007022:	461a      	mov	r2, r3
 8007024:	4bb8      	ldr	r3, [pc, #736]	; (8007308 <UART_SetConfig+0x6f4>)
 8007026:	fba3 2302 	umull	r2, r3, r3, r2
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	469b      	mov	fp, r3
 8007034:	f04f 0c00 	mov.w	ip, #0
 8007038:	46d9      	mov	r9, fp
 800703a:	46e2      	mov	sl, ip
 800703c:	eb19 0309 	adds.w	r3, r9, r9
 8007040:	eb4a 040a 	adc.w	r4, sl, sl
 8007044:	4699      	mov	r9, r3
 8007046:	46a2      	mov	sl, r4
 8007048:	eb19 090b 	adds.w	r9, r9, fp
 800704c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800705c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007064:	4689      	mov	r9, r1
 8007066:	4692      	mov	sl, r2
 8007068:	eb1b 0509 	adds.w	r5, fp, r9
 800706c:	eb4c 060a 	adc.w	r6, ip, sl
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	f04f 0400 	mov.w	r4, #0
 8007082:	0094      	lsls	r4, r2, #2
 8007084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007088:	008b      	lsls	r3, r1, #2
 800708a:	461a      	mov	r2, r3
 800708c:	4623      	mov	r3, r4
 800708e:	4628      	mov	r0, r5
 8007090:	4631      	mov	r1, r6
 8007092:	f7f9 fd35 	bl	8000b00 <__aeabi_uldivmod>
 8007096:	4603      	mov	r3, r0
 8007098:	460c      	mov	r4, r1
 800709a:	461a      	mov	r2, r3
 800709c:	4b9a      	ldr	r3, [pc, #616]	; (8007308 <UART_SetConfig+0x6f4>)
 800709e:	fba3 1302 	umull	r1, r3, r3, r2
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	2164      	movs	r1, #100	; 0x64
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	3332      	adds	r3, #50	; 0x32
 80070b0:	4a95      	ldr	r2, [pc, #596]	; (8007308 <UART_SetConfig+0x6f4>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070bc:	4498      	add	r8, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	469b      	mov	fp, r3
 80070c2:	f04f 0c00 	mov.w	ip, #0
 80070c6:	46d9      	mov	r9, fp
 80070c8:	46e2      	mov	sl, ip
 80070ca:	eb19 0309 	adds.w	r3, r9, r9
 80070ce:	eb4a 040a 	adc.w	r4, sl, sl
 80070d2:	4699      	mov	r9, r3
 80070d4:	46a2      	mov	sl, r4
 80070d6:	eb19 090b 	adds.w	r9, r9, fp
 80070da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070f2:	4689      	mov	r9, r1
 80070f4:	4692      	mov	sl, r2
 80070f6:	eb1b 0509 	adds.w	r5, fp, r9
 80070fa:	eb4c 060a 	adc.w	r6, ip, sl
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	0094      	lsls	r4, r2, #2
 8007112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007116:	008b      	lsls	r3, r1, #2
 8007118:	461a      	mov	r2, r3
 800711a:	4623      	mov	r3, r4
 800711c:	4628      	mov	r0, r5
 800711e:	4631      	mov	r1, r6
 8007120:	f7f9 fcee 	bl	8000b00 <__aeabi_uldivmod>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	461a      	mov	r2, r3
 800712a:	4b77      	ldr	r3, [pc, #476]	; (8007308 <UART_SetConfig+0x6f4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	; 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	3332      	adds	r3, #50	; 0x32
 800713e:	4a72      	ldr	r2, [pc, #456]	; (8007308 <UART_SetConfig+0x6f4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4442      	add	r2, r8
 8007150:	609a      	str	r2, [r3, #8]
 8007152:	e0d0      	b.n	80072f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007154:	f7fd ff22 	bl	8004f9c <HAL_RCC_GetPCLK1Freq>
 8007158:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	469a      	mov	sl, r3
 800715e:	f04f 0b00 	mov.w	fp, #0
 8007162:	46d0      	mov	r8, sl
 8007164:	46d9      	mov	r9, fp
 8007166:	eb18 0308 	adds.w	r3, r8, r8
 800716a:	eb49 0409 	adc.w	r4, r9, r9
 800716e:	4698      	mov	r8, r3
 8007170:	46a1      	mov	r9, r4
 8007172:	eb18 080a 	adds.w	r8, r8, sl
 8007176:	eb49 090b 	adc.w	r9, r9, fp
 800717a:	f04f 0100 	mov.w	r1, #0
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007186:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800718a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800718e:	4688      	mov	r8, r1
 8007190:	4691      	mov	r9, r2
 8007192:	eb1a 0508 	adds.w	r5, sl, r8
 8007196:	eb4b 0609 	adc.w	r6, fp, r9
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4619      	mov	r1, r3
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	0094      	lsls	r4, r2, #2
 80071ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071b2:	008b      	lsls	r3, r1, #2
 80071b4:	461a      	mov	r2, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	4628      	mov	r0, r5
 80071ba:	4631      	mov	r1, r6
 80071bc:	f7f9 fca0 	bl	8000b00 <__aeabi_uldivmod>
 80071c0:	4603      	mov	r3, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b50      	ldr	r3, [pc, #320]	; (8007308 <UART_SetConfig+0x6f4>)
 80071c8:	fba3 2302 	umull	r2, r3, r3, r2
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	469b      	mov	fp, r3
 80071d6:	f04f 0c00 	mov.w	ip, #0
 80071da:	46d9      	mov	r9, fp
 80071dc:	46e2      	mov	sl, ip
 80071de:	eb19 0309 	adds.w	r3, r9, r9
 80071e2:	eb4a 040a 	adc.w	r4, sl, sl
 80071e6:	4699      	mov	r9, r3
 80071e8:	46a2      	mov	sl, r4
 80071ea:	eb19 090b 	adds.w	r9, r9, fp
 80071ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007206:	4689      	mov	r9, r1
 8007208:	4692      	mov	sl, r2
 800720a:	eb1b 0509 	adds.w	r5, fp, r9
 800720e:	eb4c 060a 	adc.w	r6, ip, sl
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	f04f 0400 	mov.w	r4, #0
 8007224:	0094      	lsls	r4, r2, #2
 8007226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800722a:	008b      	lsls	r3, r1, #2
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	4628      	mov	r0, r5
 8007232:	4631      	mov	r1, r6
 8007234:	f7f9 fc64 	bl	8000b00 <__aeabi_uldivmod>
 8007238:	4603      	mov	r3, r0
 800723a:	460c      	mov	r4, r1
 800723c:	461a      	mov	r2, r3
 800723e:	4b32      	ldr	r3, [pc, #200]	; (8007308 <UART_SetConfig+0x6f4>)
 8007240:	fba3 1302 	umull	r1, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	2164      	movs	r1, #100	; 0x64
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	3332      	adds	r3, #50	; 0x32
 8007252:	4a2d      	ldr	r2, [pc, #180]	; (8007308 <UART_SetConfig+0x6f4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725e:	4498      	add	r8, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	469b      	mov	fp, r3
 8007264:	f04f 0c00 	mov.w	ip, #0
 8007268:	46d9      	mov	r9, fp
 800726a:	46e2      	mov	sl, ip
 800726c:	eb19 0309 	adds.w	r3, r9, r9
 8007270:	eb4a 040a 	adc.w	r4, sl, sl
 8007274:	4699      	mov	r9, r3
 8007276:	46a2      	mov	sl, r4
 8007278:	eb19 090b 	adds.w	r9, r9, fp
 800727c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800728c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007290:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007294:	4689      	mov	r9, r1
 8007296:	4692      	mov	sl, r2
 8007298:	eb1b 0509 	adds.w	r5, fp, r9
 800729c:	eb4c 060a 	adc.w	r6, ip, sl
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	4619      	mov	r1, r3
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	0094      	lsls	r4, r2, #2
 80072b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072b8:	008b      	lsls	r3, r1, #2
 80072ba:	461a      	mov	r2, r3
 80072bc:	4623      	mov	r3, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	4631      	mov	r1, r6
 80072c2:	f7f9 fc1d 	bl	8000b00 <__aeabi_uldivmod>
 80072c6:	4603      	mov	r3, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	461a      	mov	r2, r3
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <UART_SetConfig+0x6f4>)
 80072ce:	fba3 1302 	umull	r1, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	2164      	movs	r1, #100	; 0x64
 80072d6:	fb01 f303 	mul.w	r3, r1, r3
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	3332      	adds	r3, #50	; 0x32
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <UART_SetConfig+0x6f4>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4442      	add	r2, r8
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	e7ff      	b.n	80072f6 <UART_SetConfig+0x6e2>
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	40011000 	.word	0x40011000
 8007304:	40011400 	.word	0x40011400
 8007308:	51eb851f 	.word	0x51eb851f

0800730c <__errno>:
 800730c:	4b01      	ldr	r3, [pc, #4]	; (8007314 <__errno+0x8>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000000c 	.word	0x2000000c

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4e0d      	ldr	r6, [pc, #52]	; (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	; (8007354 <__libc_init_array+0x3c>)
 800731e:	1ba4      	subs	r4, r4, r6
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2500      	movs	r5, #0
 8007324:	42a5      	cmp	r5, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4e0b      	ldr	r6, [pc, #44]	; (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <__libc_init_array+0x44>)
 800732c:	f001 fd46 	bl	8008dbc <_init>
 8007330:	1ba4      	subs	r4, r4, r6
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2500      	movs	r5, #0
 8007336:	42a5      	cmp	r5, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007340:	4798      	blx	r3
 8007342:	3501      	adds	r5, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800734a:	4798      	blx	r3
 800734c:	3501      	adds	r5, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	08009028 	.word	0x08009028
 8007354:	08009028 	.word	0x08009028
 8007358:	08009028 	.word	0x08009028
 800735c:	0800902c 	.word	0x0800902c

08007360 <memset>:
 8007360:	4402      	add	r2, r0
 8007362:	4603      	mov	r3, r0
 8007364:	4293      	cmp	r3, r2
 8007366:	d100      	bne.n	800736a <memset+0xa>
 8007368:	4770      	bx	lr
 800736a:	f803 1b01 	strb.w	r1, [r3], #1
 800736e:	e7f9      	b.n	8007364 <memset+0x4>

08007370 <__cvt>:
 8007370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	ec55 4b10 	vmov	r4, r5, d0
 8007378:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800737a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800737e:	2d00      	cmp	r5, #0
 8007380:	460e      	mov	r6, r1
 8007382:	4691      	mov	r9, r2
 8007384:	4619      	mov	r1, r3
 8007386:	bfb8      	it	lt
 8007388:	4622      	movlt	r2, r4
 800738a:	462b      	mov	r3, r5
 800738c:	f027 0720 	bic.w	r7, r7, #32
 8007390:	bfbb      	ittet	lt
 8007392:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007396:	461d      	movlt	r5, r3
 8007398:	2300      	movge	r3, #0
 800739a:	232d      	movlt	r3, #45	; 0x2d
 800739c:	bfb8      	it	lt
 800739e:	4614      	movlt	r4, r2
 80073a0:	2f46      	cmp	r7, #70	; 0x46
 80073a2:	700b      	strb	r3, [r1, #0]
 80073a4:	d004      	beq.n	80073b0 <__cvt+0x40>
 80073a6:	2f45      	cmp	r7, #69	; 0x45
 80073a8:	d100      	bne.n	80073ac <__cvt+0x3c>
 80073aa:	3601      	adds	r6, #1
 80073ac:	2102      	movs	r1, #2
 80073ae:	e000      	b.n	80073b2 <__cvt+0x42>
 80073b0:	2103      	movs	r1, #3
 80073b2:	ab03      	add	r3, sp, #12
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	ab02      	add	r3, sp, #8
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4632      	mov	r2, r6
 80073bc:	4653      	mov	r3, sl
 80073be:	ec45 4b10 	vmov	d0, r4, r5
 80073c2:	f000 fbad 	bl	8007b20 <_dtoa_r>
 80073c6:	2f47      	cmp	r7, #71	; 0x47
 80073c8:	4680      	mov	r8, r0
 80073ca:	d102      	bne.n	80073d2 <__cvt+0x62>
 80073cc:	f019 0f01 	tst.w	r9, #1
 80073d0:	d026      	beq.n	8007420 <__cvt+0xb0>
 80073d2:	2f46      	cmp	r7, #70	; 0x46
 80073d4:	eb08 0906 	add.w	r9, r8, r6
 80073d8:	d111      	bne.n	80073fe <__cvt+0x8e>
 80073da:	f898 3000 	ldrb.w	r3, [r8]
 80073de:	2b30      	cmp	r3, #48	; 0x30
 80073e0:	d10a      	bne.n	80073f8 <__cvt+0x88>
 80073e2:	2200      	movs	r2, #0
 80073e4:	2300      	movs	r3, #0
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f9 fb19 	bl	8000a20 <__aeabi_dcmpeq>
 80073ee:	b918      	cbnz	r0, 80073f8 <__cvt+0x88>
 80073f0:	f1c6 0601 	rsb	r6, r6, #1
 80073f4:	f8ca 6000 	str.w	r6, [sl]
 80073f8:	f8da 3000 	ldr.w	r3, [sl]
 80073fc:	4499      	add	r9, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f9 fb0b 	bl	8000a20 <__aeabi_dcmpeq>
 800740a:	b938      	cbnz	r0, 800741c <__cvt+0xac>
 800740c:	2230      	movs	r2, #48	; 0x30
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	454b      	cmp	r3, r9
 8007412:	d205      	bcs.n	8007420 <__cvt+0xb0>
 8007414:	1c59      	adds	r1, r3, #1
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e7f8      	b.n	800740e <__cvt+0x9e>
 800741c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007424:	eba3 0308 	sub.w	r3, r3, r8
 8007428:	4640      	mov	r0, r8
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	b004      	add	sp, #16
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007432 <__exponent>:
 8007432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007434:	2900      	cmp	r1, #0
 8007436:	4604      	mov	r4, r0
 8007438:	bfba      	itte	lt
 800743a:	4249      	neglt	r1, r1
 800743c:	232d      	movlt	r3, #45	; 0x2d
 800743e:	232b      	movge	r3, #43	; 0x2b
 8007440:	2909      	cmp	r1, #9
 8007442:	f804 2b02 	strb.w	r2, [r4], #2
 8007446:	7043      	strb	r3, [r0, #1]
 8007448:	dd20      	ble.n	800748c <__exponent+0x5a>
 800744a:	f10d 0307 	add.w	r3, sp, #7
 800744e:	461f      	mov	r7, r3
 8007450:	260a      	movs	r6, #10
 8007452:	fb91 f5f6 	sdiv	r5, r1, r6
 8007456:	fb06 1115 	mls	r1, r6, r5, r1
 800745a:	3130      	adds	r1, #48	; 0x30
 800745c:	2d09      	cmp	r5, #9
 800745e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007462:	f103 32ff 	add.w	r2, r3, #4294967295
 8007466:	4629      	mov	r1, r5
 8007468:	dc09      	bgt.n	800747e <__exponent+0x4c>
 800746a:	3130      	adds	r1, #48	; 0x30
 800746c:	3b02      	subs	r3, #2
 800746e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007472:	42bb      	cmp	r3, r7
 8007474:	4622      	mov	r2, r4
 8007476:	d304      	bcc.n	8007482 <__exponent+0x50>
 8007478:	1a10      	subs	r0, r2, r0
 800747a:	b003      	add	sp, #12
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	4613      	mov	r3, r2
 8007480:	e7e7      	b.n	8007452 <__exponent+0x20>
 8007482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007486:	f804 2b01 	strb.w	r2, [r4], #1
 800748a:	e7f2      	b.n	8007472 <__exponent+0x40>
 800748c:	2330      	movs	r3, #48	; 0x30
 800748e:	4419      	add	r1, r3
 8007490:	7083      	strb	r3, [r0, #2]
 8007492:	1d02      	adds	r2, r0, #4
 8007494:	70c1      	strb	r1, [r0, #3]
 8007496:	e7ef      	b.n	8007478 <__exponent+0x46>

08007498 <_printf_float>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	b08d      	sub	sp, #52	; 0x34
 800749e:	460c      	mov	r4, r1
 80074a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074a4:	4616      	mov	r6, r2
 80074a6:	461f      	mov	r7, r3
 80074a8:	4605      	mov	r5, r0
 80074aa:	f001 f8f1 	bl	8008690 <_localeconv_r>
 80074ae:	6803      	ldr	r3, [r0, #0]
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7f8 fe88 	bl	80001c8 <strlen>
 80074b8:	2300      	movs	r3, #0
 80074ba:	930a      	str	r3, [sp, #40]	; 0x28
 80074bc:	f8d8 3000 	ldr.w	r3, [r8]
 80074c0:	9005      	str	r0, [sp, #20]
 80074c2:	3307      	adds	r3, #7
 80074c4:	f023 0307 	bic.w	r3, r3, #7
 80074c8:	f103 0208 	add.w	r2, r3, #8
 80074cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074d0:	f8d4 b000 	ldr.w	fp, [r4]
 80074d4:	f8c8 2000 	str.w	r2, [r8]
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	4ba7      	ldr	r3, [pc, #668]	; (8007790 <_printf_float+0x2f8>)
 80074f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f8:	f7f9 fac4 	bl	8000a84 <__aeabi_dcmpun>
 80074fc:	bb70      	cbnz	r0, 800755c <_printf_float+0xc4>
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	4ba3      	ldr	r3, [pc, #652]	; (8007790 <_printf_float+0x2f8>)
 8007504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007508:	f7f9 fa9e 	bl	8000a48 <__aeabi_dcmple>
 800750c:	bb30      	cbnz	r0, 800755c <_printf_float+0xc4>
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f9 fa8d 	bl	8000a34 <__aeabi_dcmplt>
 800751a:	b110      	cbz	r0, 8007522 <_printf_float+0x8a>
 800751c:	232d      	movs	r3, #45	; 0x2d
 800751e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007522:	4a9c      	ldr	r2, [pc, #624]	; (8007794 <_printf_float+0x2fc>)
 8007524:	4b9c      	ldr	r3, [pc, #624]	; (8007798 <_printf_float+0x300>)
 8007526:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800752a:	bf8c      	ite	hi
 800752c:	4690      	movhi	r8, r2
 800752e:	4698      	movls	r8, r3
 8007530:	2303      	movs	r3, #3
 8007532:	f02b 0204 	bic.w	r2, fp, #4
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	f04f 0900 	mov.w	r9, #0
 800753e:	9700      	str	r7, [sp, #0]
 8007540:	4633      	mov	r3, r6
 8007542:	aa0b      	add	r2, sp, #44	; 0x2c
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f9e6 	bl	8007918 <_printf_common>
 800754c:	3001      	adds	r0, #1
 800754e:	f040 808d 	bne.w	800766c <_printf_float+0x1d4>
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	b00d      	add	sp, #52	; 0x34
 8007558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f9 fa8e 	bl	8000a84 <__aeabi_dcmpun>
 8007568:	b110      	cbz	r0, 8007570 <_printf_float+0xd8>
 800756a:	4a8c      	ldr	r2, [pc, #560]	; (800779c <_printf_float+0x304>)
 800756c:	4b8c      	ldr	r3, [pc, #560]	; (80077a0 <_printf_float+0x308>)
 800756e:	e7da      	b.n	8007526 <_printf_float+0x8e>
 8007570:	6861      	ldr	r1, [r4, #4]
 8007572:	1c4b      	adds	r3, r1, #1
 8007574:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007578:	a80a      	add	r0, sp, #40	; 0x28
 800757a:	d13e      	bne.n	80075fa <_printf_float+0x162>
 800757c:	2306      	movs	r3, #6
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	2300      	movs	r3, #0
 8007582:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007586:	ab09      	add	r3, sp, #36	; 0x24
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	ec49 8b10 	vmov	d0, r8, r9
 800758e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	f8cd a004 	str.w	sl, [sp, #4]
 8007598:	6861      	ldr	r1, [r4, #4]
 800759a:	4628      	mov	r0, r5
 800759c:	f7ff fee8 	bl	8007370 <__cvt>
 80075a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075a4:	2b47      	cmp	r3, #71	; 0x47
 80075a6:	4680      	mov	r8, r0
 80075a8:	d109      	bne.n	80075be <_printf_float+0x126>
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	1cd8      	adds	r0, r3, #3
 80075ae:	db02      	blt.n	80075b6 <_printf_float+0x11e>
 80075b0:	6862      	ldr	r2, [r4, #4]
 80075b2:	4293      	cmp	r3, r2
 80075b4:	dd47      	ble.n	8007646 <_printf_float+0x1ae>
 80075b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80075ba:	fa5f fa8a 	uxtb.w	sl, sl
 80075be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075c4:	d824      	bhi.n	8007610 <_printf_float+0x178>
 80075c6:	3901      	subs	r1, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075ce:	9109      	str	r1, [sp, #36]	; 0x24
 80075d0:	f7ff ff2f 	bl	8007432 <__exponent>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	1813      	adds	r3, r2, r0
 80075d8:	2a01      	cmp	r2, #1
 80075da:	4681      	mov	r9, r0
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	dc02      	bgt.n	80075e6 <_printf_float+0x14e>
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	07d1      	lsls	r1, r2, #31
 80075e4:	d501      	bpl.n	80075ea <_printf_float+0x152>
 80075e6:	3301      	adds	r3, #1
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0a5      	beq.n	800753e <_printf_float+0xa6>
 80075f2:	232d      	movs	r3, #45	; 0x2d
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f8:	e7a1      	b.n	800753e <_printf_float+0xa6>
 80075fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80075fe:	f000 8177 	beq.w	80078f0 <_printf_float+0x458>
 8007602:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007606:	d1bb      	bne.n	8007580 <_printf_float+0xe8>
 8007608:	2900      	cmp	r1, #0
 800760a:	d1b9      	bne.n	8007580 <_printf_float+0xe8>
 800760c:	2301      	movs	r3, #1
 800760e:	e7b6      	b.n	800757e <_printf_float+0xe6>
 8007610:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007614:	d119      	bne.n	800764a <_printf_float+0x1b2>
 8007616:	2900      	cmp	r1, #0
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	dd0c      	ble.n	8007636 <_printf_float+0x19e>
 800761c:	6121      	str	r1, [r4, #16]
 800761e:	b913      	cbnz	r3, 8007626 <_printf_float+0x18e>
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	07d2      	lsls	r2, r2, #31
 8007624:	d502      	bpl.n	800762c <_printf_float+0x194>
 8007626:	3301      	adds	r3, #1
 8007628:	440b      	add	r3, r1
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007630:	f04f 0900 	mov.w	r9, #0
 8007634:	e7d9      	b.n	80075ea <_printf_float+0x152>
 8007636:	b913      	cbnz	r3, 800763e <_printf_float+0x1a6>
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	07d0      	lsls	r0, r2, #31
 800763c:	d501      	bpl.n	8007642 <_printf_float+0x1aa>
 800763e:	3302      	adds	r3, #2
 8007640:	e7f3      	b.n	800762a <_printf_float+0x192>
 8007642:	2301      	movs	r3, #1
 8007644:	e7f1      	b.n	800762a <_printf_float+0x192>
 8007646:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800764a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800764e:	4293      	cmp	r3, r2
 8007650:	db05      	blt.n	800765e <_printf_float+0x1c6>
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	07d1      	lsls	r1, r2, #31
 8007658:	d5e8      	bpl.n	800762c <_printf_float+0x194>
 800765a:	3301      	adds	r3, #1
 800765c:	e7e5      	b.n	800762a <_printf_float+0x192>
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfd4      	ite	le
 8007662:	f1c3 0302 	rsble	r3, r3, #2
 8007666:	2301      	movgt	r3, #1
 8007668:	4413      	add	r3, r2
 800766a:	e7de      	b.n	800762a <_printf_float+0x192>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	055a      	lsls	r2, r3, #21
 8007670:	d407      	bmi.n	8007682 <_printf_float+0x1ea>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	4642      	mov	r2, r8
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	d12b      	bne.n	80076d8 <_printf_float+0x240>
 8007680:	e767      	b.n	8007552 <_printf_float+0xba>
 8007682:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007686:	f240 80dc 	bls.w	8007842 <_printf_float+0x3aa>
 800768a:	2200      	movs	r2, #0
 800768c:	2300      	movs	r3, #0
 800768e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007692:	f7f9 f9c5 	bl	8000a20 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	d033      	beq.n	8007702 <_printf_float+0x26a>
 800769a:	2301      	movs	r3, #1
 800769c:	4a41      	ldr	r2, [pc, #260]	; (80077a4 <_printf_float+0x30c>)
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f af54 	beq.w	8007552 <_printf_float+0xba>
 80076aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ae:	429a      	cmp	r2, r3
 80076b0:	db02      	blt.n	80076b8 <_printf_float+0x220>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07d8      	lsls	r0, r3, #31
 80076b6:	d50f      	bpl.n	80076d8 <_printf_float+0x240>
 80076b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af45 	beq.w	8007552 <_printf_float+0xba>
 80076c8:	f04f 0800 	mov.w	r8, #0
 80076cc:	f104 091a 	add.w	r9, r4, #26
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4543      	cmp	r3, r8
 80076d6:	dc09      	bgt.n	80076ec <_printf_float+0x254>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	079b      	lsls	r3, r3, #30
 80076dc:	f100 8103 	bmi.w	80078e6 <_printf_float+0x44e>
 80076e0:	68e0      	ldr	r0, [r4, #12]
 80076e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e4:	4298      	cmp	r0, r3
 80076e6:	bfb8      	it	lt
 80076e8:	4618      	movlt	r0, r3
 80076ea:	e734      	b.n	8007556 <_printf_float+0xbe>
 80076ec:	2301      	movs	r3, #1
 80076ee:	464a      	mov	r2, r9
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f af2b 	beq.w	8007552 <_printf_float+0xba>
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	e7e6      	b.n	80076d0 <_printf_float+0x238>
 8007702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc2b      	bgt.n	8007760 <_printf_float+0x2c8>
 8007708:	2301      	movs	r3, #1
 800770a:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <_printf_float+0x30c>)
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af1d 	beq.w	8007552 <_printf_float+0xba>
 8007718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771a:	b923      	cbnz	r3, 8007726 <_printf_float+0x28e>
 800771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771e:	b913      	cbnz	r3, 8007726 <_printf_float+0x28e>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	07d9      	lsls	r1, r3, #31
 8007724:	d5d8      	bpl.n	80076d8 <_printf_float+0x240>
 8007726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	f43f af0e 	beq.w	8007552 <_printf_float+0xba>
 8007736:	f04f 0900 	mov.w	r9, #0
 800773a:	f104 0a1a 	add.w	sl, r4, #26
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	425b      	negs	r3, r3
 8007742:	454b      	cmp	r3, r9
 8007744:	dc01      	bgt.n	800774a <_printf_float+0x2b2>
 8007746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007748:	e794      	b.n	8007674 <_printf_float+0x1dc>
 800774a:	2301      	movs	r3, #1
 800774c:	4652      	mov	r2, sl
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	f43f aefc 	beq.w	8007552 <_printf_float+0xba>
 800775a:	f109 0901 	add.w	r9, r9, #1
 800775e:	e7ee      	b.n	800773e <_printf_float+0x2a6>
 8007760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007764:	429a      	cmp	r2, r3
 8007766:	bfa8      	it	ge
 8007768:	461a      	movge	r2, r3
 800776a:	2a00      	cmp	r2, #0
 800776c:	4691      	mov	r9, r2
 800776e:	dd07      	ble.n	8007780 <_printf_float+0x2e8>
 8007770:	4613      	mov	r3, r2
 8007772:	4631      	mov	r1, r6
 8007774:	4642      	mov	r2, r8
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f aee9 	beq.w	8007552 <_printf_float+0xba>
 8007780:	f104 031a 	add.w	r3, r4, #26
 8007784:	f04f 0b00 	mov.w	fp, #0
 8007788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800778c:	9306      	str	r3, [sp, #24]
 800778e:	e015      	b.n	80077bc <_printf_float+0x324>
 8007790:	7fefffff 	.word	0x7fefffff
 8007794:	08008dfc 	.word	0x08008dfc
 8007798:	08008df8 	.word	0x08008df8
 800779c:	08008e04 	.word	0x08008e04
 80077a0:	08008e00 	.word	0x08008e00
 80077a4:	08008e08 	.word	0x08008e08
 80077a8:	2301      	movs	r3, #1
 80077aa:	9a06      	ldr	r2, [sp, #24]
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f aecd 	beq.w	8007552 <_printf_float+0xba>
 80077b8:	f10b 0b01 	add.w	fp, fp, #1
 80077bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077c0:	ebaa 0309 	sub.w	r3, sl, r9
 80077c4:	455b      	cmp	r3, fp
 80077c6:	dcef      	bgt.n	80077a8 <_printf_float+0x310>
 80077c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077cc:	429a      	cmp	r2, r3
 80077ce:	44d0      	add	r8, sl
 80077d0:	db15      	blt.n	80077fe <_printf_float+0x366>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	d412      	bmi.n	80077fe <_printf_float+0x366>
 80077d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077dc:	eba3 020a 	sub.w	r2, r3, sl
 80077e0:	eba3 0a01 	sub.w	sl, r3, r1
 80077e4:	4592      	cmp	sl, r2
 80077e6:	bfa8      	it	ge
 80077e8:	4692      	movge	sl, r2
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	dc0e      	bgt.n	800780e <_printf_float+0x376>
 80077f0:	f04f 0800 	mov.w	r8, #0
 80077f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077f8:	f104 091a 	add.w	r9, r4, #26
 80077fc:	e019      	b.n	8007832 <_printf_float+0x39a>
 80077fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	d1e5      	bne.n	80077d8 <_printf_float+0x340>
 800780c:	e6a1      	b.n	8007552 <_printf_float+0xba>
 800780e:	4653      	mov	r3, sl
 8007810:	4642      	mov	r2, r8
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	d1e9      	bne.n	80077f0 <_printf_float+0x358>
 800781c:	e699      	b.n	8007552 <_printf_float+0xba>
 800781e:	2301      	movs	r3, #1
 8007820:	464a      	mov	r2, r9
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f ae92 	beq.w	8007552 <_printf_float+0xba>
 800782e:	f108 0801 	add.w	r8, r8, #1
 8007832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	eba3 030a 	sub.w	r3, r3, sl
 800783c:	4543      	cmp	r3, r8
 800783e:	dcee      	bgt.n	800781e <_printf_float+0x386>
 8007840:	e74a      	b.n	80076d8 <_printf_float+0x240>
 8007842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007844:	2a01      	cmp	r2, #1
 8007846:	dc01      	bgt.n	800784c <_printf_float+0x3b4>
 8007848:	07db      	lsls	r3, r3, #31
 800784a:	d53a      	bpl.n	80078c2 <_printf_float+0x42a>
 800784c:	2301      	movs	r3, #1
 800784e:	4642      	mov	r2, r8
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f ae7b 	beq.w	8007552 <_printf_float+0xba>
 800785c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f108 0801 	add.w	r8, r8, #1
 800786c:	f43f ae71 	beq.w	8007552 <_printf_float+0xba>
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	2200      	movs	r2, #0
 8007874:	f103 3aff 	add.w	sl, r3, #4294967295
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800787c:	2300      	movs	r3, #0
 800787e:	f7f9 f8cf 	bl	8000a20 <__aeabi_dcmpeq>
 8007882:	b9c8      	cbnz	r0, 80078b8 <_printf_float+0x420>
 8007884:	4653      	mov	r3, sl
 8007886:	4642      	mov	r2, r8
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	d10e      	bne.n	80078b0 <_printf_float+0x418>
 8007892:	e65e      	b.n	8007552 <_printf_float+0xba>
 8007894:	2301      	movs	r3, #1
 8007896:	4652      	mov	r2, sl
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f ae57 	beq.w	8007552 <_printf_float+0xba>
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4543      	cmp	r3, r8
 80078ae:	dcf1      	bgt.n	8007894 <_printf_float+0x3fc>
 80078b0:	464b      	mov	r3, r9
 80078b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078b6:	e6de      	b.n	8007676 <_printf_float+0x1de>
 80078b8:	f04f 0800 	mov.w	r8, #0
 80078bc:	f104 0a1a 	add.w	sl, r4, #26
 80078c0:	e7f2      	b.n	80078a8 <_printf_float+0x410>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7df      	b.n	8007886 <_printf_float+0x3ee>
 80078c6:	2301      	movs	r3, #1
 80078c8:	464a      	mov	r2, r9
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f ae3e 	beq.w	8007552 <_printf_float+0xba>
 80078d6:	f108 0801 	add.w	r8, r8, #1
 80078da:	68e3      	ldr	r3, [r4, #12]
 80078dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	4543      	cmp	r3, r8
 80078e2:	dcf0      	bgt.n	80078c6 <_printf_float+0x42e>
 80078e4:	e6fc      	b.n	80076e0 <_printf_float+0x248>
 80078e6:	f04f 0800 	mov.w	r8, #0
 80078ea:	f104 0919 	add.w	r9, r4, #25
 80078ee:	e7f4      	b.n	80078da <_printf_float+0x442>
 80078f0:	2900      	cmp	r1, #0
 80078f2:	f43f ae8b 	beq.w	800760c <_printf_float+0x174>
 80078f6:	2300      	movs	r3, #0
 80078f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078fc:	ab09      	add	r3, sp, #36	; 0x24
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	ec49 8b10 	vmov	d0, r8, r9
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	f8cd a004 	str.w	sl, [sp, #4]
 800790a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800790e:	4628      	mov	r0, r5
 8007910:	f7ff fd2e 	bl	8007370 <__cvt>
 8007914:	4680      	mov	r8, r0
 8007916:	e648      	b.n	80075aa <_printf_float+0x112>

08007918 <_printf_common>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	4691      	mov	r9, r2
 800791e:	461f      	mov	r7, r3
 8007920:	688a      	ldr	r2, [r1, #8]
 8007922:	690b      	ldr	r3, [r1, #16]
 8007924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007928:	4293      	cmp	r3, r2
 800792a:	bfb8      	it	lt
 800792c:	4613      	movlt	r3, r2
 800792e:	f8c9 3000 	str.w	r3, [r9]
 8007932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007936:	4606      	mov	r6, r0
 8007938:	460c      	mov	r4, r1
 800793a:	b112      	cbz	r2, 8007942 <_printf_common+0x2a>
 800793c:	3301      	adds	r3, #1
 800793e:	f8c9 3000 	str.w	r3, [r9]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	0699      	lsls	r1, r3, #26
 8007946:	bf42      	ittt	mi
 8007948:	f8d9 3000 	ldrmi.w	r3, [r9]
 800794c:	3302      	addmi	r3, #2
 800794e:	f8c9 3000 	strmi.w	r3, [r9]
 8007952:	6825      	ldr	r5, [r4, #0]
 8007954:	f015 0506 	ands.w	r5, r5, #6
 8007958:	d107      	bne.n	800796a <_printf_common+0x52>
 800795a:	f104 0a19 	add.w	sl, r4, #25
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	f8d9 2000 	ldr.w	r2, [r9]
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	42ab      	cmp	r3, r5
 8007968:	dc28      	bgt.n	80079bc <_printf_common+0xa4>
 800796a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	3300      	adds	r3, #0
 8007972:	bf18      	it	ne
 8007974:	2301      	movne	r3, #1
 8007976:	0692      	lsls	r2, r2, #26
 8007978:	d42d      	bmi.n	80079d6 <_printf_common+0xbe>
 800797a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797e:	4639      	mov	r1, r7
 8007980:	4630      	mov	r0, r6
 8007982:	47c0      	blx	r8
 8007984:	3001      	adds	r0, #1
 8007986:	d020      	beq.n	80079ca <_printf_common+0xb2>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	68e5      	ldr	r5, [r4, #12]
 800798c:	f8d9 2000 	ldr.w	r2, [r9]
 8007990:	f003 0306 	and.w	r3, r3, #6
 8007994:	2b04      	cmp	r3, #4
 8007996:	bf08      	it	eq
 8007998:	1aad      	subeq	r5, r5, r2
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	6922      	ldr	r2, [r4, #16]
 800799e:	bf0c      	ite	eq
 80079a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a4:	2500      	movne	r5, #0
 80079a6:	4293      	cmp	r3, r2
 80079a8:	bfc4      	itt	gt
 80079aa:	1a9b      	subgt	r3, r3, r2
 80079ac:	18ed      	addgt	r5, r5, r3
 80079ae:	f04f 0900 	mov.w	r9, #0
 80079b2:	341a      	adds	r4, #26
 80079b4:	454d      	cmp	r5, r9
 80079b6:	d11a      	bne.n	80079ee <_printf_common+0xd6>
 80079b8:	2000      	movs	r0, #0
 80079ba:	e008      	b.n	80079ce <_printf_common+0xb6>
 80079bc:	2301      	movs	r3, #1
 80079be:	4652      	mov	r2, sl
 80079c0:	4639      	mov	r1, r7
 80079c2:	4630      	mov	r0, r6
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d103      	bne.n	80079d2 <_printf_common+0xba>
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d2:	3501      	adds	r5, #1
 80079d4:	e7c3      	b.n	800795e <_printf_common+0x46>
 80079d6:	18e1      	adds	r1, r4, r3
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	2030      	movs	r0, #48	; 0x30
 80079dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e0:	4422      	add	r2, r4
 80079e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ea:	3302      	adds	r3, #2
 80079ec:	e7c5      	b.n	800797a <_printf_common+0x62>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4622      	mov	r2, r4
 80079f2:	4639      	mov	r1, r7
 80079f4:	4630      	mov	r0, r6
 80079f6:	47c0      	blx	r8
 80079f8:	3001      	adds	r0, #1
 80079fa:	d0e6      	beq.n	80079ca <_printf_common+0xb2>
 80079fc:	f109 0901 	add.w	r9, r9, #1
 8007a00:	e7d8      	b.n	80079b4 <_printf_common+0x9c>

08007a02 <quorem>:
 8007a02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a06:	6903      	ldr	r3, [r0, #16]
 8007a08:	690c      	ldr	r4, [r1, #16]
 8007a0a:	42a3      	cmp	r3, r4
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	f2c0 8082 	blt.w	8007b16 <quorem+0x114>
 8007a12:	3c01      	subs	r4, #1
 8007a14:	f101 0714 	add.w	r7, r1, #20
 8007a18:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007a1c:	f100 0614 	add.w	r6, r0, #20
 8007a20:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007a24:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007a28:	eb06 030c 	add.w	r3, r6, ip
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	eb07 090c 	add.w	r9, r7, ip
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	fbb0 f5f5 	udiv	r5, r0, r5
 8007a38:	b395      	cbz	r5, 8007aa0 <quorem+0x9e>
 8007a3a:	f04f 0a00 	mov.w	sl, #0
 8007a3e:	4638      	mov	r0, r7
 8007a40:	46b6      	mov	lr, r6
 8007a42:	46d3      	mov	fp, sl
 8007a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a48:	b293      	uxth	r3, r2
 8007a4a:	fb05 a303 	mla	r3, r5, r3, sl
 8007a4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ebab 0303 	sub.w	r3, fp, r3
 8007a58:	0c12      	lsrs	r2, r2, #16
 8007a5a:	f8de b000 	ldr.w	fp, [lr]
 8007a5e:	fb05 a202 	mla	r2, r5, r2, sl
 8007a62:	fa13 f38b 	uxtah	r3, r3, fp
 8007a66:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a6a:	fa1f fb82 	uxth.w	fp, r2
 8007a6e:	f8de 2000 	ldr.w	r2, [lr]
 8007a72:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a80:	4581      	cmp	r9, r0
 8007a82:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a86:	f84e 3b04 	str.w	r3, [lr], #4
 8007a8a:	d2db      	bcs.n	8007a44 <quorem+0x42>
 8007a8c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a90:	b933      	cbnz	r3, 8007aa0 <quorem+0x9e>
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	429e      	cmp	r6, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	d330      	bcc.n	8007afe <quorem+0xfc>
 8007a9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	f001 f82b 	bl	8008afc <__mcmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	db25      	blt.n	8007af6 <quorem+0xf4>
 8007aaa:	3501      	adds	r5, #1
 8007aac:	4630      	mov	r0, r6
 8007aae:	f04f 0c00 	mov.w	ip, #0
 8007ab2:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ab6:	f8d0 e000 	ldr.w	lr, [r0]
 8007aba:	b293      	uxth	r3, r2
 8007abc:	ebac 0303 	sub.w	r3, ip, r3
 8007ac0:	0c12      	lsrs	r2, r2, #16
 8007ac2:	fa13 f38e 	uxtah	r3, r3, lr
 8007ac6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007aca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad4:	45b9      	cmp	r9, r7
 8007ad6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ada:	f840 3b04 	str.w	r3, [r0], #4
 8007ade:	d2e8      	bcs.n	8007ab2 <quorem+0xb0>
 8007ae0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007ae4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007ae8:	b92a      	cbnz	r2, 8007af6 <quorem+0xf4>
 8007aea:	3b04      	subs	r3, #4
 8007aec:	429e      	cmp	r6, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	d30b      	bcc.n	8007b0a <quorem+0x108>
 8007af2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007af6:	4628      	mov	r0, r5
 8007af8:	b003      	add	sp, #12
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	3b04      	subs	r3, #4
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	d1ca      	bne.n	8007a9c <quorem+0x9a>
 8007b06:	3c01      	subs	r4, #1
 8007b08:	e7c5      	b.n	8007a96 <quorem+0x94>
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d1ef      	bne.n	8007af2 <quorem+0xf0>
 8007b12:	3c01      	subs	r4, #1
 8007b14:	e7ea      	b.n	8007aec <quorem+0xea>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e7ee      	b.n	8007af8 <quorem+0xf6>
 8007b1a:	0000      	movs	r0, r0
 8007b1c:	0000      	movs	r0, r0
	...

08007b20 <_dtoa_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ec57 6b10 	vmov	r6, r7, d0
 8007b28:	b097      	sub	sp, #92	; 0x5c
 8007b2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b2c:	9106      	str	r1, [sp, #24]
 8007b2e:	4604      	mov	r4, r0
 8007b30:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b32:	9312      	str	r3, [sp, #72]	; 0x48
 8007b34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b38:	e9cd 6700 	strd	r6, r7, [sp]
 8007b3c:	b93d      	cbnz	r5, 8007b4e <_dtoa_r+0x2e>
 8007b3e:	2010      	movs	r0, #16
 8007b40:	f000 fdb4 	bl	80086ac <malloc>
 8007b44:	6260      	str	r0, [r4, #36]	; 0x24
 8007b46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b4a:	6005      	str	r5, [r0, #0]
 8007b4c:	60c5      	str	r5, [r0, #12]
 8007b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b50:	6819      	ldr	r1, [r3, #0]
 8007b52:	b151      	cbz	r1, 8007b6a <_dtoa_r+0x4a>
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	604a      	str	r2, [r1, #4]
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4093      	lsls	r3, r2
 8007b5c:	608b      	str	r3, [r1, #8]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 fdeb 	bl	800873a <_Bfree>
 8007b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	1e3b      	subs	r3, r7, #0
 8007b6c:	bfbb      	ittet	lt
 8007b6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b72:	9301      	strlt	r3, [sp, #4]
 8007b74:	2300      	movge	r3, #0
 8007b76:	2201      	movlt	r2, #1
 8007b78:	bfac      	ite	ge
 8007b7a:	f8c8 3000 	strge.w	r3, [r8]
 8007b7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b82:	4baf      	ldr	r3, [pc, #700]	; (8007e40 <_dtoa_r+0x320>)
 8007b84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b88:	ea33 0308 	bics.w	r3, r3, r8
 8007b8c:	d114      	bne.n	8007bb8 <_dtoa_r+0x98>
 8007b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	b923      	cbnz	r3, 8007ba4 <_dtoa_r+0x84>
 8007b9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f000 8542 	beq.w	8008628 <_dtoa_r+0xb08>
 8007ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007e54 <_dtoa_r+0x334>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8544 	beq.w	8008638 <_dtoa_r+0xb18>
 8007bb0:	f10b 0303 	add.w	r3, fp, #3
 8007bb4:	f000 bd3e 	b.w	8008634 <_dtoa_r+0xb14>
 8007bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 ff2c 	bl	8000a20 <__aeabi_dcmpeq>
 8007bc8:	4681      	mov	r9, r0
 8007bca:	b168      	cbz	r0, 8007be8 <_dtoa_r+0xc8>
 8007bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8524 	beq.w	8008622 <_dtoa_r+0xb02>
 8007bda:	4b9a      	ldr	r3, [pc, #616]	; (8007e44 <_dtoa_r+0x324>)
 8007bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bde:	f103 3bff 	add.w	fp, r3, #4294967295
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	f000 bd28 	b.w	8008638 <_dtoa_r+0xb18>
 8007be8:	aa14      	add	r2, sp, #80	; 0x50
 8007bea:	a915      	add	r1, sp, #84	; 0x54
 8007bec:	ec47 6b10 	vmov	d0, r6, r7
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fffa 	bl	8008bea <__d2b>
 8007bf6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007bfa:	9004      	str	r0, [sp, #16]
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	d07c      	beq.n	8007cfa <_dtoa_r+0x1da>
 8007c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007c08:	46b2      	mov	sl, r6
 8007c0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b8b      	ldr	r3, [pc, #556]	; (8007e48 <_dtoa_r+0x328>)
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fadf 	bl	80001e0 <__aeabi_dsub>
 8007c22:	a381      	add	r3, pc, #516	; (adr r3, 8007e28 <_dtoa_r+0x308>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fc92 	bl	8000550 <__aeabi_dmul>
 8007c2c:	a380      	add	r3, pc, #512	; (adr r3, 8007e30 <_dtoa_r+0x310>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fad7 	bl	80001e4 <__adddf3>
 8007c36:	4606      	mov	r6, r0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	460f      	mov	r7, r1
 8007c3c:	f7f8 fc1e 	bl	800047c <__aeabi_i2d>
 8007c40:	a37d      	add	r3, pc, #500	; (adr r3, 8007e38 <_dtoa_r+0x318>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fc83 	bl	8000550 <__aeabi_dmul>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	f7f8 fac7 	bl	80001e4 <__adddf3>
 8007c56:	4606      	mov	r6, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	f7f8 ff29 	bl	8000ab0 <__aeabi_d2iz>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4682      	mov	sl, r0
 8007c62:	2300      	movs	r3, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fee4 	bl	8000a34 <__aeabi_dcmplt>
 8007c6c:	b148      	cbz	r0, 8007c82 <_dtoa_r+0x162>
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f7f8 fc04 	bl	800047c <__aeabi_i2d>
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	f7f8 fed2 	bl	8000a20 <__aeabi_dcmpeq>
 8007c7c:	b908      	cbnz	r0, 8007c82 <_dtoa_r+0x162>
 8007c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c82:	f1ba 0f16 	cmp.w	sl, #22
 8007c86:	d859      	bhi.n	8007d3c <_dtoa_r+0x21c>
 8007c88:	4970      	ldr	r1, [pc, #448]	; (8007e4c <_dtoa_r+0x32c>)
 8007c8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c96:	f7f8 feeb 	bl	8000a70 <__aeabi_dcmpgt>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d050      	beq.n	8007d40 <_dtoa_r+0x220>
 8007c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ca8:	1b5d      	subs	r5, r3, r5
 8007caa:	f1b5 0801 	subs.w	r8, r5, #1
 8007cae:	bf49      	itett	mi
 8007cb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cb4:	2300      	movpl	r3, #0
 8007cb6:	9305      	strmi	r3, [sp, #20]
 8007cb8:	f04f 0800 	movmi.w	r8, #0
 8007cbc:	bf58      	it	pl
 8007cbe:	9305      	strpl	r3, [sp, #20]
 8007cc0:	f1ba 0f00 	cmp.w	sl, #0
 8007cc4:	db3e      	blt.n	8007d44 <_dtoa_r+0x224>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	44d0      	add	r8, sl
 8007cca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	9b06      	ldr	r3, [sp, #24]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	f200 8090 	bhi.w	8007df8 <_dtoa_r+0x2d8>
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	bfc4      	itt	gt
 8007cdc:	3b04      	subgt	r3, #4
 8007cde:	9306      	strgt	r3, [sp, #24]
 8007ce0:	9b06      	ldr	r3, [sp, #24]
 8007ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ce6:	bfcc      	ite	gt
 8007ce8:	2500      	movgt	r5, #0
 8007cea:	2501      	movle	r5, #1
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	f200 808f 	bhi.w	8007e10 <_dtoa_r+0x2f0>
 8007cf2:	e8df f003 	tbb	[pc, r3]
 8007cf6:	7f7d      	.short	0x7f7d
 8007cf8:	7131      	.short	0x7131
 8007cfa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007cfe:	441d      	add	r5, r3
 8007d00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007d04:	2820      	cmp	r0, #32
 8007d06:	dd13      	ble.n	8007d30 <_dtoa_r+0x210>
 8007d08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007d0c:	9b00      	ldr	r3, [sp, #0]
 8007d0e:	fa08 f800 	lsl.w	r8, r8, r0
 8007d12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007d16:	fa23 f000 	lsr.w	r0, r3, r0
 8007d1a:	ea48 0000 	orr.w	r0, r8, r0
 8007d1e:	f7f8 fb9d 	bl	800045c <__aeabi_ui2d>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4682      	mov	sl, r0
 8007d26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007d2a:	3d01      	subs	r5, #1
 8007d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d2e:	e772      	b.n	8007c16 <_dtoa_r+0xf6>
 8007d30:	9b00      	ldr	r3, [sp, #0]
 8007d32:	f1c0 0020 	rsb	r0, r0, #32
 8007d36:	fa03 f000 	lsl.w	r0, r3, r0
 8007d3a:	e7f0      	b.n	8007d1e <_dtoa_r+0x1fe>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e7b1      	b.n	8007ca4 <_dtoa_r+0x184>
 8007d40:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d42:	e7b0      	b.n	8007ca6 <_dtoa_r+0x186>
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	eba3 030a 	sub.w	r3, r3, sl
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	f1ca 0300 	rsb	r3, sl, #0
 8007d50:	9307      	str	r3, [sp, #28]
 8007d52:	2300      	movs	r3, #0
 8007d54:	930e      	str	r3, [sp, #56]	; 0x38
 8007d56:	e7bb      	b.n	8007cd0 <_dtoa_r+0x1b0>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dd59      	ble.n	8007e16 <_dtoa_r+0x2f6>
 8007d62:	9302      	str	r3, [sp, #8]
 8007d64:	4699      	mov	r9, r3
 8007d66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d68:	2200      	movs	r2, #0
 8007d6a:	6072      	str	r2, [r6, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f102 0014 	add.w	r0, r2, #20
 8007d72:	4298      	cmp	r0, r3
 8007d74:	6871      	ldr	r1, [r6, #4]
 8007d76:	d953      	bls.n	8007e20 <_dtoa_r+0x300>
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fcaa 	bl	80086d2 <_Balloc>
 8007d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d80:	6030      	str	r0, [r6, #0]
 8007d82:	f1b9 0f0e 	cmp.w	r9, #14
 8007d86:	f8d3 b000 	ldr.w	fp, [r3]
 8007d8a:	f200 80e6 	bhi.w	8007f5a <_dtoa_r+0x43a>
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	f000 80e3 	beq.w	8007f5a <_dtoa_r+0x43a>
 8007d94:	ed9d 7b00 	vldr	d7, [sp]
 8007d98:	f1ba 0f00 	cmp.w	sl, #0
 8007d9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007da0:	dd74      	ble.n	8007e8c <_dtoa_r+0x36c>
 8007da2:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <_dtoa_r+0x32c>)
 8007da4:	f00a 030f 	and.w	r3, sl, #15
 8007da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dac:	ed93 7b00 	vldr	d7, [r3]
 8007db0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007db4:	06f0      	lsls	r0, r6, #27
 8007db6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007dba:	d565      	bpl.n	8007e88 <_dtoa_r+0x368>
 8007dbc:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <_dtoa_r+0x330>)
 8007dbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dc6:	f7f8 fced 	bl	80007a4 <__aeabi_ddiv>
 8007dca:	e9cd 0100 	strd	r0, r1, [sp]
 8007dce:	f006 060f 	and.w	r6, r6, #15
 8007dd2:	2503      	movs	r5, #3
 8007dd4:	4f1e      	ldr	r7, [pc, #120]	; (8007e50 <_dtoa_r+0x330>)
 8007dd6:	e04c      	b.n	8007e72 <_dtoa_r+0x352>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	930a      	str	r3, [sp, #40]	; 0x28
 8007ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dde:	4453      	add	r3, sl
 8007de0:	f103 0901 	add.w	r9, r3, #1
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	464b      	mov	r3, r9
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	bfb8      	it	lt
 8007dec:	2301      	movlt	r3, #1
 8007dee:	e7ba      	b.n	8007d66 <_dtoa_r+0x246>
 8007df0:	2300      	movs	r3, #0
 8007df2:	e7b2      	b.n	8007d5a <_dtoa_r+0x23a>
 8007df4:	2300      	movs	r3, #0
 8007df6:	e7f0      	b.n	8007dda <_dtoa_r+0x2ba>
 8007df8:	2501      	movs	r5, #1
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9306      	str	r3, [sp, #24]
 8007dfe:	950a      	str	r5, [sp, #40]	; 0x28
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	9302      	str	r3, [sp, #8]
 8007e06:	4699      	mov	r9, r3
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2312      	movs	r3, #18
 8007e0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e0e:	e7aa      	b.n	8007d66 <_dtoa_r+0x246>
 8007e10:	2301      	movs	r3, #1
 8007e12:	930a      	str	r3, [sp, #40]	; 0x28
 8007e14:	e7f4      	b.n	8007e00 <_dtoa_r+0x2e0>
 8007e16:	2301      	movs	r3, #1
 8007e18:	9302      	str	r3, [sp, #8]
 8007e1a:	4699      	mov	r9, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	e7f5      	b.n	8007e0c <_dtoa_r+0x2ec>
 8007e20:	3101      	adds	r1, #1
 8007e22:	6071      	str	r1, [r6, #4]
 8007e24:	0052      	lsls	r2, r2, #1
 8007e26:	e7a2      	b.n	8007d6e <_dtoa_r+0x24e>
 8007e28:	636f4361 	.word	0x636f4361
 8007e2c:	3fd287a7 	.word	0x3fd287a7
 8007e30:	8b60c8b3 	.word	0x8b60c8b3
 8007e34:	3fc68a28 	.word	0x3fc68a28
 8007e38:	509f79fb 	.word	0x509f79fb
 8007e3c:	3fd34413 	.word	0x3fd34413
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	08008e09 	.word	0x08008e09
 8007e48:	3ff80000 	.word	0x3ff80000
 8007e4c:	08008e40 	.word	0x08008e40
 8007e50:	08008e18 	.word	0x08008e18
 8007e54:	08008e13 	.word	0x08008e13
 8007e58:	07f1      	lsls	r1, r6, #31
 8007e5a:	d508      	bpl.n	8007e6e <_dtoa_r+0x34e>
 8007e5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e64:	f7f8 fb74 	bl	8000550 <__aeabi_dmul>
 8007e68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	1076      	asrs	r6, r6, #1
 8007e70:	3708      	adds	r7, #8
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d1f0      	bne.n	8007e58 <_dtoa_r+0x338>
 8007e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e7e:	f7f8 fc91 	bl	80007a4 <__aeabi_ddiv>
 8007e82:	e9cd 0100 	strd	r0, r1, [sp]
 8007e86:	e01a      	b.n	8007ebe <_dtoa_r+0x39e>
 8007e88:	2502      	movs	r5, #2
 8007e8a:	e7a3      	b.n	8007dd4 <_dtoa_r+0x2b4>
 8007e8c:	f000 80a0 	beq.w	8007fd0 <_dtoa_r+0x4b0>
 8007e90:	f1ca 0600 	rsb	r6, sl, #0
 8007e94:	4b9f      	ldr	r3, [pc, #636]	; (8008114 <_dtoa_r+0x5f4>)
 8007e96:	4fa0      	ldr	r7, [pc, #640]	; (8008118 <_dtoa_r+0x5f8>)
 8007e98:	f006 020f 	and.w	r2, r6, #15
 8007e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ea8:	f7f8 fb52 	bl	8000550 <__aeabi_dmul>
 8007eac:	e9cd 0100 	strd	r0, r1, [sp]
 8007eb0:	1136      	asrs	r6, r6, #4
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2502      	movs	r5, #2
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	d17f      	bne.n	8007fba <_dtoa_r+0x49a>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e1      	bne.n	8007e82 <_dtoa_r+0x362>
 8007ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8087 	beq.w	8007fd4 <_dtoa_r+0x4b4>
 8007ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4b93      	ldr	r3, [pc, #588]	; (800811c <_dtoa_r+0x5fc>)
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fdaf 	bl	8000a34 <__aeabi_dcmplt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d07c      	beq.n	8007fd4 <_dtoa_r+0x4b4>
 8007eda:	f1b9 0f00 	cmp.w	r9, #0
 8007ede:	d079      	beq.n	8007fd4 <_dtoa_r+0x4b4>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd35      	ble.n	8007f52 <_dtoa_r+0x432>
 8007ee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007eea:	9308      	str	r3, [sp, #32]
 8007eec:	4639      	mov	r1, r7
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4b8b      	ldr	r3, [pc, #556]	; (8008120 <_dtoa_r+0x600>)
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7f8 fb2c 	bl	8000550 <__aeabi_dmul>
 8007ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8007efc:	9f02      	ldr	r7, [sp, #8]
 8007efe:	3501      	adds	r5, #1
 8007f00:	4628      	mov	r0, r5
 8007f02:	f7f8 fabb 	bl	800047c <__aeabi_i2d>
 8007f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f0a:	f7f8 fb21 	bl	8000550 <__aeabi_dmul>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4b84      	ldr	r3, [pc, #528]	; (8008124 <_dtoa_r+0x604>)
 8007f12:	f7f8 f967 	bl	80001e4 <__adddf3>
 8007f16:	4605      	mov	r5, r0
 8007f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	d15d      	bne.n	8007fdc <_dtoa_r+0x4bc>
 8007f20:	2200      	movs	r2, #0
 8007f22:	4b81      	ldr	r3, [pc, #516]	; (8008128 <_dtoa_r+0x608>)
 8007f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f28:	f7f8 f95a 	bl	80001e0 <__aeabi_dsub>
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4633      	mov	r3, r6
 8007f30:	e9cd 0100 	strd	r0, r1, [sp]
 8007f34:	f7f8 fd9c 	bl	8000a70 <__aeabi_dcmpgt>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f040 8288 	bne.w	800844e <_dtoa_r+0x92e>
 8007f3e:	462a      	mov	r2, r5
 8007f40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f48:	f7f8 fd74 	bl	8000a34 <__aeabi_dcmplt>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f040 827c 	bne.w	800844a <_dtoa_r+0x92a>
 8007f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f56:	e9cd 2300 	strd	r2, r3, [sp]
 8007f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f2c0 8150 	blt.w	8008202 <_dtoa_r+0x6e2>
 8007f62:	f1ba 0f0e 	cmp.w	sl, #14
 8007f66:	f300 814c 	bgt.w	8008202 <_dtoa_r+0x6e2>
 8007f6a:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <_dtoa_r+0x5f4>)
 8007f6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f70:	ed93 7b00 	vldr	d7, [r3]
 8007f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f7c:	f280 80d8 	bge.w	8008130 <_dtoa_r+0x610>
 8007f80:	f1b9 0f00 	cmp.w	r9, #0
 8007f84:	f300 80d4 	bgt.w	8008130 <_dtoa_r+0x610>
 8007f88:	f040 825e 	bne.w	8008448 <_dtoa_r+0x928>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4b66      	ldr	r3, [pc, #408]	; (8008128 <_dtoa_r+0x608>)
 8007f90:	ec51 0b17 	vmov	r0, r1, d7
 8007f94:	f7f8 fadc 	bl	8000550 <__aeabi_dmul>
 8007f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9c:	f7f8 fd5e 	bl	8000a5c <__aeabi_dcmpge>
 8007fa0:	464f      	mov	r7, r9
 8007fa2:	464e      	mov	r6, r9
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f040 8234 	bne.w	8008412 <_dtoa_r+0x8f2>
 8007faa:	2331      	movs	r3, #49	; 0x31
 8007fac:	f10b 0501 	add.w	r5, fp, #1
 8007fb0:	f88b 3000 	strb.w	r3, [fp]
 8007fb4:	f10a 0a01 	add.w	sl, sl, #1
 8007fb8:	e22f      	b.n	800841a <_dtoa_r+0x8fa>
 8007fba:	07f2      	lsls	r2, r6, #31
 8007fbc:	d505      	bpl.n	8007fca <_dtoa_r+0x4aa>
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	f7f8 fac5 	bl	8000550 <__aeabi_dmul>
 8007fc6:	3501      	adds	r5, #1
 8007fc8:	2301      	movs	r3, #1
 8007fca:	1076      	asrs	r6, r6, #1
 8007fcc:	3708      	adds	r7, #8
 8007fce:	e772      	b.n	8007eb6 <_dtoa_r+0x396>
 8007fd0:	2502      	movs	r5, #2
 8007fd2:	e774      	b.n	8007ebe <_dtoa_r+0x39e>
 8007fd4:	f8cd a020 	str.w	sl, [sp, #32]
 8007fd8:	464f      	mov	r7, r9
 8007fda:	e791      	b.n	8007f00 <_dtoa_r+0x3e0>
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	; (8008114 <_dtoa_r+0x5f4>)
 8007fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fe2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d047      	beq.n	800807c <_dtoa_r+0x55c>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	494e      	ldr	r1, [pc, #312]	; (800812c <_dtoa_r+0x60c>)
 8007ff4:	f7f8 fbd6 	bl	80007a4 <__aeabi_ddiv>
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4633      	mov	r3, r6
 8007ffc:	f7f8 f8f0 	bl	80001e0 <__aeabi_dsub>
 8008000:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008004:	465d      	mov	r5, fp
 8008006:	e9dd 0100 	ldrd	r0, r1, [sp]
 800800a:	f7f8 fd51 	bl	8000ab0 <__aeabi_d2iz>
 800800e:	4606      	mov	r6, r0
 8008010:	f7f8 fa34 	bl	800047c <__aeabi_i2d>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800801c:	f7f8 f8e0 	bl	80001e0 <__aeabi_dsub>
 8008020:	3630      	adds	r6, #48	; 0x30
 8008022:	f805 6b01 	strb.w	r6, [r5], #1
 8008026:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800802a:	e9cd 0100 	strd	r0, r1, [sp]
 800802e:	f7f8 fd01 	bl	8000a34 <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	d163      	bne.n	80080fe <_dtoa_r+0x5de>
 8008036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800803a:	2000      	movs	r0, #0
 800803c:	4937      	ldr	r1, [pc, #220]	; (800811c <_dtoa_r+0x5fc>)
 800803e:	f7f8 f8cf 	bl	80001e0 <__aeabi_dsub>
 8008042:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008046:	f7f8 fcf5 	bl	8000a34 <__aeabi_dcmplt>
 800804a:	2800      	cmp	r0, #0
 800804c:	f040 80b7 	bne.w	80081be <_dtoa_r+0x69e>
 8008050:	eba5 030b 	sub.w	r3, r5, fp
 8008054:	429f      	cmp	r7, r3
 8008056:	f77f af7c 	ble.w	8007f52 <_dtoa_r+0x432>
 800805a:	2200      	movs	r2, #0
 800805c:	4b30      	ldr	r3, [pc, #192]	; (8008120 <_dtoa_r+0x600>)
 800805e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008062:	f7f8 fa75 	bl	8000550 <__aeabi_dmul>
 8008066:	2200      	movs	r2, #0
 8008068:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800806c:	4b2c      	ldr	r3, [pc, #176]	; (8008120 <_dtoa_r+0x600>)
 800806e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008072:	f7f8 fa6d 	bl	8000550 <__aeabi_dmul>
 8008076:	e9cd 0100 	strd	r0, r1, [sp]
 800807a:	e7c4      	b.n	8008006 <_dtoa_r+0x4e6>
 800807c:	462a      	mov	r2, r5
 800807e:	4633      	mov	r3, r6
 8008080:	f7f8 fa66 	bl	8000550 <__aeabi_dmul>
 8008084:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008088:	eb0b 0507 	add.w	r5, fp, r7
 800808c:	465e      	mov	r6, fp
 800808e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008092:	f7f8 fd0d 	bl	8000ab0 <__aeabi_d2iz>
 8008096:	4607      	mov	r7, r0
 8008098:	f7f8 f9f0 	bl	800047c <__aeabi_i2d>
 800809c:	3730      	adds	r7, #48	; 0x30
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080a6:	f7f8 f89b 	bl	80001e0 <__aeabi_dsub>
 80080aa:	f806 7b01 	strb.w	r7, [r6], #1
 80080ae:	42ae      	cmp	r6, r5
 80080b0:	e9cd 0100 	strd	r0, r1, [sp]
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	d126      	bne.n	8008108 <_dtoa_r+0x5e8>
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <_dtoa_r+0x60c>)
 80080bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080c0:	f7f8 f890 	bl	80001e4 <__adddf3>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080cc:	f7f8 fcd0 	bl	8000a70 <__aeabi_dcmpgt>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d174      	bne.n	80081be <_dtoa_r+0x69e>
 80080d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80080d8:	2000      	movs	r0, #0
 80080da:	4914      	ldr	r1, [pc, #80]	; (800812c <_dtoa_r+0x60c>)
 80080dc:	f7f8 f880 	bl	80001e0 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e8:	f7f8 fca4 	bl	8000a34 <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f af30 	beq.w	8007f52 <_dtoa_r+0x432>
 80080f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080f6:	2b30      	cmp	r3, #48	; 0x30
 80080f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80080fc:	d002      	beq.n	8008104 <_dtoa_r+0x5e4>
 80080fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008102:	e04a      	b.n	800819a <_dtoa_r+0x67a>
 8008104:	4615      	mov	r5, r2
 8008106:	e7f4      	b.n	80080f2 <_dtoa_r+0x5d2>
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <_dtoa_r+0x600>)
 800810a:	f7f8 fa21 	bl	8000550 <__aeabi_dmul>
 800810e:	e9cd 0100 	strd	r0, r1, [sp]
 8008112:	e7bc      	b.n	800808e <_dtoa_r+0x56e>
 8008114:	08008e40 	.word	0x08008e40
 8008118:	08008e18 	.word	0x08008e18
 800811c:	3ff00000 	.word	0x3ff00000
 8008120:	40240000 	.word	0x40240000
 8008124:	401c0000 	.word	0x401c0000
 8008128:	40140000 	.word	0x40140000
 800812c:	3fe00000 	.word	0x3fe00000
 8008130:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008134:	465d      	mov	r5, fp
 8008136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800813a:	4630      	mov	r0, r6
 800813c:	4639      	mov	r1, r7
 800813e:	f7f8 fb31 	bl	80007a4 <__aeabi_ddiv>
 8008142:	f7f8 fcb5 	bl	8000ab0 <__aeabi_d2iz>
 8008146:	4680      	mov	r8, r0
 8008148:	f7f8 f998 	bl	800047c <__aeabi_i2d>
 800814c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008150:	f7f8 f9fe 	bl	8000550 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008160:	f7f8 f83e 	bl	80001e0 <__aeabi_dsub>
 8008164:	f805 6b01 	strb.w	r6, [r5], #1
 8008168:	eba5 060b 	sub.w	r6, r5, fp
 800816c:	45b1      	cmp	r9, r6
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	d139      	bne.n	80081e8 <_dtoa_r+0x6c8>
 8008174:	f7f8 f836 	bl	80001e4 <__adddf3>
 8008178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	f7f8 fc76 	bl	8000a70 <__aeabi_dcmpgt>
 8008184:	b9c8      	cbnz	r0, 80081ba <_dtoa_r+0x69a>
 8008186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fc47 	bl	8000a20 <__aeabi_dcmpeq>
 8008192:	b110      	cbz	r0, 800819a <_dtoa_r+0x67a>
 8008194:	f018 0f01 	tst.w	r8, #1
 8008198:	d10f      	bne.n	80081ba <_dtoa_r+0x69a>
 800819a:	9904      	ldr	r1, [sp, #16]
 800819c:	4620      	mov	r0, r4
 800819e:	f000 facc 	bl	800873a <_Bfree>
 80081a2:	2300      	movs	r3, #0
 80081a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081a6:	702b      	strb	r3, [r5, #0]
 80081a8:	f10a 0301 	add.w	r3, sl, #1
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8241 	beq.w	8008638 <_dtoa_r+0xb18>
 80081b6:	601d      	str	r5, [r3, #0]
 80081b8:	e23e      	b.n	8008638 <_dtoa_r+0xb18>
 80081ba:	f8cd a020 	str.w	sl, [sp, #32]
 80081be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081c2:	2a39      	cmp	r2, #57	; 0x39
 80081c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80081c8:	d108      	bne.n	80081dc <_dtoa_r+0x6bc>
 80081ca:	459b      	cmp	fp, r3
 80081cc:	d10a      	bne.n	80081e4 <_dtoa_r+0x6c4>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	3301      	adds	r3, #1
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	2330      	movs	r3, #48	; 0x30
 80081d6:	f88b 3000 	strb.w	r3, [fp]
 80081da:	465b      	mov	r3, fp
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	3201      	adds	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e78c      	b.n	80080fe <_dtoa_r+0x5de>
 80081e4:	461d      	mov	r5, r3
 80081e6:	e7ea      	b.n	80081be <_dtoa_r+0x69e>
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b9b      	ldr	r3, [pc, #620]	; (8008458 <_dtoa_r+0x938>)
 80081ec:	f7f8 f9b0 	bl	8000550 <__aeabi_dmul>
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4606      	mov	r6, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	f7f8 fc12 	bl	8000a20 <__aeabi_dcmpeq>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d09a      	beq.n	8008136 <_dtoa_r+0x616>
 8008200:	e7cb      	b.n	800819a <_dtoa_r+0x67a>
 8008202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008204:	2a00      	cmp	r2, #0
 8008206:	f000 808b 	beq.w	8008320 <_dtoa_r+0x800>
 800820a:	9a06      	ldr	r2, [sp, #24]
 800820c:	2a01      	cmp	r2, #1
 800820e:	dc6e      	bgt.n	80082ee <_dtoa_r+0x7ce>
 8008210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008212:	2a00      	cmp	r2, #0
 8008214:	d067      	beq.n	80082e6 <_dtoa_r+0x7c6>
 8008216:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800821a:	9f07      	ldr	r7, [sp, #28]
 800821c:	9d05      	ldr	r5, [sp, #20]
 800821e:	9a05      	ldr	r2, [sp, #20]
 8008220:	2101      	movs	r1, #1
 8008222:	441a      	add	r2, r3
 8008224:	4620      	mov	r0, r4
 8008226:	9205      	str	r2, [sp, #20]
 8008228:	4498      	add	r8, r3
 800822a:	f000 fb26 	bl	800887a <__i2b>
 800822e:	4606      	mov	r6, r0
 8008230:	2d00      	cmp	r5, #0
 8008232:	dd0c      	ble.n	800824e <_dtoa_r+0x72e>
 8008234:	f1b8 0f00 	cmp.w	r8, #0
 8008238:	dd09      	ble.n	800824e <_dtoa_r+0x72e>
 800823a:	4545      	cmp	r5, r8
 800823c:	9a05      	ldr	r2, [sp, #20]
 800823e:	462b      	mov	r3, r5
 8008240:	bfa8      	it	ge
 8008242:	4643      	movge	r3, r8
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	9205      	str	r2, [sp, #20]
 8008248:	1aed      	subs	r5, r5, r3
 800824a:	eba8 0803 	sub.w	r8, r8, r3
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	b1eb      	cbz	r3, 800828e <_dtoa_r+0x76e>
 8008252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	d067      	beq.n	8008328 <_dtoa_r+0x808>
 8008258:	b18f      	cbz	r7, 800827e <_dtoa_r+0x75e>
 800825a:	4631      	mov	r1, r6
 800825c:	463a      	mov	r2, r7
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fbaa 	bl	80089b8 <__pow5mult>
 8008264:	9a04      	ldr	r2, [sp, #16]
 8008266:	4601      	mov	r1, r0
 8008268:	4606      	mov	r6, r0
 800826a:	4620      	mov	r0, r4
 800826c:	f000 fb0e 	bl	800888c <__multiply>
 8008270:	9904      	ldr	r1, [sp, #16]
 8008272:	9008      	str	r0, [sp, #32]
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fa60 	bl	800873a <_Bfree>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	9b07      	ldr	r3, [sp, #28]
 8008280:	1bda      	subs	r2, r3, r7
 8008282:	d004      	beq.n	800828e <_dtoa_r+0x76e>
 8008284:	9904      	ldr	r1, [sp, #16]
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fb96 	bl	80089b8 <__pow5mult>
 800828c:	9004      	str	r0, [sp, #16]
 800828e:	2101      	movs	r1, #1
 8008290:	4620      	mov	r0, r4
 8008292:	f000 faf2 	bl	800887a <__i2b>
 8008296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008298:	4607      	mov	r7, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 81d0 	beq.w	8008640 <_dtoa_r+0xb20>
 80082a0:	461a      	mov	r2, r3
 80082a2:	4601      	mov	r1, r0
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fb87 	bl	80089b8 <__pow5mult>
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	4607      	mov	r7, r0
 80082b0:	dc40      	bgt.n	8008334 <_dtoa_r+0x814>
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d139      	bne.n	800832c <_dtoa_r+0x80c>
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d136      	bne.n	8008330 <_dtoa_r+0x810>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082c8:	0d1b      	lsrs	r3, r3, #20
 80082ca:	051b      	lsls	r3, r3, #20
 80082cc:	b12b      	cbz	r3, 80082da <_dtoa_r+0x7ba>
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	3301      	adds	r3, #1
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	f108 0801 	add.w	r8, r8, #1
 80082d8:	2301      	movs	r3, #1
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d12a      	bne.n	8008338 <_dtoa_r+0x818>
 80082e2:	2001      	movs	r0, #1
 80082e4:	e030      	b.n	8008348 <_dtoa_r+0x828>
 80082e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082ec:	e795      	b.n	800821a <_dtoa_r+0x6fa>
 80082ee:	9b07      	ldr	r3, [sp, #28]
 80082f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80082f4:	42bb      	cmp	r3, r7
 80082f6:	bfbf      	itttt	lt
 80082f8:	9b07      	ldrlt	r3, [sp, #28]
 80082fa:	9707      	strlt	r7, [sp, #28]
 80082fc:	1afa      	sublt	r2, r7, r3
 80082fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008300:	bfbb      	ittet	lt
 8008302:	189b      	addlt	r3, r3, r2
 8008304:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008306:	1bdf      	subge	r7, r3, r7
 8008308:	2700      	movlt	r7, #0
 800830a:	f1b9 0f00 	cmp.w	r9, #0
 800830e:	bfb5      	itete	lt
 8008310:	9b05      	ldrlt	r3, [sp, #20]
 8008312:	9d05      	ldrge	r5, [sp, #20]
 8008314:	eba3 0509 	sublt.w	r5, r3, r9
 8008318:	464b      	movge	r3, r9
 800831a:	bfb8      	it	lt
 800831c:	2300      	movlt	r3, #0
 800831e:	e77e      	b.n	800821e <_dtoa_r+0x6fe>
 8008320:	9f07      	ldr	r7, [sp, #28]
 8008322:	9d05      	ldr	r5, [sp, #20]
 8008324:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008326:	e783      	b.n	8008230 <_dtoa_r+0x710>
 8008328:	9a07      	ldr	r2, [sp, #28]
 800832a:	e7ab      	b.n	8008284 <_dtoa_r+0x764>
 800832c:	2300      	movs	r3, #0
 800832e:	e7d4      	b.n	80082da <_dtoa_r+0x7ba>
 8008330:	9b00      	ldr	r3, [sp, #0]
 8008332:	e7d2      	b.n	80082da <_dtoa_r+0x7ba>
 8008334:	2300      	movs	r3, #0
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800833e:	6918      	ldr	r0, [r3, #16]
 8008340:	f000 fa4d 	bl	80087de <__hi0bits>
 8008344:	f1c0 0020 	rsb	r0, r0, #32
 8008348:	4440      	add	r0, r8
 800834a:	f010 001f 	ands.w	r0, r0, #31
 800834e:	d047      	beq.n	80083e0 <_dtoa_r+0x8c0>
 8008350:	f1c0 0320 	rsb	r3, r0, #32
 8008354:	2b04      	cmp	r3, #4
 8008356:	dd3b      	ble.n	80083d0 <_dtoa_r+0x8b0>
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	f1c0 001c 	rsb	r0, r0, #28
 800835e:	4403      	add	r3, r0
 8008360:	9305      	str	r3, [sp, #20]
 8008362:	4405      	add	r5, r0
 8008364:	4480      	add	r8, r0
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dd05      	ble.n	8008378 <_dtoa_r+0x858>
 800836c:	461a      	mov	r2, r3
 800836e:	9904      	ldr	r1, [sp, #16]
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fb6f 	bl	8008a54 <__lshift>
 8008376:	9004      	str	r0, [sp, #16]
 8008378:	f1b8 0f00 	cmp.w	r8, #0
 800837c:	dd05      	ble.n	800838a <_dtoa_r+0x86a>
 800837e:	4639      	mov	r1, r7
 8008380:	4642      	mov	r2, r8
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fb66 	bl	8008a54 <__lshift>
 8008388:	4607      	mov	r7, r0
 800838a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838c:	b353      	cbz	r3, 80083e4 <_dtoa_r+0x8c4>
 800838e:	4639      	mov	r1, r7
 8008390:	9804      	ldr	r0, [sp, #16]
 8008392:	f000 fbb3 	bl	8008afc <__mcmp>
 8008396:	2800      	cmp	r0, #0
 8008398:	da24      	bge.n	80083e4 <_dtoa_r+0x8c4>
 800839a:	2300      	movs	r3, #0
 800839c:	220a      	movs	r2, #10
 800839e:	9904      	ldr	r1, [sp, #16]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 f9e1 	bl	8008768 <__multadd>
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	9004      	str	r0, [sp, #16]
 80083aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 814d 	beq.w	800864e <_dtoa_r+0xb2e>
 80083b4:	2300      	movs	r3, #0
 80083b6:	4631      	mov	r1, r6
 80083b8:	220a      	movs	r2, #10
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f9d4 	bl	8008768 <__multadd>
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	dc4f      	bgt.n	8008468 <_dtoa_r+0x948>
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	dd4c      	ble.n	8008468 <_dtoa_r+0x948>
 80083ce:	e011      	b.n	80083f4 <_dtoa_r+0x8d4>
 80083d0:	d0c9      	beq.n	8008366 <_dtoa_r+0x846>
 80083d2:	9a05      	ldr	r2, [sp, #20]
 80083d4:	331c      	adds	r3, #28
 80083d6:	441a      	add	r2, r3
 80083d8:	9205      	str	r2, [sp, #20]
 80083da:	441d      	add	r5, r3
 80083dc:	4498      	add	r8, r3
 80083de:	e7c2      	b.n	8008366 <_dtoa_r+0x846>
 80083e0:	4603      	mov	r3, r0
 80083e2:	e7f6      	b.n	80083d2 <_dtoa_r+0x8b2>
 80083e4:	f1b9 0f00 	cmp.w	r9, #0
 80083e8:	dc38      	bgt.n	800845c <_dtoa_r+0x93c>
 80083ea:	9b06      	ldr	r3, [sp, #24]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	dd35      	ble.n	800845c <_dtoa_r+0x93c>
 80083f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	b963      	cbnz	r3, 8008412 <_dtoa_r+0x8f2>
 80083f8:	4639      	mov	r1, r7
 80083fa:	2205      	movs	r2, #5
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f9b3 	bl	8008768 <__multadd>
 8008402:	4601      	mov	r1, r0
 8008404:	4607      	mov	r7, r0
 8008406:	9804      	ldr	r0, [sp, #16]
 8008408:	f000 fb78 	bl	8008afc <__mcmp>
 800840c:	2800      	cmp	r0, #0
 800840e:	f73f adcc 	bgt.w	8007faa <_dtoa_r+0x48a>
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	465d      	mov	r5, fp
 8008416:	ea6f 0a03 	mvn.w	sl, r3
 800841a:	f04f 0900 	mov.w	r9, #0
 800841e:	4639      	mov	r1, r7
 8008420:	4620      	mov	r0, r4
 8008422:	f000 f98a 	bl	800873a <_Bfree>
 8008426:	2e00      	cmp	r6, #0
 8008428:	f43f aeb7 	beq.w	800819a <_dtoa_r+0x67a>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	d005      	beq.n	800843e <_dtoa_r+0x91e>
 8008432:	45b1      	cmp	r9, r6
 8008434:	d003      	beq.n	800843e <_dtoa_r+0x91e>
 8008436:	4649      	mov	r1, r9
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f97e 	bl	800873a <_Bfree>
 800843e:	4631      	mov	r1, r6
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f97a 	bl	800873a <_Bfree>
 8008446:	e6a8      	b.n	800819a <_dtoa_r+0x67a>
 8008448:	2700      	movs	r7, #0
 800844a:	463e      	mov	r6, r7
 800844c:	e7e1      	b.n	8008412 <_dtoa_r+0x8f2>
 800844e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008452:	463e      	mov	r6, r7
 8008454:	e5a9      	b.n	8007faa <_dtoa_r+0x48a>
 8008456:	bf00      	nop
 8008458:	40240000 	.word	0x40240000
 800845c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80fa 	beq.w	800865c <_dtoa_r+0xb3c>
 8008468:	2d00      	cmp	r5, #0
 800846a:	dd05      	ble.n	8008478 <_dtoa_r+0x958>
 800846c:	4631      	mov	r1, r6
 800846e:	462a      	mov	r2, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f000 faef 	bl	8008a54 <__lshift>
 8008476:	4606      	mov	r6, r0
 8008478:	9b07      	ldr	r3, [sp, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d04c      	beq.n	8008518 <_dtoa_r+0x9f8>
 800847e:	6871      	ldr	r1, [r6, #4]
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f926 	bl	80086d2 <_Balloc>
 8008486:	6932      	ldr	r2, [r6, #16]
 8008488:	3202      	adds	r2, #2
 800848a:	4605      	mov	r5, r0
 800848c:	0092      	lsls	r2, r2, #2
 800848e:	f106 010c 	add.w	r1, r6, #12
 8008492:	300c      	adds	r0, #12
 8008494:	f000 f912 	bl	80086bc <memcpy>
 8008498:	2201      	movs	r2, #1
 800849a:	4629      	mov	r1, r5
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fad9 	bl	8008a54 <__lshift>
 80084a2:	9b00      	ldr	r3, [sp, #0]
 80084a4:	f8cd b014 	str.w	fp, [sp, #20]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	46b1      	mov	r9, r6
 80084ae:	9307      	str	r3, [sp, #28]
 80084b0:	4606      	mov	r6, r0
 80084b2:	4639      	mov	r1, r7
 80084b4:	9804      	ldr	r0, [sp, #16]
 80084b6:	f7ff faa4 	bl	8007a02 <quorem>
 80084ba:	4649      	mov	r1, r9
 80084bc:	4605      	mov	r5, r0
 80084be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80084c2:	9804      	ldr	r0, [sp, #16]
 80084c4:	f000 fb1a 	bl	8008afc <__mcmp>
 80084c8:	4632      	mov	r2, r6
 80084ca:	9000      	str	r0, [sp, #0]
 80084cc:	4639      	mov	r1, r7
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fb2e 	bl	8008b30 <__mdiff>
 80084d4:	68c3      	ldr	r3, [r0, #12]
 80084d6:	4602      	mov	r2, r0
 80084d8:	bb03      	cbnz	r3, 800851c <_dtoa_r+0x9fc>
 80084da:	4601      	mov	r1, r0
 80084dc:	9008      	str	r0, [sp, #32]
 80084de:	9804      	ldr	r0, [sp, #16]
 80084e0:	f000 fb0c 	bl	8008afc <__mcmp>
 80084e4:	9a08      	ldr	r2, [sp, #32]
 80084e6:	4603      	mov	r3, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4620      	mov	r0, r4
 80084ec:	9308      	str	r3, [sp, #32]
 80084ee:	f000 f924 	bl	800873a <_Bfree>
 80084f2:	9b08      	ldr	r3, [sp, #32]
 80084f4:	b9a3      	cbnz	r3, 8008520 <_dtoa_r+0xa00>
 80084f6:	9a06      	ldr	r2, [sp, #24]
 80084f8:	b992      	cbnz	r2, 8008520 <_dtoa_r+0xa00>
 80084fa:	9a07      	ldr	r2, [sp, #28]
 80084fc:	b982      	cbnz	r2, 8008520 <_dtoa_r+0xa00>
 80084fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008502:	d029      	beq.n	8008558 <_dtoa_r+0xa38>
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd01      	ble.n	800850e <_dtoa_r+0x9ee>
 800850a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	1c5d      	adds	r5, r3, #1
 8008512:	f883 8000 	strb.w	r8, [r3]
 8008516:	e782      	b.n	800841e <_dtoa_r+0x8fe>
 8008518:	4630      	mov	r0, r6
 800851a:	e7c2      	b.n	80084a2 <_dtoa_r+0x982>
 800851c:	2301      	movs	r3, #1
 800851e:	e7e3      	b.n	80084e8 <_dtoa_r+0x9c8>
 8008520:	9a00      	ldr	r2, [sp, #0]
 8008522:	2a00      	cmp	r2, #0
 8008524:	db04      	blt.n	8008530 <_dtoa_r+0xa10>
 8008526:	d125      	bne.n	8008574 <_dtoa_r+0xa54>
 8008528:	9a06      	ldr	r2, [sp, #24]
 800852a:	bb1a      	cbnz	r2, 8008574 <_dtoa_r+0xa54>
 800852c:	9a07      	ldr	r2, [sp, #28]
 800852e:	bb0a      	cbnz	r2, 8008574 <_dtoa_r+0xa54>
 8008530:	2b00      	cmp	r3, #0
 8008532:	ddec      	ble.n	800850e <_dtoa_r+0x9ee>
 8008534:	2201      	movs	r2, #1
 8008536:	9904      	ldr	r1, [sp, #16]
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fa8b 	bl	8008a54 <__lshift>
 800853e:	4639      	mov	r1, r7
 8008540:	9004      	str	r0, [sp, #16]
 8008542:	f000 fadb 	bl	8008afc <__mcmp>
 8008546:	2800      	cmp	r0, #0
 8008548:	dc03      	bgt.n	8008552 <_dtoa_r+0xa32>
 800854a:	d1e0      	bne.n	800850e <_dtoa_r+0x9ee>
 800854c:	f018 0f01 	tst.w	r8, #1
 8008550:	d0dd      	beq.n	800850e <_dtoa_r+0x9ee>
 8008552:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008556:	d1d8      	bne.n	800850a <_dtoa_r+0x9ea>
 8008558:	9b05      	ldr	r3, [sp, #20]
 800855a:	9a05      	ldr	r2, [sp, #20]
 800855c:	1c5d      	adds	r5, r3, #1
 800855e:	2339      	movs	r3, #57	; 0x39
 8008560:	7013      	strb	r3, [r2, #0]
 8008562:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008566:	2b39      	cmp	r3, #57	; 0x39
 8008568:	f105 32ff 	add.w	r2, r5, #4294967295
 800856c:	d04f      	beq.n	800860e <_dtoa_r+0xaee>
 800856e:	3301      	adds	r3, #1
 8008570:	7013      	strb	r3, [r2, #0]
 8008572:	e754      	b.n	800841e <_dtoa_r+0x8fe>
 8008574:	9a05      	ldr	r2, [sp, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f102 0501 	add.w	r5, r2, #1
 800857c:	dd06      	ble.n	800858c <_dtoa_r+0xa6c>
 800857e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008582:	d0e9      	beq.n	8008558 <_dtoa_r+0xa38>
 8008584:	f108 0801 	add.w	r8, r8, #1
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	e7c2      	b.n	8008512 <_dtoa_r+0x9f2>
 800858c:	9a02      	ldr	r2, [sp, #8]
 800858e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008592:	eba5 030b 	sub.w	r3, r5, fp
 8008596:	4293      	cmp	r3, r2
 8008598:	d021      	beq.n	80085de <_dtoa_r+0xabe>
 800859a:	2300      	movs	r3, #0
 800859c:	220a      	movs	r2, #10
 800859e:	9904      	ldr	r1, [sp, #16]
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 f8e1 	bl	8008768 <__multadd>
 80085a6:	45b1      	cmp	r9, r6
 80085a8:	9004      	str	r0, [sp, #16]
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	f04f 020a 	mov.w	r2, #10
 80085b2:	4649      	mov	r1, r9
 80085b4:	4620      	mov	r0, r4
 80085b6:	d105      	bne.n	80085c4 <_dtoa_r+0xaa4>
 80085b8:	f000 f8d6 	bl	8008768 <__multadd>
 80085bc:	4681      	mov	r9, r0
 80085be:	4606      	mov	r6, r0
 80085c0:	9505      	str	r5, [sp, #20]
 80085c2:	e776      	b.n	80084b2 <_dtoa_r+0x992>
 80085c4:	f000 f8d0 	bl	8008768 <__multadd>
 80085c8:	4631      	mov	r1, r6
 80085ca:	4681      	mov	r9, r0
 80085cc:	2300      	movs	r3, #0
 80085ce:	220a      	movs	r2, #10
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f8c9 	bl	8008768 <__multadd>
 80085d6:	4606      	mov	r6, r0
 80085d8:	e7f2      	b.n	80085c0 <_dtoa_r+0xaa0>
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	2201      	movs	r2, #1
 80085e0:	9904      	ldr	r1, [sp, #16]
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fa36 	bl	8008a54 <__lshift>
 80085e8:	4639      	mov	r1, r7
 80085ea:	9004      	str	r0, [sp, #16]
 80085ec:	f000 fa86 	bl	8008afc <__mcmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	dcb6      	bgt.n	8008562 <_dtoa_r+0xa42>
 80085f4:	d102      	bne.n	80085fc <_dtoa_r+0xadc>
 80085f6:	f018 0f01 	tst.w	r8, #1
 80085fa:	d1b2      	bne.n	8008562 <_dtoa_r+0xa42>
 80085fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008600:	2b30      	cmp	r3, #48	; 0x30
 8008602:	f105 32ff 	add.w	r2, r5, #4294967295
 8008606:	f47f af0a 	bne.w	800841e <_dtoa_r+0x8fe>
 800860a:	4615      	mov	r5, r2
 800860c:	e7f6      	b.n	80085fc <_dtoa_r+0xadc>
 800860e:	4593      	cmp	fp, r2
 8008610:	d105      	bne.n	800861e <_dtoa_r+0xafe>
 8008612:	2331      	movs	r3, #49	; 0x31
 8008614:	f10a 0a01 	add.w	sl, sl, #1
 8008618:	f88b 3000 	strb.w	r3, [fp]
 800861c:	e6ff      	b.n	800841e <_dtoa_r+0x8fe>
 800861e:	4615      	mov	r5, r2
 8008620:	e79f      	b.n	8008562 <_dtoa_r+0xa42>
 8008622:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008688 <_dtoa_r+0xb68>
 8008626:	e007      	b.n	8008638 <_dtoa_r+0xb18>
 8008628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800862a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800868c <_dtoa_r+0xb6c>
 800862e:	b11b      	cbz	r3, 8008638 <_dtoa_r+0xb18>
 8008630:	f10b 0308 	add.w	r3, fp, #8
 8008634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4658      	mov	r0, fp
 800863a:	b017      	add	sp, #92	; 0x5c
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	9b06      	ldr	r3, [sp, #24]
 8008642:	2b01      	cmp	r3, #1
 8008644:	f77f ae35 	ble.w	80082b2 <_dtoa_r+0x792>
 8008648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	e649      	b.n	80082e2 <_dtoa_r+0x7c2>
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc03      	bgt.n	800865c <_dtoa_r+0xb3c>
 8008654:	9b06      	ldr	r3, [sp, #24]
 8008656:	2b02      	cmp	r3, #2
 8008658:	f73f aecc 	bgt.w	80083f4 <_dtoa_r+0x8d4>
 800865c:	465d      	mov	r5, fp
 800865e:	4639      	mov	r1, r7
 8008660:	9804      	ldr	r0, [sp, #16]
 8008662:	f7ff f9ce 	bl	8007a02 <quorem>
 8008666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800866a:	f805 8b01 	strb.w	r8, [r5], #1
 800866e:	9a02      	ldr	r2, [sp, #8]
 8008670:	eba5 030b 	sub.w	r3, r5, fp
 8008674:	429a      	cmp	r2, r3
 8008676:	ddb0      	ble.n	80085da <_dtoa_r+0xaba>
 8008678:	2300      	movs	r3, #0
 800867a:	220a      	movs	r2, #10
 800867c:	9904      	ldr	r1, [sp, #16]
 800867e:	4620      	mov	r0, r4
 8008680:	f000 f872 	bl	8008768 <__multadd>
 8008684:	9004      	str	r0, [sp, #16]
 8008686:	e7ea      	b.n	800865e <_dtoa_r+0xb3e>
 8008688:	08008e08 	.word	0x08008e08
 800868c:	08008e0a 	.word	0x08008e0a

08008690 <_localeconv_r>:
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <_localeconv_r+0x14>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6a18      	ldr	r0, [r3, #32]
 8008696:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <_localeconv_r+0x18>)
 8008698:	2800      	cmp	r0, #0
 800869a:	bf08      	it	eq
 800869c:	4618      	moveq	r0, r3
 800869e:	30f0      	adds	r0, #240	; 0xf0
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000000c 	.word	0x2000000c
 80086a8:	20000070 	.word	0x20000070

080086ac <malloc>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <malloc+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 baf7 	b.w	8008ca4 <_malloc_r>
 80086b6:	bf00      	nop
 80086b8:	2000000c 	.word	0x2000000c

080086bc <memcpy>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	1e43      	subs	r3, r0, #1
 80086c0:	440a      	add	r2, r1
 80086c2:	4291      	cmp	r1, r2
 80086c4:	d100      	bne.n	80086c8 <memcpy+0xc>
 80086c6:	bd10      	pop	{r4, pc}
 80086c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d0:	e7f7      	b.n	80086c2 <memcpy+0x6>

080086d2 <_Balloc>:
 80086d2:	b570      	push	{r4, r5, r6, lr}
 80086d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086d6:	4604      	mov	r4, r0
 80086d8:	460e      	mov	r6, r1
 80086da:	b93d      	cbnz	r5, 80086ec <_Balloc+0x1a>
 80086dc:	2010      	movs	r0, #16
 80086de:	f7ff ffe5 	bl	80086ac <malloc>
 80086e2:	6260      	str	r0, [r4, #36]	; 0x24
 80086e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086e8:	6005      	str	r5, [r0, #0]
 80086ea:	60c5      	str	r5, [r0, #12]
 80086ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80086ee:	68eb      	ldr	r3, [r5, #12]
 80086f0:	b183      	cbz	r3, 8008714 <_Balloc+0x42>
 80086f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086fa:	b9b8      	cbnz	r0, 800872c <_Balloc+0x5a>
 80086fc:	2101      	movs	r1, #1
 80086fe:	fa01 f506 	lsl.w	r5, r1, r6
 8008702:	1d6a      	adds	r2, r5, #5
 8008704:	0092      	lsls	r2, r2, #2
 8008706:	4620      	mov	r0, r4
 8008708:	f000 fabe 	bl	8008c88 <_calloc_r>
 800870c:	b160      	cbz	r0, 8008728 <_Balloc+0x56>
 800870e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008712:	e00e      	b.n	8008732 <_Balloc+0x60>
 8008714:	2221      	movs	r2, #33	; 0x21
 8008716:	2104      	movs	r1, #4
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fab5 	bl	8008c88 <_calloc_r>
 800871e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008720:	60e8      	str	r0, [r5, #12]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e4      	bne.n	80086f2 <_Balloc+0x20>
 8008728:	2000      	movs	r0, #0
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	6802      	ldr	r2, [r0, #0]
 800872e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008732:	2300      	movs	r3, #0
 8008734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008738:	e7f7      	b.n	800872a <_Balloc+0x58>

0800873a <_Bfree>:
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800873e:	4606      	mov	r6, r0
 8008740:	460d      	mov	r5, r1
 8008742:	b93c      	cbnz	r4, 8008754 <_Bfree+0x1a>
 8008744:	2010      	movs	r0, #16
 8008746:	f7ff ffb1 	bl	80086ac <malloc>
 800874a:	6270      	str	r0, [r6, #36]	; 0x24
 800874c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008750:	6004      	str	r4, [r0, #0]
 8008752:	60c4      	str	r4, [r0, #12]
 8008754:	b13d      	cbz	r5, 8008766 <_Bfree+0x2c>
 8008756:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008758:	686a      	ldr	r2, [r5, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008760:	6029      	str	r1, [r5, #0]
 8008762:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008766:	bd70      	pop	{r4, r5, r6, pc}

08008768 <__multadd>:
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	690d      	ldr	r5, [r1, #16]
 800876e:	461f      	mov	r7, r3
 8008770:	4606      	mov	r6, r0
 8008772:	460c      	mov	r4, r1
 8008774:	f101 0c14 	add.w	ip, r1, #20
 8008778:	2300      	movs	r3, #0
 800877a:	f8dc 0000 	ldr.w	r0, [ip]
 800877e:	b281      	uxth	r1, r0
 8008780:	fb02 7101 	mla	r1, r2, r1, r7
 8008784:	0c0f      	lsrs	r7, r1, #16
 8008786:	0c00      	lsrs	r0, r0, #16
 8008788:	fb02 7000 	mla	r0, r2, r0, r7
 800878c:	b289      	uxth	r1, r1
 800878e:	3301      	adds	r3, #1
 8008790:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008794:	429d      	cmp	r5, r3
 8008796:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800879a:	f84c 1b04 	str.w	r1, [ip], #4
 800879e:	dcec      	bgt.n	800877a <__multadd+0x12>
 80087a0:	b1d7      	cbz	r7, 80087d8 <__multadd+0x70>
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dc12      	bgt.n	80087ce <__multadd+0x66>
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	4630      	mov	r0, r6
 80087ac:	3101      	adds	r1, #1
 80087ae:	f7ff ff90 	bl	80086d2 <_Balloc>
 80087b2:	6922      	ldr	r2, [r4, #16]
 80087b4:	3202      	adds	r2, #2
 80087b6:	f104 010c 	add.w	r1, r4, #12
 80087ba:	4680      	mov	r8, r0
 80087bc:	0092      	lsls	r2, r2, #2
 80087be:	300c      	adds	r0, #12
 80087c0:	f7ff ff7c 	bl	80086bc <memcpy>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ffb7 	bl	800873a <_Bfree>
 80087cc:	4644      	mov	r4, r8
 80087ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087d2:	3501      	adds	r5, #1
 80087d4:	615f      	str	r7, [r3, #20]
 80087d6:	6125      	str	r5, [r4, #16]
 80087d8:	4620      	mov	r0, r4
 80087da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087de <__hi0bits>:
 80087de:	0c02      	lsrs	r2, r0, #16
 80087e0:	0412      	lsls	r2, r2, #16
 80087e2:	4603      	mov	r3, r0
 80087e4:	b9b2      	cbnz	r2, 8008814 <__hi0bits+0x36>
 80087e6:	0403      	lsls	r3, r0, #16
 80087e8:	2010      	movs	r0, #16
 80087ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087ee:	bf04      	itt	eq
 80087f0:	021b      	lsleq	r3, r3, #8
 80087f2:	3008      	addeq	r0, #8
 80087f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087f8:	bf04      	itt	eq
 80087fa:	011b      	lsleq	r3, r3, #4
 80087fc:	3004      	addeq	r0, #4
 80087fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008802:	bf04      	itt	eq
 8008804:	009b      	lsleq	r3, r3, #2
 8008806:	3002      	addeq	r0, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	db06      	blt.n	800881a <__hi0bits+0x3c>
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	d503      	bpl.n	8008818 <__hi0bits+0x3a>
 8008810:	3001      	adds	r0, #1
 8008812:	4770      	bx	lr
 8008814:	2000      	movs	r0, #0
 8008816:	e7e8      	b.n	80087ea <__hi0bits+0xc>
 8008818:	2020      	movs	r0, #32
 800881a:	4770      	bx	lr

0800881c <__lo0bits>:
 800881c:	6803      	ldr	r3, [r0, #0]
 800881e:	f013 0207 	ands.w	r2, r3, #7
 8008822:	4601      	mov	r1, r0
 8008824:	d00b      	beq.n	800883e <__lo0bits+0x22>
 8008826:	07da      	lsls	r2, r3, #31
 8008828:	d423      	bmi.n	8008872 <__lo0bits+0x56>
 800882a:	0798      	lsls	r0, r3, #30
 800882c:	bf49      	itett	mi
 800882e:	085b      	lsrmi	r3, r3, #1
 8008830:	089b      	lsrpl	r3, r3, #2
 8008832:	2001      	movmi	r0, #1
 8008834:	600b      	strmi	r3, [r1, #0]
 8008836:	bf5c      	itt	pl
 8008838:	600b      	strpl	r3, [r1, #0]
 800883a:	2002      	movpl	r0, #2
 800883c:	4770      	bx	lr
 800883e:	b298      	uxth	r0, r3
 8008840:	b9a8      	cbnz	r0, 800886e <__lo0bits+0x52>
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	2010      	movs	r0, #16
 8008846:	f013 0fff 	tst.w	r3, #255	; 0xff
 800884a:	bf04      	itt	eq
 800884c:	0a1b      	lsreq	r3, r3, #8
 800884e:	3008      	addeq	r0, #8
 8008850:	071a      	lsls	r2, r3, #28
 8008852:	bf04      	itt	eq
 8008854:	091b      	lsreq	r3, r3, #4
 8008856:	3004      	addeq	r0, #4
 8008858:	079a      	lsls	r2, r3, #30
 800885a:	bf04      	itt	eq
 800885c:	089b      	lsreq	r3, r3, #2
 800885e:	3002      	addeq	r0, #2
 8008860:	07da      	lsls	r2, r3, #31
 8008862:	d402      	bmi.n	800886a <__lo0bits+0x4e>
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	d006      	beq.n	8008876 <__lo0bits+0x5a>
 8008868:	3001      	adds	r0, #1
 800886a:	600b      	str	r3, [r1, #0]
 800886c:	4770      	bx	lr
 800886e:	4610      	mov	r0, r2
 8008870:	e7e9      	b.n	8008846 <__lo0bits+0x2a>
 8008872:	2000      	movs	r0, #0
 8008874:	4770      	bx	lr
 8008876:	2020      	movs	r0, #32
 8008878:	4770      	bx	lr

0800887a <__i2b>:
 800887a:	b510      	push	{r4, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	2101      	movs	r1, #1
 8008880:	f7ff ff27 	bl	80086d2 <_Balloc>
 8008884:	2201      	movs	r2, #1
 8008886:	6144      	str	r4, [r0, #20]
 8008888:	6102      	str	r2, [r0, #16]
 800888a:	bd10      	pop	{r4, pc}

0800888c <__multiply>:
 800888c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	4614      	mov	r4, r2
 8008892:	690a      	ldr	r2, [r1, #16]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	bfb8      	it	lt
 800889a:	460b      	movlt	r3, r1
 800889c:	4688      	mov	r8, r1
 800889e:	bfbc      	itt	lt
 80088a0:	46a0      	movlt	r8, r4
 80088a2:	461c      	movlt	r4, r3
 80088a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088b4:	eb07 0609 	add.w	r6, r7, r9
 80088b8:	42b3      	cmp	r3, r6
 80088ba:	bfb8      	it	lt
 80088bc:	3101      	addlt	r1, #1
 80088be:	f7ff ff08 	bl	80086d2 <_Balloc>
 80088c2:	f100 0514 	add.w	r5, r0, #20
 80088c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80088ca:	462b      	mov	r3, r5
 80088cc:	2200      	movs	r2, #0
 80088ce:	4573      	cmp	r3, lr
 80088d0:	d316      	bcc.n	8008900 <__multiply+0x74>
 80088d2:	f104 0214 	add.w	r2, r4, #20
 80088d6:	f108 0114 	add.w	r1, r8, #20
 80088da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80088de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d80c      	bhi.n	8008906 <__multiply+0x7a>
 80088ec:	2e00      	cmp	r6, #0
 80088ee:	dd03      	ble.n	80088f8 <__multiply+0x6c>
 80088f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d05d      	beq.n	80089b4 <__multiply+0x128>
 80088f8:	6106      	str	r6, [r0, #16]
 80088fa:	b003      	add	sp, #12
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	f843 2b04 	str.w	r2, [r3], #4
 8008904:	e7e3      	b.n	80088ce <__multiply+0x42>
 8008906:	f8b2 b000 	ldrh.w	fp, [r2]
 800890a:	f1bb 0f00 	cmp.w	fp, #0
 800890e:	d023      	beq.n	8008958 <__multiply+0xcc>
 8008910:	4689      	mov	r9, r1
 8008912:	46ac      	mov	ip, r5
 8008914:	f04f 0800 	mov.w	r8, #0
 8008918:	f859 4b04 	ldr.w	r4, [r9], #4
 800891c:	f8dc a000 	ldr.w	sl, [ip]
 8008920:	b2a3      	uxth	r3, r4
 8008922:	fa1f fa8a 	uxth.w	sl, sl
 8008926:	fb0b a303 	mla	r3, fp, r3, sl
 800892a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800892e:	f8dc 4000 	ldr.w	r4, [ip]
 8008932:	4443      	add	r3, r8
 8008934:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008938:	fb0b 840a 	mla	r4, fp, sl, r8
 800893c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008940:	46e2      	mov	sl, ip
 8008942:	b29b      	uxth	r3, r3
 8008944:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008948:	454f      	cmp	r7, r9
 800894a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800894e:	f84a 3b04 	str.w	r3, [sl], #4
 8008952:	d82b      	bhi.n	80089ac <__multiply+0x120>
 8008954:	f8cc 8004 	str.w	r8, [ip, #4]
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800895e:	3204      	adds	r2, #4
 8008960:	f1ba 0f00 	cmp.w	sl, #0
 8008964:	d020      	beq.n	80089a8 <__multiply+0x11c>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	4689      	mov	r9, r1
 800896a:	46a8      	mov	r8, r5
 800896c:	f04f 0b00 	mov.w	fp, #0
 8008970:	f8b9 c000 	ldrh.w	ip, [r9]
 8008974:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008978:	fb0a 440c 	mla	r4, sl, ip, r4
 800897c:	445c      	add	r4, fp
 800897e:	46c4      	mov	ip, r8
 8008980:	b29b      	uxth	r3, r3
 8008982:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008986:	f84c 3b04 	str.w	r3, [ip], #4
 800898a:	f859 3b04 	ldr.w	r3, [r9], #4
 800898e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	fb0a b303 	mla	r3, sl, r3, fp
 8008998:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800899c:	454f      	cmp	r7, r9
 800899e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80089a2:	d805      	bhi.n	80089b0 <__multiply+0x124>
 80089a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80089a8:	3504      	adds	r5, #4
 80089aa:	e79b      	b.n	80088e4 <__multiply+0x58>
 80089ac:	46d4      	mov	ip, sl
 80089ae:	e7b3      	b.n	8008918 <__multiply+0x8c>
 80089b0:	46e0      	mov	r8, ip
 80089b2:	e7dd      	b.n	8008970 <__multiply+0xe4>
 80089b4:	3e01      	subs	r6, #1
 80089b6:	e799      	b.n	80088ec <__multiply+0x60>

080089b8 <__pow5mult>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	4615      	mov	r5, r2
 80089be:	f012 0203 	ands.w	r2, r2, #3
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	d007      	beq.n	80089d8 <__pow5mult+0x20>
 80089c8:	3a01      	subs	r2, #1
 80089ca:	4c21      	ldr	r4, [pc, #132]	; (8008a50 <__pow5mult+0x98>)
 80089cc:	2300      	movs	r3, #0
 80089ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089d2:	f7ff fec9 	bl	8008768 <__multadd>
 80089d6:	4607      	mov	r7, r0
 80089d8:	10ad      	asrs	r5, r5, #2
 80089da:	d035      	beq.n	8008a48 <__pow5mult+0x90>
 80089dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089de:	b93c      	cbnz	r4, 80089f0 <__pow5mult+0x38>
 80089e0:	2010      	movs	r0, #16
 80089e2:	f7ff fe63 	bl	80086ac <malloc>
 80089e6:	6270      	str	r0, [r6, #36]	; 0x24
 80089e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ec:	6004      	str	r4, [r0, #0]
 80089ee:	60c4      	str	r4, [r0, #12]
 80089f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089f8:	b94c      	cbnz	r4, 8008a0e <__pow5mult+0x56>
 80089fa:	f240 2171 	movw	r1, #625	; 0x271
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7ff ff3b 	bl	800887a <__i2b>
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	07eb      	lsls	r3, r5, #31
 8008a14:	d50a      	bpl.n	8008a2c <__pow5mult+0x74>
 8008a16:	4639      	mov	r1, r7
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff ff36 	bl	800888c <__multiply>
 8008a20:	4639      	mov	r1, r7
 8008a22:	4681      	mov	r9, r0
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7ff fe88 	bl	800873a <_Bfree>
 8008a2a:	464f      	mov	r7, r9
 8008a2c:	106d      	asrs	r5, r5, #1
 8008a2e:	d00b      	beq.n	8008a48 <__pow5mult+0x90>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	b938      	cbnz	r0, 8008a44 <__pow5mult+0x8c>
 8008a34:	4622      	mov	r2, r4
 8008a36:	4621      	mov	r1, r4
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff ff27 	bl	800888c <__multiply>
 8008a3e:	6020      	str	r0, [r4, #0]
 8008a40:	f8c0 8000 	str.w	r8, [r0]
 8008a44:	4604      	mov	r4, r0
 8008a46:	e7e4      	b.n	8008a12 <__pow5mult+0x5a>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4e:	bf00      	nop
 8008a50:	08008f08 	.word	0x08008f08

08008a54 <__lshift>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	460c      	mov	r4, r1
 8008a5a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	6849      	ldr	r1, [r1, #4]
 8008a62:	eb0a 0903 	add.w	r9, sl, r3
 8008a66:	68a3      	ldr	r3, [r4, #8]
 8008a68:	4607      	mov	r7, r0
 8008a6a:	4616      	mov	r6, r2
 8008a6c:	f109 0501 	add.w	r5, r9, #1
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	db32      	blt.n	8008ada <__lshift+0x86>
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff fe2c 	bl	80086d2 <_Balloc>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	f100 0114 	add.w	r1, r0, #20
 8008a82:	461a      	mov	r2, r3
 8008a84:	4553      	cmp	r3, sl
 8008a86:	db2b      	blt.n	8008ae0 <__lshift+0x8c>
 8008a88:	6920      	ldr	r0, [r4, #16]
 8008a8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8e:	f104 0314 	add.w	r3, r4, #20
 8008a92:	f016 021f 	ands.w	r2, r6, #31
 8008a96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a9e:	d025      	beq.n	8008aec <__lshift+0x98>
 8008aa0:	f1c2 0e20 	rsb	lr, r2, #32
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	681e      	ldr	r6, [r3, #0]
 8008aa8:	468a      	mov	sl, r1
 8008aaa:	4096      	lsls	r6, r2
 8008aac:	4330      	orrs	r0, r6
 8008aae:	f84a 0b04 	str.w	r0, [sl], #4
 8008ab2:	f853 0b04 	ldr.w	r0, [r3], #4
 8008ab6:	459c      	cmp	ip, r3
 8008ab8:	fa20 f00e 	lsr.w	r0, r0, lr
 8008abc:	d814      	bhi.n	8008ae8 <__lshift+0x94>
 8008abe:	6048      	str	r0, [r1, #4]
 8008ac0:	b108      	cbz	r0, 8008ac6 <__lshift+0x72>
 8008ac2:	f109 0502 	add.w	r5, r9, #2
 8008ac6:	3d01      	subs	r5, #1
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f8c8 5010 	str.w	r5, [r8, #16]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	f7ff fe33 	bl	800873a <_Bfree>
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	3101      	adds	r1, #1
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	e7c7      	b.n	8008a70 <__lshift+0x1c>
 8008ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	e7cd      	b.n	8008a84 <__lshift+0x30>
 8008ae8:	4651      	mov	r1, sl
 8008aea:	e7dc      	b.n	8008aa6 <__lshift+0x52>
 8008aec:	3904      	subs	r1, #4
 8008aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008af6:	459c      	cmp	ip, r3
 8008af8:	d8f9      	bhi.n	8008aee <__lshift+0x9a>
 8008afa:	e7e4      	b.n	8008ac6 <__lshift+0x72>

08008afc <__mcmp>:
 8008afc:	6903      	ldr	r3, [r0, #16]
 8008afe:	690a      	ldr	r2, [r1, #16]
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	b530      	push	{r4, r5, lr}
 8008b04:	d10c      	bne.n	8008b20 <__mcmp+0x24>
 8008b06:	0092      	lsls	r2, r2, #2
 8008b08:	3014      	adds	r0, #20
 8008b0a:	3114      	adds	r1, #20
 8008b0c:	1884      	adds	r4, r0, r2
 8008b0e:	4411      	add	r1, r2
 8008b10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b18:	4295      	cmp	r5, r2
 8008b1a:	d003      	beq.n	8008b24 <__mcmp+0x28>
 8008b1c:	d305      	bcc.n	8008b2a <__mcmp+0x2e>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4618      	mov	r0, r3
 8008b22:	bd30      	pop	{r4, r5, pc}
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d3f3      	bcc.n	8008b10 <__mcmp+0x14>
 8008b28:	e7fa      	b.n	8008b20 <__mcmp+0x24>
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	e7f7      	b.n	8008b20 <__mcmp+0x24>

08008b30 <__mdiff>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	460d      	mov	r5, r1
 8008b36:	4607      	mov	r7, r0
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	f7ff ffdd 	bl	8008afc <__mcmp>
 8008b42:	1e06      	subs	r6, r0, #0
 8008b44:	d108      	bne.n	8008b58 <__mdiff+0x28>
 8008b46:	4631      	mov	r1, r6
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f7ff fdc2 	bl	80086d2 <_Balloc>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	bfa4      	itt	ge
 8008b5a:	4623      	movge	r3, r4
 8008b5c:	462c      	movge	r4, r5
 8008b5e:	4638      	mov	r0, r7
 8008b60:	6861      	ldr	r1, [r4, #4]
 8008b62:	bfa6      	itte	ge
 8008b64:	461d      	movge	r5, r3
 8008b66:	2600      	movge	r6, #0
 8008b68:	2601      	movlt	r6, #1
 8008b6a:	f7ff fdb2 	bl	80086d2 <_Balloc>
 8008b6e:	692b      	ldr	r3, [r5, #16]
 8008b70:	60c6      	str	r6, [r0, #12]
 8008b72:	6926      	ldr	r6, [r4, #16]
 8008b74:	f105 0914 	add.w	r9, r5, #20
 8008b78:	f104 0214 	add.w	r2, r4, #20
 8008b7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b84:	f100 0514 	add.w	r5, r0, #20
 8008b88:	f04f 0e00 	mov.w	lr, #0
 8008b8c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b90:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b94:	fa1e f18a 	uxtah	r1, lr, sl
 8008b98:	b2a3      	uxth	r3, r4
 8008b9a:	1ac9      	subs	r1, r1, r3
 8008b9c:	0c23      	lsrs	r3, r4, #16
 8008b9e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008ba2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ba6:	b289      	uxth	r1, r1
 8008ba8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008bac:	45c8      	cmp	r8, r9
 8008bae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bb2:	4694      	mov	ip, r2
 8008bb4:	f845 3b04 	str.w	r3, [r5], #4
 8008bb8:	d8e8      	bhi.n	8008b8c <__mdiff+0x5c>
 8008bba:	45bc      	cmp	ip, r7
 8008bbc:	d304      	bcc.n	8008bc8 <__mdiff+0x98>
 8008bbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008bc2:	b183      	cbz	r3, 8008be6 <__mdiff+0xb6>
 8008bc4:	6106      	str	r6, [r0, #16]
 8008bc6:	e7c5      	b.n	8008b54 <__mdiff+0x24>
 8008bc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bcc:	fa1e f381 	uxtah	r3, lr, r1
 8008bd0:	141a      	asrs	r2, r3, #16
 8008bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bdc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008be0:	f845 3b04 	str.w	r3, [r5], #4
 8008be4:	e7e9      	b.n	8008bba <__mdiff+0x8a>
 8008be6:	3e01      	subs	r6, #1
 8008be8:	e7e9      	b.n	8008bbe <__mdiff+0x8e>

08008bea <__d2b>:
 8008bea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bee:	460e      	mov	r6, r1
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	ec59 8b10 	vmov	r8, r9, d0
 8008bf6:	4615      	mov	r5, r2
 8008bf8:	f7ff fd6b 	bl	80086d2 <_Balloc>
 8008bfc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c00:	4607      	mov	r7, r0
 8008c02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c06:	bb34      	cbnz	r4, 8008c56 <__d2b+0x6c>
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f1b8 0300 	subs.w	r3, r8, #0
 8008c0e:	d027      	beq.n	8008c60 <__d2b+0x76>
 8008c10:	a802      	add	r0, sp, #8
 8008c12:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008c16:	f7ff fe01 	bl	800881c <__lo0bits>
 8008c1a:	9900      	ldr	r1, [sp, #0]
 8008c1c:	b1f0      	cbz	r0, 8008c5c <__d2b+0x72>
 8008c1e:	9a01      	ldr	r2, [sp, #4]
 8008c20:	f1c0 0320 	rsb	r3, r0, #32
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	40c2      	lsrs	r2, r0
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	9201      	str	r2, [sp, #4]
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bf14      	ite	ne
 8008c38:	2102      	movne	r1, #2
 8008c3a:	2101      	moveq	r1, #1
 8008c3c:	6139      	str	r1, [r7, #16]
 8008c3e:	b1c4      	cbz	r4, 8008c72 <__d2b+0x88>
 8008c40:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008c44:	4404      	add	r4, r0
 8008c46:	6034      	str	r4, [r6, #0]
 8008c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c4c:	6028      	str	r0, [r5, #0]
 8008c4e:	4638      	mov	r0, r7
 8008c50:	b003      	add	sp, #12
 8008c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c5a:	e7d5      	b.n	8008c08 <__d2b+0x1e>
 8008c5c:	6179      	str	r1, [r7, #20]
 8008c5e:	e7e7      	b.n	8008c30 <__d2b+0x46>
 8008c60:	a801      	add	r0, sp, #4
 8008c62:	f7ff fddb 	bl	800881c <__lo0bits>
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	6139      	str	r1, [r7, #16]
 8008c6e:	3020      	adds	r0, #32
 8008c70:	e7e5      	b.n	8008c3e <__d2b+0x54>
 8008c72:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c7a:	6030      	str	r0, [r6, #0]
 8008c7c:	6918      	ldr	r0, [r3, #16]
 8008c7e:	f7ff fdae 	bl	80087de <__hi0bits>
 8008c82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c86:	e7e1      	b.n	8008c4c <__d2b+0x62>

08008c88 <_calloc_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	fb02 f401 	mul.w	r4, r2, r1
 8008c8e:	4621      	mov	r1, r4
 8008c90:	f000 f808 	bl	8008ca4 <_malloc_r>
 8008c94:	4605      	mov	r5, r0
 8008c96:	b118      	cbz	r0, 8008ca0 <_calloc_r+0x18>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	f7fe fb60 	bl	8007360 <memset>
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}

08008ca4 <_malloc_r>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	1ccd      	adds	r5, r1, #3
 8008ca8:	f025 0503 	bic.w	r5, r5, #3
 8008cac:	3508      	adds	r5, #8
 8008cae:	2d0c      	cmp	r5, #12
 8008cb0:	bf38      	it	cc
 8008cb2:	250c      	movcc	r5, #12
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	db01      	blt.n	8008cbe <_malloc_r+0x1a>
 8008cba:	42a9      	cmp	r1, r5
 8008cbc:	d903      	bls.n	8008cc6 <_malloc_r+0x22>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	6033      	str	r3, [r6, #0]
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	f000 f869 	bl	8008d9c <__malloc_lock>
 8008cca:	4a21      	ldr	r2, [pc, #132]	; (8008d50 <_malloc_r+0xac>)
 8008ccc:	6814      	ldr	r4, [r2, #0]
 8008cce:	4621      	mov	r1, r4
 8008cd0:	b991      	cbnz	r1, 8008cf8 <_malloc_r+0x54>
 8008cd2:	4c20      	ldr	r4, [pc, #128]	; (8008d54 <_malloc_r+0xb0>)
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	b91b      	cbnz	r3, 8008ce0 <_malloc_r+0x3c>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 f83d 	bl	8008d58 <_sbrk_r>
 8008cde:	6020      	str	r0, [r4, #0]
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 f838 	bl	8008d58 <_sbrk_r>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d124      	bne.n	8008d36 <_malloc_r+0x92>
 8008cec:	230c      	movs	r3, #12
 8008cee:	6033      	str	r3, [r6, #0]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 f854 	bl	8008d9e <__malloc_unlock>
 8008cf6:	e7e4      	b.n	8008cc2 <_malloc_r+0x1e>
 8008cf8:	680b      	ldr	r3, [r1, #0]
 8008cfa:	1b5b      	subs	r3, r3, r5
 8008cfc:	d418      	bmi.n	8008d30 <_malloc_r+0x8c>
 8008cfe:	2b0b      	cmp	r3, #11
 8008d00:	d90f      	bls.n	8008d22 <_malloc_r+0x7e>
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	50cd      	str	r5, [r1, r3]
 8008d06:	18cc      	adds	r4, r1, r3
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 f848 	bl	8008d9e <__malloc_unlock>
 8008d0e:	f104 000b 	add.w	r0, r4, #11
 8008d12:	1d23      	adds	r3, r4, #4
 8008d14:	f020 0007 	bic.w	r0, r0, #7
 8008d18:	1ac3      	subs	r3, r0, r3
 8008d1a:	d0d3      	beq.n	8008cc4 <_malloc_r+0x20>
 8008d1c:	425a      	negs	r2, r3
 8008d1e:	50e2      	str	r2, [r4, r3]
 8008d20:	e7d0      	b.n	8008cc4 <_malloc_r+0x20>
 8008d22:	428c      	cmp	r4, r1
 8008d24:	684b      	ldr	r3, [r1, #4]
 8008d26:	bf16      	itet	ne
 8008d28:	6063      	strne	r3, [r4, #4]
 8008d2a:	6013      	streq	r3, [r2, #0]
 8008d2c:	460c      	movne	r4, r1
 8008d2e:	e7eb      	b.n	8008d08 <_malloc_r+0x64>
 8008d30:	460c      	mov	r4, r1
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	e7cc      	b.n	8008cd0 <_malloc_r+0x2c>
 8008d36:	1cc4      	adds	r4, r0, #3
 8008d38:	f024 0403 	bic.w	r4, r4, #3
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d005      	beq.n	8008d4c <_malloc_r+0xa8>
 8008d40:	1a21      	subs	r1, r4, r0
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 f808 	bl	8008d58 <_sbrk_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d0cf      	beq.n	8008cec <_malloc_r+0x48>
 8008d4c:	6025      	str	r5, [r4, #0]
 8008d4e:	e7db      	b.n	8008d08 <_malloc_r+0x64>
 8008d50:	20000220 	.word	0x20000220
 8008d54:	20000224 	.word	0x20000224

08008d58 <_sbrk_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4c06      	ldr	r4, [pc, #24]	; (8008d74 <_sbrk_r+0x1c>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4605      	mov	r5, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	f7f9 f882 	bl	8001e6c <_sbrk>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_sbrk_r+0x1a>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_sbrk_r+0x1a>
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	2000075c 	.word	0x2000075c

08008d78 <__ascii_mbtowc>:
 8008d78:	b082      	sub	sp, #8
 8008d7a:	b901      	cbnz	r1, 8008d7e <__ascii_mbtowc+0x6>
 8008d7c:	a901      	add	r1, sp, #4
 8008d7e:	b142      	cbz	r2, 8008d92 <__ascii_mbtowc+0x1a>
 8008d80:	b14b      	cbz	r3, 8008d96 <__ascii_mbtowc+0x1e>
 8008d82:	7813      	ldrb	r3, [r2, #0]
 8008d84:	600b      	str	r3, [r1, #0]
 8008d86:	7812      	ldrb	r2, [r2, #0]
 8008d88:	1c10      	adds	r0, r2, #0
 8008d8a:	bf18      	it	ne
 8008d8c:	2001      	movne	r0, #1
 8008d8e:	b002      	add	sp, #8
 8008d90:	4770      	bx	lr
 8008d92:	4610      	mov	r0, r2
 8008d94:	e7fb      	b.n	8008d8e <__ascii_mbtowc+0x16>
 8008d96:	f06f 0001 	mvn.w	r0, #1
 8008d9a:	e7f8      	b.n	8008d8e <__ascii_mbtowc+0x16>

08008d9c <__malloc_lock>:
 8008d9c:	4770      	bx	lr

08008d9e <__malloc_unlock>:
 8008d9e:	4770      	bx	lr

08008da0 <__ascii_wctomb>:
 8008da0:	b149      	cbz	r1, 8008db6 <__ascii_wctomb+0x16>
 8008da2:	2aff      	cmp	r2, #255	; 0xff
 8008da4:	bf85      	ittet	hi
 8008da6:	238a      	movhi	r3, #138	; 0x8a
 8008da8:	6003      	strhi	r3, [r0, #0]
 8008daa:	700a      	strbls	r2, [r1, #0]
 8008dac:	f04f 30ff 	movhi.w	r0, #4294967295
 8008db0:	bf98      	it	ls
 8008db2:	2001      	movls	r0, #1
 8008db4:	4770      	bx	lr
 8008db6:	4608      	mov	r0, r1
 8008db8:	4770      	bx	lr
	...

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
